- id: '1691007313405'
  alias: Assist play specific artist
  description: ''
  triggers:
  - command:
    - play the artist {artist}
    - play some  [of] {artist}
    trigger: conversation
  conditions: []
  actions:
  - data:
      media_type: artist
      enqueue: replace
      media_id: '{{ trigger.slots.artist  }}'
    target:
      entity_id: media_player.group_mass_home_group_speakers
    action: music_assistant.play_media
  mode: single
- id: '1691088980213'
  alias: Assist Play Playlist
  description: ''
  triggers:
  - command:
    - (start|play) [the] {playlist} playlist
    trigger: conversation
  conditions: []
  actions:
  - data:
      media_content_type: playlist
      media_content_id: '{{ trigger.slots.playlist }}'
    target:
      entity_id: media_player.group_mass_home_group_speakers
    action: media_player.play_media
  mode: single
- id: '1691094215164'
  alias: Assist Set Thermostats
  description: ''
  trigger:
  - platform: conversation
    command:
    - (set|change) [the] {thermostat} (AC|thermostat) to {temperature}
  condition: []
  action:
  - service: climate.set_temperature
    data:
      temperature: '{{ trigger.slots.temperature }}'
    target:
      entity_id: climate.{{ trigger.slots.thermostat| lower | replace('living room','livingroom')}}_ac
  mode: single
- id: '1698434157594'
  alias: Update Map Extractor camera
  description: ''
  use_blueprint:
    path: PiotrMachowski/update_map_extractor.yaml
    input:
      vacuum: vacuum.xiaomi_vacuum_cleaner
      camera: camera.xiaomi_cloud_map_extractor
      mode_to_handle: turn_off_when_docked
- id: '1708472009602'
  alias: Play Random Music when maxi awakes at home
  description: This Automation will start music on the home group when maxi awakes
  triggers:
  - entity_id:
    - sensor.is_maxi_asleep
    from: asleep
    to: awake
    for:
      hours: 0
      minutes: 6
      seconds: 0
    trigger: state
  conditions:
  - condition: state
    entity_id: person.maximiliano
    state: home
  - condition: state
    entity_id: media_player.group_mass_home_group_speakers
    state: 'off'
  - condition: state
    entity_id: binary_sensor.all_present_sleeping
    state: 'off'
  actions:
  - data:
      media_id: All favorited tracks
      enqueue: replace
    action: music_assistant.play_media
    target:
      entity_id: media_player.group_mass_home_group_speakers
  mode: single
- id: '1708472370553'
  alias: Stop bedroom speaker when bedroom sleeper awake
  description: ''
  triggers:
  - entity_id:
    - input_boolean.sleeper_in_bedroom
    from: 'on'
    to: 'off'
    for:
      hours: 0
      minutes: 6
      seconds: 0
    trigger: state
  conditions: []
  actions:
  - metadata: {}
    data: {}
    action: media_player.turn_off
    target:
      entity_id: media_player.universal_bedroom_speakers
  mode: single
- id: '1711377375732'
  alias: Assist play song by artist next
  description: ''
  triggers:
  - command:
    - queue {song} by {artist}
    - cue {song} by {artist}
    trigger: conversation
  conditions: []
  actions:
  - data:
      limit: 1
      media_type:
      - track
      name: '{{ trigger.slots.song  }}'
      artist: '{{ trigger.slots.artist  }}'
    response_variable: found_song
    action: music_assistant.search
    enabled: false
  - target:
      entity_id: media_player.group_mass_home_group_speakers
    data:
      media_type: track
      enqueue: next
      media_id: '{{ trigger.slots.song  }}'
      artist: '{{ trigger.slots.artist  }}'
    action: music_assistant.play_media
  mode: single
- id: '1711377604136'
  alias: Assist Play song by artist now
  description: ''
  triggers:
  - command:
    - play {song} by {artist}
    trigger: conversation
  conditions: []
  actions:
  - target:
      entity_id:
      - media_player.group_mass_home_group_speakers
    data:
      media_type: track
      enqueue: play
      media_id: '{{ trigger.slots.song  }}'
      artist: '{{ trigger.slots.artist  }}'
    action: music_assistant.play_media
  - target:
      entity_id:
      - media_player.group_mass_home_group_speakers
    data:
      media_type: track
      enqueue: add
      media_id: '{{ found_song.tracks.0.name }}'
      radio_mode: true
    action: mass.play_media
    enabled: false
  mode: single
- id: '1711565389493'
  alias: Assist Restart Music Assistant
  description: ''
  trigger:
  - platform: conversation
    command: Restart Music Assistant
  condition: []
  action:
  - service: hassio.addon_restart
    metadata: {}
    data:
      addon: d5369777_music_assistant_beta
  mode: single
- id: '1711576326986'
  alias: Assist play music (default)
  description: ''
  triggers:
  - command:
    - play music
    - play some music
    trigger: conversation
  conditions: []
  actions:
  - data:
      media_type: playlist
      enqueue: replace
      media_id: local maxi playlist
    action: music_assistant.play_media
    target:
      entity_id: media_player.group_mass_home_group_speakers
  mode: single
- id: '1713377627308'
  alias: Mute Speakers in the hotbox when computer mic is in use
  description: ''
  triggers:
  - type: turned_on
    device_id: 0cc46b896079dbc299255330f9ea856e
    entity_id: 470a4142c11434774d1b570a456f145b
    domain: binary_sensor
    trigger: device
    for:
      hours: 0
      minutes: 0
      seconds: 2
  conditions:
  - condition: not
    conditions:
    - condition: state
      entity_id: media_player.universal_office_speakers
      state: 'off'
  actions:
  - metadata: {}
    data:
      is_volume_muted: true
    action: media_player.volume_mute
    target:
      entity_id: media_player.universal_hotbox_speakers
  mode: single
- id: '1713377704036'
  alias: Unmute Speakers in the hotbox when computer mic goes off
  description: ''
  triggers:
  - type: turned_off
    device_id: 0cc46b896079dbc299255330f9ea856e
    entity_id: 470a4142c11434774d1b570a456f145b
    domain: binary_sensor
    trigger: device
    for:
      hours: 0
      minutes: 0
      seconds: 2
  conditions:
  - condition: not
    conditions:
    - condition: state
      entity_id: media_player.universal_hotbox_speakers
      state: 'off'
  actions:
  - metadata: {}
    data:
      is_volume_muted: false
    action: media_player.volume_mute
    target:
      entity_id: media_player.universal_hotbox_speakers
  mode: single
- id: '1713378517441'
  alias: Lock front door when it is closed for 5 seconds
  description: ''
  trigger:
  - platform: state
    entity_id:
    - binary_sensor.sensor_front_outside_door_contact
    from:
    to: 'off'
    for:
      hours: 0
      minutes: 0
      seconds: 5
  condition:
  - condition: not
    conditions:
    - condition: state
      entity_id: lock.lock_front_door
      state: locked
  action:
  - service: lock.lock
    metadata: {}
    data: {}
    target:
      entity_id: lock.lock_front_door
  mode: single
- id: '1713378679048'
  alias: Lock front door 5 minutes after unlocking
  description: ''
  trigger:
  - platform: state
    entity_id:
    - lock.lock_front_door
    to: unlocked
    for:
      hours: 0
      minutes: 5
      seconds: 0
  condition:
  - condition: state
    entity_id: binary_sensor.sensor_front_outside_door_contact
    state: 'off'
  action:
  - service: lock.lock
    metadata: {}
    data: {}
    target:
      entity_id: lock.lock_front_door
  mode: single
- id: '1713378916074'
  alias: Alert that the front door remained open
  description: ''
  triggers:
  - entity_id:
    - binary_sensor.sensor_front_door_contact
    to: 'on'
    for:
      hours: 0
      minutes: 3
      seconds: 0
    trigger: state
  conditions:
  - condition: state
    entity_id: input_boolean.aerating_appartment
    state: 'off'
  actions:
  - repeat:
      sequence:
      - action: script.non_important_broadcast_alert_in_the_house
        data:
          message: Front door remained opened
      - delay:
          hours: 0
          minutes: 5
          seconds: 0
          milliseconds: 0
      while:
      - condition: state
        entity_id: binary_sensor.sensor_front_door_contact
        state: 'on'
    enabled: true
  mode: restart
- id: '1713399927983'
  alias: Alert that the vacuum is stuck
  description: ''
  triggers:
  - entity_id:
    - vacuum.xiaomi_vacuum_cleaner
    to: error
    trigger: state
  conditions: []
  actions:
  - repeat:
      sequence:
      - metadata: {}
        data:
          message: Vacuum Stuck
        action: script.non_important_broadcast_alert_in_the_house
      - delay:
          hours: 0
          minutes: 10
          seconds: 0
          milliseconds: 0
      until:
      - condition: not
        conditions:
        - condition: state
          entity_id: vacuum.xiaomi_vacuum_cleaner
          state: error
  mode: single
- id: '1713407734344'
  alias: Lock back door when it is closed for 5 seconds
  description: ''
  trigger:
  - platform: state
    entity_id:
    - binary_sensor.sensor_back_outside_door_contact
    from:
    to: 'off'
    for:
      hours: 0
      minutes: 0
      seconds: 5
  condition:
  - condition: not
    conditions:
    - condition: state
      entity_id: lock.back_door
      state: locked
  action:
  - service: lock.lock
    metadata: {}
    data: {}
    target:
      entity_id: lock.back_door
  mode: single
- id: '1713407853586'
  alias: Lock back door 5 minutes after unlocking
  description: ''
  trigger:
  - platform: state
    entity_id:
    - lock.back_door
    to: unlocked
    for:
      hours: 0
      minutes: 5
      seconds: 0
  condition:
  - condition: state
    entity_id: binary_sensor.sensor_back_outside_door_contact
    state: 'off'
  action:
  - service: lock.lock
    metadata: {}
    data: {}
    target:
      entity_id: lock.back_door
  mode: single
- id: '1713408006382'
  alias: Turn back door lights on when someone is detected
  description: ''
  trigger:
  - platform: state
    entity_id:
    - binary_sensor.back_door_camera_person_occupancy
    to: 'on'
  condition: []
  action:
  - service: light.turn_on
    metadata: {}
    data:
      color_temp: 254
      brightness: 255
    target:
      entity_id: light.back_door_light
  - wait_for_trigger:
    - platform: state
      entity_id:
      - binary_sensor.back_door_camera_person_occupancy
      to: 'off'
      for:
        hours: 0
        minutes: 0
        seconds: 30
    timeout:
      hours: 0
      minutes: 0
      seconds: 0
      milliseconds: 0
  - service: light.turn_off
    metadata: {}
    data:
      transition: 30
    target:
      entity_id: light.back_door_light
  mode: single
- id: '1713451307697'
  alias: Sleep actions when "maxi is sleeping" is turned on and maxi is home
  description: Close the blinds, turn off the lights and turn on the sleep mode of
    Adaptative lighting
  triggers:
  - entity_id:
    - binary_sensor.maxi_sleeping
    to: 'on'
    for:
      hours: 0
      minutes: 5
      seconds: 0
    trigger: state
  conditions:
  - condition: state
    entity_id: input_boolean.kink_party
    state: 'off'
  - condition: state
    entity_id: input_boolean.acid_time
    state: 'off'
  - condition: state
    entity_id: input_boolean.party_mode
    state: 'off'
  - condition: state
    entity_id: person.maximiliano
    state: home
  actions:
  - metadata: {}
    data: {}
    target:
      entity_id: switch.adaptive_lighting_sleep_mode_adaptive_lighting
    action: switch.turn_on
  - metadata: {}
    data: {}
    target:
      entity_id:
      - cover.cover_livingroom_blinds
      - cover.cover_salon_blinds
      - cover.cover_hotbox_blinds
    action: cover.close_cover
  mode: single
- id: '1713451780517'
  alias: Turn off Sleeping mode for Adaptative lighting on "MAxi is sleeping" turns
    on off
  description: Turn off sleep mode for adaptative lighting
  triggers:
  - entity_id:
    - binary_sensor.maxi_sleeping
    to: 'off'
    trigger: state
  conditions: []
  actions:
  - target:
      entity_id: switch.adaptive_lighting_sleep_mode_adaptive_lighting
    data: {}
    action: switch.turn_off
  mode: single
- id: '1713451981404'
  alias: Turn on party mode when over 5 guests are over
  description: Also check that no psychedelic or kink event is going on
  trigger:
  - platform: numeric_state
    entity_id:
    - sensor.amount_friends_home
    above: 5
  condition:
  - condition: state
    entity_id: input_boolean.kink_party
    state: 'off'
  - condition: state
    entity_id: input_boolean.acid_time
    state: 'off'
  action:
  - service: input_boolean.turn_on
    target:
      entity_id: input_boolean.party_mode
    data: {}
  mode: single
- id: '1713452550061'
  alias: Close blinds when the house is empty
  description: 'Close blinds '
  triggers:
  - entity_id:
    - zone.home
    for:
      hours: 0
      minutes: 5
      seconds: 0
    below: 0.9
    trigger: numeric_state
  conditions: []
  actions:
  - metadata: {}
    data: {}
    action: cover.close_cover
    target:
      entity_id:
      - cover.group_all_blinds
      - cover.cover_bedroom_blinds
  mode: single
- id: '1713460807856'
  alias: Start visuals when Party mode is turned on
  description: ''
  triggers:
  - entity_id:
    - input_boolean.party_mode
    to: 'on'
    trigger: state
  conditions: []
  actions:
  - metadata: {}
    data:
      requested_playlist: Colorful Backgrounds Visuals
    action: script.start_visual_playlist_on_plex
  mode: single
- id: '1713464997452'
  alias: Change room lights to semi-saturated colors when party turns on
  description: ''
  triggers:
  - entity_id:
    - input_boolean.party_mode
    to: 'on'
    trigger: state
  conditions: []
  actions:
  - action: script.1714667687332
    metadata: {}
    data: {}
  mode: single
- id: '1713465737957'
  alias: Change all single lights to random saturated colors  when acid mode turns
    on
  description: ''
  trigger:
  - platform: state
    entity_id:
    - input_boolean.acid_time
    to: 'on'
  condition: []
  action:
  - variables:
      lights: "{% set ns = namespace(lights=[]) %} {% set groups = integration_entities('group')|
        \ select('search', '^light.')   | list %} {% for group in groups %}\n    {%
        set individual_lights = state_attr(group,'entity_id')%}\n    {% for individual_light
        in individual_lights %}\n    {% if \"group\" not in individual_light and state_attr(individual_light,
        'rgb_color') %}\n      {% set ns.lights = ns.lights  + [individual_light]
        %}\n    {% endif %}\n    {% endfor %}    \n{% endfor %} {{  ns.lights  }}\n"
  - repeat:
      sequence:
      - service: script.change_received_lights_to_random_colors
        data:
          lights:
          - '{{lights[repeat.index - 1]}}'
          saturation: 100
      for_each: '{{ lights }}'
  mode: single
- id: '1713468195069'
  alias: Start 4k visuals when acid time turns on
  description: ''
  trigger:
  - platform: state
    entity_id:
    - input_boolean.acid_time
    to: 'on'
  condition: []
  action:
  - service: script.start_visual_playlist_on_plex
    metadata: {}
    data:
      requested_playlist: 4k visuals
  mode: single
- id: '1713469587813'
  alias: Turn lights to purple when a movie is played
  description: ''
  trigger:
  - platform: state
    entity_id:
    - media_player.universal_office_chromecast
    - media_player.universal_livingroom_chromecast
    - media_player.universal_hotbox_top_chromecast
    - media_player.universal_hotbox_down_chromecast
    - media_player.universal_patio_chromecast
    to: playing
  condition: []
  action:
  - repeat:
      sequence:
      - variables:
          on_lights_in_room: '{{ [area_id(trigger.entity_id)] | map(''area_id'') |
            map(''area_entities'') | sum(start=[]) | select(''match'', ''^light.'')
            | select(''is_state'',''on'') | unique | list }}

            '
          entity_id: '{{ trigger.entity_id }}

            '
          trigger_full: '{{ trigger.to_state.attributes }}

            '
      - if:
        - condition: template
          value_template: '{{ trigger.to_state.attributes.media_content_type == "movie"
            }}'
        - condition: template
          value_template: '{{ not trigger.to_state.attributes.media_series_title }}'
        then:
        - service: light.turn_on
          metadata: {}
          data:
            rgb_color:
            - 255
            - 0
            - 255
            brightness_pct: '30'
          target:
            entity_id: '{{ on_lights_in_room | list }}'
      count: 1
    enabled: true
  - wait_for_trigger:
    - platform: template
      value_template: '{{ states(trigger.entity_id) == "off" }}'
    timeout:
      hours: 4
      minutes: 0
      seconds: 0
      milliseconds: 0
    continue_on_timeout: false
  - variables:
      on_lights_in_room: '{{ [area_id(trigger.entity_id)] | map(''area_id'') | map(''area_entities'')
        | sum(start=[]) | select(''match'', ''^light.'') | select(''is_state'',''on'')
        | unique | list }}

        '
      entity_id: '{{ trigger.entity_id }}

        '
      trigger_full: '{{ trigger.to_state.attributes }}

        '
  - service: light.turn_on
    metadata: {}
    data:
      rgb_color:
      - 255
      - 255
      - 255
      brightness_pct: '100'
    target:
      entity_id: '{{ on_lights_in_room | list}}'
  mode: restart
- id: '1713533595890'
  alias: Disarm alarm-away when "User Home" turns on
  description: ''
  trigger:
  - platform: state
    entity_id:
    - binary_sensor.user_home
    to: 'on'
    from: 'off'
  condition:
  - condition: state
    entity_id: alarm_control_panel.home_alarm
    state: armed_away
  action:
  - service: alarm_control_panel.alarm_disarm
    metadata: {}
    data: {}
    target:
      entity_id: alarm_control_panel.home_alarm
  mode: single
- id: '1713533768680'
  alias: Arm Alarm-Away when "User home" is off for 10 minutes
  description: ''
  trigger:
  - platform: state
    entity_id:
    - binary_sensor.user_home
    from: 'on'
    to: 'off'
    for:
      hours: 0
      minutes: 10
      seconds: 0
  condition: []
  action:
  - service: alarm_control_panel.alarm_arm_away
    metadata: {}
    data: {}
    target:
      entity_id: alarm_control_panel.home_alarm
  mode: single
- id: '1713534223873'
  alias: Turn ACs on and Off  depending on house occupancy
  description: ''
  trigger:
  - platform: state
    entity_id:
    - binary_sensor.user_home
  condition: []
  action:
  - choose:
    - conditions:
      - condition: state
        entity_id: binary_sensor.user_home
        state: 'on'
      sequence:
      - service: climate.set_preset_mode
        metadata: {}
        data:
          preset_mode: none
        target:
          entity_id:
          - climate.hotbox_ac
          - climate.livingroom_ac
          - climate.office_ac
    - conditions:
      - condition: state
        entity_id: binary_sensor.user_home
        state: 'off'
      sequence:
      - service: climate.set_preset_mode
        metadata: {}
        data:
          preset_mode: away
        target:
          entity_id:
          - climate.hotbox_ac
          - climate.livingroom_ac
          - climate.office_ac
  mode: single
- id: '1713535684569'
  alias: Play Muzak in the bathroom when someone enters
  description: ''
  triggers:
  - entity_id:
    - binary_sensor.sensor_bathroom_motion_occupancy
    to: 'on'
    from: 'off'
    trigger: state
  conditions:
  - condition: not
    conditions:
    - condition: state
      entity_id: media_player.bathroom_speaker
      state: playing
  actions:
  - metadata: {}
    data:
      media_content_id: 'plex://{ "library_name": "Muzak", "shuffle": 1, "allow_multiple":
        1}'
      media_content_type: music
    target:
      entity_id: media_player.bathroom_speaker
    action: media_player.play_media
  - choose:
    - conditions:
      - condition: state
        entity_id: binary_sensor.sensor_bathroom_door_contact
        state: 'on'
      sequence:
      - metadata: {}
        data:
          volume_level: 0.1
        target:
          entity_id: media_player.bathroom_speaker
        action: media_player.volume_set
    - conditions:
      - condition: state
        entity_id: binary_sensor.sensor_bathroom_door_contact
        state: 'off'
      sequence:
      - metadata: {}
        data:
          volume_level: 0.4
        action: media_player.volume_set
        target:
          entity_id: media_player.bathroom_speaker
  mode: restart
- id: '1713536409397'
  alias: Raise music on the playing speaker when the Bathroom fans goes on
  description: ''
  triggers:
  - entity_id:
    - switch.bathroom_fan
    from: 'off'
    to: 'on'
    trigger: state
  conditions:
  - condition: state
    entity_id: binary_sensor.sensor_bathroom_door_contact
    state: 'off'
  actions:
  - choose:
    - conditions:
      - condition: state
        entity_id: media_player.bathroom_speaker
        state: 'off'
      sequence:
      - metadata: {}
        data: {}
        target:
          entity_id: media_player.bathroom_speaker
        action: media_player.volume_up
      - metadata: {}
        data: {}
        target:
          entity_id: media_player.bathroom_speaker
        action: media_player.volume_up
    - conditions:
      - condition: state
        entity_id: media_player.bathroom_speaker
        state: playing
      sequence:
      - metadata: {}
        data: {}
        target:
          entity_id:
          - media_player.bathroom_speaker
        enabled: true
        action: media_player.volume_up
      - metadata: {}
        data: {}
        target:
          entity_id:
          - media_player.bathroom_speaker
        enabled: true
        action: media_player.volume_up
  mode: single
- id: '1713536741103'
  alias: Start/stop bathroom fan when Bathroom humidity changes
  description: ''
  triggers:
  - entity_id:
    - binary_sensor.shower_in_use
    trigger: state
    to: 'on'
    for:
      hours: 0
      minutes: 1
      seconds: 0
  conditions: []
  actions:
  - metadata: {}
    data: {}
    target:
      entity_id: switch.bathroom_fan
    action: switch.turn_on
  - wait_for_trigger:
    - entity_id:
      - sensor.sensor_bathroom_temperature_humidity
      below: 65
      trigger: numeric_state
    continue_on_timeout: true
    timeout:
      hours: 0
      minutes: 45
      seconds: 0
      milliseconds: 0
  - metadata: {}
    data: {}
    target:
      entity_id: switch.bathroom_fan
    action: switch.turn_off
  mode: restart
- id: '1713538197256'
  alias: Control Hallway Tablet charging
  description: ''
  triggers:
  - entity_id:
    - sensor.hallway_tablet_battery
    trigger: state
  conditions: []
  actions:
  - choose:
    - conditions:
      - condition: numeric_state
        entity_id: sensor.hallway_tablet_battery
        above: 90
      sequence:
      - metadata: {}
        data: {}
        target:
          entity_id: switch.plug_hallway_tablet
        action: switch.turn_off
    - conditions:
      - condition: numeric_state
        entity_id: sensor.hallway_tablet_battery
        below: 15
      sequence:
      - metadata: {}
        data: {}
        target:
          entity_id: switch.plug_hallway_tablet
        action: switch.turn_on
      - action: number.set_value
        metadata: {}
        data:
          value: '25'
        target:
          entity_id: number.hallway_tablet_screen_brightness
    - conditions:
      - condition: numeric_state
        entity_id: sensor.hallway_tablet_battery
        above: 20
      - condition: state
        entity_id: binary_sensor.hallway_tablet_plugged_in
        state: 'on'
      sequence:
      - action: number.set_value
        metadata: {}
        data:
          value: '100'
        target:
          entity_id: number.hallway_tablet_screen_brightness
  mode: single
- id: '1713574201448'
  alias: Turn lights to white when we stop a movie
  description: ''
  trigger:
  - platform: state
    entity_id:
    - media_player.universal_office_chromecast
    - media_player.universal_livingroom_chromecast
    - media_player.universal_hotbox_top_chromecast
    - media_player.universal_hotbox_down_chromecast
    - media_player.universal_patio_chromecast
    to: 'off'
  condition:
  - condition: template
    value_template: '{{ trigger.from_state.attributes.media_content_type == "movie"
      }}'
  - condition: template
    value_template: '{{ not trigger.from_state.attributes.media_series_title }}'
  action:
  - repeat:
      sequence:
      - variables:
          off_lights_in_room: '{{ [area_id(trigger.entity_id)] | map(''area_id'')
            | map(''area_entities'') | sum(start=[]) | select(''match'', ''^light.'')
            | select(''is_state'',''on'') | unique | list }}

            '
          entity_id: '{{ trigger.entity_id }}

            '
          trigger_full: '{{ trigger.to_state.attributes }}

            '
      - repeat:
          sequence:
          - service: light.turn_on
            metadata: {}
            data:
              rgb_color:
              - 255
              - 255
              - 255
              brightness_pct: '100'
              transition: 150
            target:
              entity_id: '{{ off_lights_in_room[repeat.index - 1 ] }}'
          for_each: '{{off_lights_in_room}}'
        enabled: true
      count: 1
    enabled: true
  mode: restart
- id: '1713630060902'
  alias: Raise lights to 60% brightness when a movie is paused and the brightness
    is below 30%
  description: ''
  trigger:
  - platform: state
    entity_id:
    - media_player.universal_office_chromecast
    - media_player.universal_livingroom_chromecast
    - media_player.universal_hotbox_top_chromecast
    - media_player.universal_hotbox_down_chromecast
    - media_player.universal_patio_chromecast
    to: paused
    from: playing
  condition:
  - condition: template
    value_template: '{{ trigger.from_state.attributes.media_content_type == "movie"
      }}'
  - condition: template
    value_template: '{{ not trigger.from_state.attributes.media_series_title }}'
  action:
  - repeat:
      sequence:
      - variables:
          off_lights_in_room: '{{ [area_id(trigger.entity_id)] | map(''area_id'')
            | map(''area_entities'') | sum(start=[]) | select(''match'', ''^light.'')
            | select(''is_state'',''on'') | unique | list }}

            '
          entity_id: '{{ trigger.entity_id }}

            '
          trigger_full: '{{ trigger.to_state.attributes }}

            '
      - repeat:
          sequence:
          - if:
            - condition: template
              value_template: '

                {{ state_attr(off_lights_in_room[repeat.index - 1 ], "brightness")
                < 80 }}'
            then:
            - service: light.turn_on
              metadata: {}
              data:
                brightness_pct: '60'
              target:
                entity_id: '{{ off_lights_in_room[repeat.index - 1 ] }}'
          for_each: '{{off_lights_in_room}}'
        enabled: true
      count: 1
    enabled: true
  mode: parallel
  max: 6
- id: '1713631370622'
  alias: Turn off Closet fan after 5 minutes of non occupancy
  description: ''
  trigger:
  - platform: state
    entity_id:
    - binary_sensor.group_closet_motion_occupancy
    from: 'on'
    to: 'off'
    for:
      hours: 0
      minutes: 5
      seconds: 0
  condition:
  - condition: state
    entity_id: input_boolean.sleeper_in_closet
    state: 'off'
  action:
  - service: switch.turn_off
    metadata: {}
    data: {}
    target:
      entity_id: switch.plug_closet_fan
  mode: single
- id: '1713719722990'
  alias: Conditionally Unmute Speakers when a room is occupied
  description: 'This one uses motion groups '
  triggers:
  - entity_id:
    - binary_sensor.group_closet_motion_occupancy
    - binary_sensor.group_office_motion_occupancy
    - binary_sensor.group_bedroom_motion_occupancy
    - binary_sensor.group_hallway_motion_occupancy
    - binary_sensor.group_kitchen_motion_occupancy
    - binary_sensor.group_entrance_motion_occupancy
    - binary_sensor.group_livingroom_motion_occupancy
    - binary_sensor.group_salon_motion_occupancy
    - binary_sensor.group_hotbox_motion_occupancy
    for:
      hours: 0
      minutes: 0
      seconds: 0
    to: 'on'
    trigger: state
  conditions:
  - condition: state
    entity_id: input_boolean.following_music
    state: 'on'
  - condition: template
    value_template: '{{ trigger.to_state.state == "on" }}'
    alias: Confirm Motion
  - alias: Make sure no sleeper is present
    condition: template
    value_template: '{{ area_id(trigger.entity_id) | lower not in states(''sensor.active_sleeper_rooms'')
      | string | lower }}'
  - alias: Make sure no unmuted TV is present
    condition: template
    value_template: '{{ area_id(trigger.entity_id) | lower not in state_attr(''sensor.active_chromecast_rooms'',
      ''unmuted_rooms'') | string | lower }}'
  - alias: Make sure no active microphone is present
    condition: template
    value_template: '{{ area_id(trigger.entity_id) | lower not in states(''sensor.active_microphones_rooms'')
      | string | lower }}'
  actions:
  - variables:
      playing_speakers: '{{ [area_id(trigger.entity_id)]   | map(''area_entities'')
        | sum(start=[]) |    select(''search'', ''speakers'') | select(''is_state'',''playing'')
        | unique | list }}

        '
      average_volume: '{{ states(''sensor.average_unmuted_speakers_volume'')}}

        '
  - metadata: {}
    data:
      is_volume_muted: false
    target:
      entity_id: '{{playing_speakers}}'
    alias: Unmute the speaker
    action: media_player.volume_mute
  - alias: Set Speaker volume to median volume  if the room is  empty for a long time
    if:
    - alias: Is it beene empty  over 1000 seconds?
      condition: template
      value_template: '{{ (now() - trigger.from_state.last_changed) > timedelta(seconds=1000)
        }}'
      enabled: true
    then:
    - metadata: {}
      data:
        volume_level: "{% if average_volume | float > \".35\" | float %}\n .35    \n{%
          elif average_volume | float < \".15\" | float %}\n .15\n{% else %} {{ average_volume
          }} {% endif%}\n"
      target:
        entity_id: '{{playing_speakers}}'
      alias: Set volume to the average of the house (maximum 35%)
      action: media_player.volume_set
  mode: parallel
  max: 10
- id: '1713723493265'
  alias: Start visuals on all inactive TVs
  description: ''
  trigger:
  - platform: state
    entity_id:
    - input_button.start_visuals
    to:
  condition: []
  action:
  - service: script.start_visual_playlist_on_plex
    metadata: {}
    data:
      requested_playlist: All Visuals
  mode: single
- id: '1713813890992'
  alias: Reload tablets 4 minutes after HA restarts
  description: ''
  trigger:
  - platform: numeric_state
    entity_id:
    - sensor.bootminutes
    below: 5
    above: 3
  condition: []
  action:
  - service: button.press
    metadata: {}
    data: {}
    target:
      entity_id:
      - button.samsung_galaxy_tab_e_8_0_load_start_url
      - button.hotbox_tablet_load_start_url
      - button.hallway_tablet_load_start_url
      - button.kitchen_tablet_load_start_url
      - button.livingroom_tablet_load_start_url
  mode: single
- id: '1713824382107'
  alias: Turn on lights automatically
  description: 'This one uses motion groups '
  triggers:
  - entity_id:
    - binary_sensor.group_office_motion_occupancy
    - binary_sensor.group_hallway_motion_occupancy
    - binary_sensor.group_kitchen_motion_occupancy
    - binary_sensor.group_hotbox_top_motion_occupancy
    - binary_sensor.group_livingroom_motion_occupancy
    - binary_sensor.group_hotbox_down_motion_occupancy
    - binary_sensor.group_patio_motion_occupancy
    - binary_sensor.group_closet_motion_occupancy
    - binary_sensor.group_server_motion_occupancy
    - binary_sensor.group_bathroom_motion_occupancy
    - binary_sensor.group_bedroom_motion_occupancy
    - binary_sensor.group_entrance_motion_occupancy
    - binary_sensor.group_workstation_motion_occupancy
    - binary_sensor.group_salon_motion_occupancy
    - binary_sensor.group_hotbox_motion_occupancy
    for:
      hours: 0
      minutes: 0
      seconds: 0
    trigger: state
  conditions:
  - condition: template
    value_template: '{{ area_id(trigger.entity_id) | replace(''_top'','''') | replace(''_down'','''')
      not in states(''sensor.active_sleeper_rooms'') | string  }}'
  actions:
  - variables:
      off_lights_in_room: "{% set ns = namespace(f = [] ) %} {% for i in ( [area_id(trigger.entity_id)]
        \ | map('area_entities') | sum(start=[]) | select('match', '^light.') | select('is_state','off')
        \ |  unique | list )  %} {% if i not in  label_entities(\"High Intensity Light\")
        | string %}\n  {% set ns.f = ns.f + [i] %}\n{% endif %} {% endfor %} {{ ns.f
        }}\n"
  - repeat:
      sequence:
      - metadata: {}
        data: {}
        target:
          entity_id: '{{off_lights_in_room[repeat.index - 1]    }}'
        action: light.turn_on
      for_each: '{{off_lights_in_room}}'
  mode: parallel
  max: 25
- id: '1713826329670'
  alias: Mute speakers when the room is empty
  description: 'This one uses motion groups '
  triggers:
  - entity_id:
    - binary_sensor.group_patio_motion_occupancy
    - binary_sensor.group_closet_motion_occupancy
    - binary_sensor.group_office_motion_occupancy
    - binary_sensor.group_server_motion_occupancy
    - binary_sensor.group_hallway_motion_occupancy
    - binary_sensor.group_kitchen_motion_occupancy
    - binary_sensor.group_bathroom_motion_occupancy
    - binary_sensor.group_entrance_motion_occupancy
    - binary_sensor.group_livingroom_motion_occupancy
    - binary_sensor.group_workstation_motion_occupancy
    - binary_sensor.group_salon_motion_occupancy
    - binary_sensor.group_hotbox_motion_occupancy
    for:
      hours: 0
      minutes: 5
      seconds: 0
    trigger: state
    to: 'off'
  conditions:
  - condition: state
    entity_id: input_boolean.following_music
    state: 'on'
  - condition: template
    value_template: '{{ states(''sensor.maxi_location_by_petro'') not in [area_id(trigger.entity_id)]
      | string  }}'
  actions:
  - variables:
      playing_speakers: '{{ [area_id(trigger.entity_id)]   | map(''area_entities'')
        | sum(start=[]) |    select(''search'', ''speakers'') | select(''is_state'',''playing'')
        | unique | list }}

        '
  - choose:
    - conditions:
      - condition: template
        value_template: '{{ trigger.to_state.state == "off" }}'
      sequence:
      - metadata: {}
        data:
          is_volume_muted: true
        target:
          entity_id: '{{playing_speakers}}

            '
        action: media_player.volume_mute
      alias: Motion is OFF
  mode: parallel
  max: 10
- id: '1714054125770'
  alias: Alert when dryer finishes!
  description: ''
  triggers:
  - entity_id:
    - binary_sensor.dryer_dry_completed
    from: 'off'
    to: 'on'
    trigger: state
  conditions:
  - condition: state
    entity_id: binary_sensor.maxi_sleeping
    state: 'off'
  - condition: state
    entity_id: binary_sensor.all_present_sleeping
    state: 'off'
  actions:
  - repeat:
      sequence:
      - action: script.non_important_broadcast_alert_in_the_house
        data:
          message: Dryer has finished
      - delay:
          hours: 0
          minutes: 30
          seconds: 0
          milliseconds: 0
      - condition: state
        entity_id: binary_sensor.group_kitchen_motion_occupancy
        state: 'off'
        for:
          hours: 0
          minutes: 29
          seconds: 0
      while:
      - condition: state
        entity_id: binary_sensor.group_kitchen_motion_occupancy
        state: 'off'
    enabled: true
  mode: restart
- id: '1714058481200'
  alias: Alert when Microwave finishes
  description: ''
  triggers:
  - entity_id:
    - sensor.power_switch_electric_consumption_w_4
    above: 100
    trigger: numeric_state
  conditions:
  - condition: state
    entity_id: binary_sensor.maxi_sleeping
    state: 'off'
  - condition: state
    entity_id: binary_sensor.all_present_sleeping
    state: 'off'
  - condition: state
    entity_id: input_boolean.cooking_mode
    state: 'off'
  actions:
  - wait_for_trigger:
    - entity_id:
      - sensor.power_switch_electric_consumption_w_4
      for:
        hours: 0
        minutes: 0
        seconds: 5
      below: 28
      trigger: numeric_state
    continue_on_timeout: false
    timeout:
      hours: 0
      minutes: 20
      seconds: 0
      milliseconds: 0
    enabled: true
  - repeat:
      sequence:
      - action: script.non_important_broadcast_alert_in_the_house
        data:
          message: Microwave finished
      - delay:
          hours: 0
          minutes: 4
          seconds: 0
          milliseconds: 0
      - condition: state
        entity_id: binary_sensor.group_kitchen_motion_occupancy
        for:
          hours: 0
          minutes: 3
          seconds: 0
        state: 'off'
      while:
      - condition: state
        entity_id: binary_sensor.group_kitchen_motion_occupancy
        state: 'off'
    enabled: true
  mode: restart
- id: '1714058675432'
  alias: Alert when Washer finishes
  description: ''
  triggers:
  - entity_id:
    - sensor.zooz_kitchen_washer_electric_consumption_a
    above: 1
    trigger: numeric_state
  conditions:
  - condition: state
    entity_id: binary_sensor.maxi_sleeping
    state: 'off'
  - condition: state
    entity_id: binary_sensor.all_present_sleeping
    state: 'off'
  actions:
  - wait_for_trigger:
    - entity_id:
      - sensor.zooz_kitchen_washer_electric_consumption_a
      for:
        hours: 0
        minutes: 10
        seconds: 0
      below: 1
      trigger: numeric_state
  - metadata: {}
    data:
      message: Washer finished
    action: script.non_important_broadcast_alert_in_the_house
  mode: single
- id: '1714077180427'
  alias: Change light to random colors on press
  description: ''
  triggers:
  - entity_id:
    - input_boolean.random_colors
    to: 'on'
    trigger: state
  - trigger: conversation
    command:
    - random colors lights
    - random color lights
    - random colored lights
  conditions: []
  actions:
  - action: script.changes_all_on
    metadata: {}
    data: {}
  mode: single
- id: '1714077215807'
  alias: Change light to random pastel colors on press
  description: 'This automation changes all lights that are turned on to random pastel
    colors

    Click it to trigger the effect'
  triggers:
  - entity_id:
    - input_boolean.random_pastel_colors
    to: 'on'
    trigger: state
  - trigger: conversation
    command:
    - pastel colors lights
    - pastel color lights
    - pastel colored lights
  conditions: []
  actions:
  - variables:
      lights: "{% set ns = namespace(lights=[]) %} {% set groups = integration_entities('group')
        | select('search', '^light.') | list %}     {% if groups %}\n    {% for group
        in groups %}\n        {% set individual_lights = state_attr(group, 'entity_id')
        %}\n        {% if individual_lights %}\n            {% for individual_light
        in individual_lights %}\n                {% if \"group\" not in individual_light
        and state_attr(individual_light, 'rgb_color') %}\n                    {% set
        ns.lights = ns.lights + [individual_light] %}\n                {% endif %}\n
        \           {% endfor %}\n        {% endif %}\n    {% endfor %}\n{% endif
        %}     {{ ns.lights }}\n"
  - repeat:
      sequence:
      - data:
          lights:
          - '{{lights[repeat.index - 1]}}'
          saturation: 60
        action: script.change_received_lights_to_random_colors
      for_each: '{{ lights }}'
  mode: single
- id: '1714150045572'
  alias: Mute chromecasts when they start visuals
  description: ''
  trigger:
  - platform: state
    entity_id:
    - media_player.universal_office_chromecast
    - media_player.universal_livingroom_chromecast
    - media_player.universal_hotbox_top_chromecast
    - media_player.universal_hotbox_down_chromecast
    - media_player.universal_patio_chromecast
    to: playing
  condition:
  - alias: Check if the chromecast already muted
    condition: template
    value_template: '{{trigger.to_state.attributes.is_volume_muted == false}}'
  - condition: template
    value_template: "                  {% set ns = namespace( cast_entity = trigger.entity_id,
      template_entity = \"\" ) %}\n                  {% set ns.final_entity = ns.cast_entity
      %}   {# Declare Variables#}                    \n                  {% for media_player
      in states.media_player %}                   \n                    {% if \"plex\"
      in media_player.entity_id and media_player.state != \"unavailable\" %}\n                      {%
      set entity = media_player.entity_id %}\n                      {% set media_title
      = state_attr( entity, 'media_title') %}\n                      {% set media_series_title
      = state_attr( entity, 'media_series_title') %}\n                      {% set
      media_series_episode = state_attr( entity, 'media_espisode') %}\n                      {%
      set media_series_season = state_attr( entity, 'media_season') %}                      \n
      \                       {% if state_attr( ns.final_entity, 'media_title') %}\n
      \                         {% if  state_attr( ns.cast_entity, 'media_title')
      in ( media_title | string )%}\n                          {% set ns.template_entity
      = entity %}\n                          {% endif %}                    \n                        {%
      elif state_attr( ns.final_entity, 'media_series_title') %}\n                          {%
      if  state_attr( ns.cast_entity, 'media_series_title') in ( media_series_title
      | string )%}\n                          {% set ns.template_entity = entity %}\n
      \                         {% endif %}\n                        {% endif %}                      \n
      \                   {% endif %}                         \n                  {%
      endfor %}                   \n                  {% if ns.template_entity ==
      \"\" %}\n                      {% set ns.template_entity = ns.cast_entity %}\n
      \                 {% endif %}\n                  {% if ns.template_entity !=
      ns.cast_entity %}                  \n                    {{ state_attr(ns.template_entity,
      'media_library_title') == 'Visuals'}}\n                  {% endif %} "
  action:
  - service: media_player.volume_mute
    metadata: {}
    data:
      is_volume_muted: true
    target:
      entity_id: '{{trigger.entity_id}}'
    alias: Mute the chromecast
  mode: restart
- id: '1714151063007'
  alias: Turn off speakers after 15 minutes of pause
  description: ''
  triggers:
  - entity_id:
    - media_player.universal_office_speakers
    - media_player.universal_hallway_speakers
    - media_player.universal_hotbox_top_speakers
    - media_player.universal_kitchen_speakers
    - media_player.universal_livingroom_speakers
    - media_player.universal_hotbox_down_speakers
    - media_player.universal_salon_speakers
    - media_player.universal_closet_speaker
    - media_player.universal_bedroom_speakers
    - media_player.universal_bathroom_speakers
    to: idle
    for:
      hours: 0
      minutes: 15
      seconds: 0
    trigger: state
  conditions: []
  actions:
  - metadata: {}
    data: {}
    target:
      entity_id: '{{ trigger.entity_id }}'
    action: media_player.turn_off
  mode: parallel
  max: 25
- id: '1714321256821'
  alias: Mute speakers in the room if maxi uses a microphone
  description: ''
  trigger:
  - platform: state
    entity_id:
    - binary_sensor.maxi_is_talking
    to: 'on'
  condition:
  - condition: state
    entity_id: input_boolean.following_music
    state: 'on'
  action:
  - variables:
      playing_speakers: '{{ [area_id(states(''sensor.maxi_location_by_petro''))]   |
        map(''area_entities'') | sum(start=[]) |    select(''search'', ''speakers'')
        | select(''is_state'',''playing'') | unique | list }}

        '
  - service: media_player.volume_mute
    metadata: {}
    data:
      is_volume_muted: true
    target:
      entity_id: '{{playing_speakers}}

        '
  - alias: Unmute speaker after the call is done
    wait_for_trigger:
    - platform: state
      entity_id:
      - binary_sensor.maxi_is_talking
      to: 'off'
      for:
        hours: 0
        minutes: 0
        seconds: 0
    continue_on_timeout: false
  - service: media_player.volume_mute
    metadata: {}
    data:
      is_volume_muted: false
    target:
      entity_id: '{{playing_speakers}}

        '
  mode: parallel
  max: 10
- id: '1714403972538'
  alias: Mute speakers when chromecast start playing in the same room
  description: ''
  triggers:
  - entity_id:
    - media_player.universal_livingroom_chromecast
    - media_player.universal_hotbox_top_chromecast
    - media_player.universal_hotbox_down_chromecast
    - media_player.universal_patio_chromecast
    - media_player.universal_salon_chromecast
    to: playing
    trigger: state
  conditions:
  - alias: Check that the chromecast is not muted
    condition: template
    value_template: '{{trigger.to_state.attributes.is_volume_muted == false}}'
  - condition: template
    value_template: "{% set ns = namespace( cast_entity = trigger.entity_id, template_entity
      = \"\" ) %}\n{% set ns.final_entity = ns.cast_entity %}   {# Declare Variables#}
      \                   \n{% for media_player in states.media_player %}                   \n
      \ {% if \"plex\" in media_player.entity_id and media_player.state != \"unavailable\"
      %}\n    {% set entity = media_player.entity_id %}\n    {% set media_title =
      state_attr( entity, 'media_title') %}\n    {% set media_series_title = state_attr(
      entity, 'media_series_title') %}\n    {% set media_series_episode = state_attr(
      entity, 'media_espisode') %}\n    {% set media_series_season = state_attr( entity,
      'media_season') %}                      \n      {% if state_attr( ns.final_entity,
      'media_title') %}\n        {% if  state_attr( ns.cast_entity, 'media_title')
      in ( media_title | string )%}\n        {% set ns.template_entity = entity %}\n
      \       {% endif %}                    \n      {% elif state_attr( ns.final_entity,
      'media_series_title') %}\n        {% if  state_attr( ns.cast_entity, 'media_series_title')
      in ( media_series_title | string )%}\n        {% set ns.template_entity = entity
      %}\n        {% endif %}\n      {% endif %}                      \n  {% endif
      %}                         \n{% endfor %}                   \n{% if ns.template_entity
      == \"\" %}\n    {% set ns.template_entity = ns.cast_entity %}\n{% endif %}\n{%
      if ns.template_entity != ns.cast_entity %}                  \n  {{ state_attr(ns.template_entity,
      'media_library_title') != 'Visuals'}}\n{% endif %} \n"
  actions:
  - variables:
      playing_speakers: '{{ [area_id(trigger.entity_id)]   | map(''area_entities'')
        | sum(start=[]) |    select(''search'', ''speakers'') | select(''is_state'',''playing'')
        | unique | list }}

        '
  - metadata: {}
    data:
      is_volume_muted: true
    target:
      entity_id: '{{ playing_speakers }}

        '
    action: media_player.volume_mute
  mode: restart
- id: '1714404201504'
  alias: Unmute speakers when TV stops
  description: ''
  triggers:
  - entity_id:
    - media_player.universal_salon_chromecast
    - media_player.universal_livingroom_chromecast
    - media_player.universal_hotbox_top_chromecast
    - media_player.universal_hotbox_down_chromecast
    - media_player.universal_patio_chromecast
    to: paused
    from: playing
    trigger: state
  - entity_id:
    - media_player.universal_salon_chromecast
    - media_player.universal_livingroom_chromecast
    - media_player.universal_hotbox_top_chromecast
    - media_player.universal_hotbox_down_chromecast
    - media_player.universal_patio_chromecast
    to: 'off'
    from: paused
    trigger: state
  - entity_id:
    - media_player.universal_salon_chromecast
    - media_player.universal_livingroom_chromecast
    - media_player.universal_hotbox_top_chromecast
    - media_player.universal_hotbox_down_chromecast
    - media_player.universal_patio_chromecast
    to: 'off'
    from: playing
    trigger: state
  conditions:
  - alias: Check that the chromecast is not muted
    condition: template
    value_template: '{{trigger.to_state.attributes.is_volume_muted == false}}'
  - condition: template
    value_template: "                  {% set ns = namespace( cast_entity = trigger.entity_id,
      template_entity = \"\" ) %}\n                  {% set ns.final_entity = ns.cast_entity
      %}   {# Declare Variables#}                    \n                  {% for media_player
      in states.media_player %}                   \n                    {% if \"plex\"
      in media_player.entity_id and media_player.state != \"unavailable\" %}\n                      {%
      set entity = media_player.entity_id %}\n                      {% set media_title
      = state_attr( entity, 'media_title') %}\n                      {% set media_series_title
      = state_attr( entity, 'media_series_title') %}\n                      {% set
      media_series_episode = state_attr( entity, 'media_espisode') %}\n                      {%
      set media_series_season = state_attr( entity, 'media_season') %}                      \n
      \                       {% if state_attr( ns.final_entity, 'media_title') %}\n
      \                         {% if  state_attr( ns.cast_entity, 'media_title')
      in ( media_title | string )%}\n                          {% set ns.template_entity
      = entity %}\n                          {% endif %}                    \n                        {%
      elif state_attr( ns.final_entity, 'media_series_title') %}\n                          {%
      if  state_attr( ns.cast_entity, 'media_series_title') in ( media_series_title
      | string )%}\n                          {% set ns.template_entity = entity %}\n
      \                         {% endif %}\n                        {% endif %}                      \n
      \                   {% endif %}                         \n                  {%
      endfor %}                   \n                  {% if ns.template_entity ==
      \"\" %}\n                      {% set ns.template_entity = ns.cast_entity %}\n
      \                 {% endif %}\n                  {% if ns.template_entity !=
      ns.cast_entity %}                  \n                    {{ state_attr(ns.template_entity,
      'media_library_title') != 'Visuals'}}\n                  {% endif %} "
  actions:
  - variables:
      playing_speakers: '{{ [area_id(trigger.entity_id)]   | map(''area_entities'')
        | sum(start=[]) |    select(''search'', ''speakers'') | select(''is_state'',''playing'')
        | unique | list }}

        '
  - metadata: {}
    data:
      is_volume_muted: false
    target:
      entity_id: '{{playing_speakers}}'
    alias: Unmute the speakers
    action: media_player.volume_mute
  mode: restart
- id: '1714404505080'
  alias: Close covers in the room when chromecasts start movie
  description: ''
  trigger:
  - platform: state
    entity_id:
    - media_player.universal_office_chromecast
    - media_player.universal_livingroom_chromecast
    - media_player.universal_hotbox_top_chromecast
    - media_player.universal_hotbox_down_chromecast
    - media_player.universal_patio_chromecast
    to: playing
  condition:
  - alias: Check that the chromecast is not muted
    condition: template
    value_template: '{{trigger.to_state.attributes.is_volume_muted == false}}'
  - condition: template
    value_template: "                  {% set ns = namespace( cast_entity = trigger.entity_id,
      template_entity = \"\" ) %}\n                  {% set ns.final_entity = ns.cast_entity
      %}   {# Declare Variables#}                    \n                  {% for media_player
      in states.media_player %}                   \n                    {% if \"plex\"
      in media_player.entity_id and media_player.state != \"unavailable\" %}\n                      {%
      set entity = media_player.entity_id %}\n                      {% set media_title
      = state_attr( entity, 'media_title') %}\n                      {% set media_series_title
      = state_attr( entity, 'media_series_title') %}\n                      {% set
      media_series_episode = state_attr( entity, 'media_espisode') %}\n                      {%
      set media_series_season = state_attr( entity, 'media_season') %}                      \n
      \                       {% if state_attr( ns.final_entity, 'media_title') %}\n
      \                         {% if  state_attr( ns.cast_entity, 'media_title')
      in ( media_title | string )%}\n                          {% set ns.template_entity
      = entity %}\n                          {% endif %}                    \n                        {%
      elif state_attr( ns.final_entity, 'media_series_title') %}\n                          {%
      if  state_attr( ns.cast_entity, 'media_series_title') in ( media_series_title
      | string )%}\n                          {% set ns.template_entity = entity %}\n
      \                         {% endif %}\n                        {% endif %}                      \n
      \                   {% endif %}                         \n                  {%
      endfor %}                   \n                  {% if ns.template_entity ==
      \"\" %}\n                      {% set ns.template_entity = ns.cast_entity %}\n
      \                 {% endif %}\n                  {% if ns.template_entity !=
      ns.cast_entity %}                  \n                    {{ state_attr(ns.template_entity,
      'media_library_title') == 'Movies'}}\n                  {% endif %} "
  action:
  - variables:
      covers: '{{ [area_id(trigger.entity_id)]    | map(''area_entities'') | sum(start=[])
        |    select(''search'', ''^cover\.'')  | unique | list }}

        '
  - service: cover.close_cover
    metadata: {}
    data: {}
    target:
      entity_id: '{{ covers }}

        '
  - wait_for_trigger:
    - platform: template
      value_template: '{{ states(trigger.entity_id) == "off" }}'
    timeout:
      hours: 4
      minutes: 0
      seconds: 0
      milliseconds: 0
    continue_on_timeout: false
  - if:
    - condition: state
      entity_id: input_boolean.kink_party
      state: 'off'
    then:
    - service: cover.open_cover
      metadata: {}
      data: {}
      target:
        entity_id: '{{ covers }}

          '
  mode: restart
- id: '1714405984049'
  alias: Reload tablets when frigate changes state
  description: ''
  trigger:
  - platform: state
    entity_id:
    - sensor.frigate_status
    from:
    to:
    for:
      hours: 0
      minutes: 3
      seconds: 0
  condition: []
  action:
  - service: button.press
    metadata: {}
    data: {}
    target:
      entity_id:
      - button.hotbox_tablet_load_start_url
      - button.hallway_tablet_load_start_url
  mode: single
- id: '1714497353040'
  alias: Turn off lights when the house is empty
  description: Turn off lights
  trigger:
  - platform: numeric_state
    entity_id:
    - zone.home
    for:
      hours: 0
      minutes: 5
      seconds: 0
    below: 0.9
  condition: []
  action:
  - service: light.turn_off
    metadata: {}
    data: {}
    target:
      entity_id: light.group_all_inside_lights
  mode: single
- id: '1714666640750'
  alias: Turn off lights when a room is empty
  description: 'This one uses motion groups '
  triggers:
  - entity_id:
    - binary_sensor.group_patio_motion_occupancy
    - binary_sensor.group_closet_motion_occupancy
    - binary_sensor.group_office_motion_occupancy
    - binary_sensor.group_server_motion_occupancy
    - binary_sensor.group_hallway_motion_occupancy
    - binary_sensor.group_kitchen_motion_occupancy
    - binary_sensor.group_bathroom_motion_occupancy
    - binary_sensor.group_entrance_motion_occupancy
    - binary_sensor.group_livingroom_motion_occupancy
    - binary_sensor.group_workstation_motion_occupancy
    - binary_sensor.group_salon_motion_occupancy
    - binary_sensor.group_hotbox_top_motion_occupancy
    - binary_sensor.group_hotbox_down_motion_occupancy
    - binary_sensor.group_hotbox_motion_occupancy
    for:
      hours: 0
      minutes: 6
      seconds: 0
    to: 'off'
    trigger: state
  conditions:
  - condition: template
    value_template: '{{ states(''sensor.maxi_location_by_petro'') | lower not in [area_id(trigger.entity_id)]
      | lower }}'
  - condition: state
    entity_id: input_boolean.kink_party
    state: 'off'
  - condition: state
    entity_id: input_boolean.party_mode
    state: 'off'
  - condition: state
    entity_id: input_boolean.acid_time
    state: 'off'
  actions:
  - variables:
      on_lights: '{{ [area_id(trigger.entity_id)]  | map(''area_entities'') | sum(start=[])
        | select(''match'', ''^light.'') | select(''is_state'',''on'') | unique |
        list }}

        '
  - metadata: {}
    data:
      transition: 60
    target:
      entity_id: '{{ on_lights }}

        '
    action: light.turn_off
  mode: parallel
  max: 10
- id: '1714668230697'
  alias: Turn off lights colors adaptation when an event is ongoing
  description: ''
  trigger:
  - platform: state
    entity_id:
    - input_boolean.kink_party
    - input_boolean.party_mode
    - input_boolean.acid_time
    to: 'on'
  condition: []
  action:
  - service: switch.turn_off
    metadata: {}
    data: {}
    target:
      entity_id: switch.adaptive_lighting_adapt_color_adaptive_lighting
  mode: single
- id: '1714668294513'
  alias: Turn on color adaptation when events end
  description: ''
  trigger:
  - platform: state
    entity_id:
    - input_boolean.kink_party
    - input_boolean.party_mode
    - input_boolean.acid_time
    to: 'off'
  condition:
  - condition: state
    state: 'off'
    entity_id: input_boolean.acid_time
  - condition: state
    state: 'off'
    entity_id: input_boolean.party_mode
  - condition: state
    state: 'off'
    entity_id: input_boolean.kink_party
  action:
  - service: switch.turn_on
    metadata: {}
    data: {}
    target:
      entity_id: switch.adaptive_lighting_adapt_color_adaptive_lighting
  mode: single
- id: '1714688757969'
  alias: Turn light on when someone is detected in the front
  description: ''
  triggers:
  - entity_id:
    - sensor.front_door_camera_person_count
    above: 0
    trigger: numeric_state
  conditions: []
  actions:
  - choose:
    - conditions:
      - condition: state
        entity_id: light.front_door_light
        state: 'on'
        alias: If Front door light is already on
      sequence:
      - variables:
          light_rgb_color: '{{ state_attr(''light.front_door_light'',''rgb_color'')}}

            '
          light_brightness: '{{ state_attr(''light.front_door_light'',''brightness'')}}

            '
      - alias: 'Set the front door light to bright white '
        metadata: {}
        data:
          transition: 2
          color_temp: 263
          brightness: 255
        target:
          entity_id: light.front_door_light
        action: light.turn_on
      - alias: Wait until entrance empty (20 minutes timeout)
        wait_for_trigger:
        - entity_id:
          - sensor.front_door_camera_person_count
          for:
            hours: 0
            minutes: 3
            seconds: 0
          below: 1
          trigger: numeric_state
        timeout:
          hours: 1
          minutes: 0
          seconds: 0
          milliseconds: 0
      - metadata: {}
        data:
          brightness: '{{ light_brightness }}

            '
          rgb_color: '{{ light_rgb_color }}

            '
        target:
          entity_id: light.front_door_light
        action: light.turn_on
    - conditions:
      - alias: If Front door light is off
        condition: state
        entity_id: light.front_door_light
        state: 'off'
      sequence:
      - metadata: {}
        data:
          transition: 0
          color_temp: 263
          brightness: 255
        target:
          entity_id: light.front_door_light
        alias: 'Set the front door light to bright white '
        action: light.turn_on
      - alias: Wait until entrance empty (20 minutes timeout)
        wait_for_trigger:
        - entity_id:
          - sensor.front_door_camera_person_count
          for:
            hours: 0
            minutes: 3
            seconds: 0
          below: 1
          trigger: numeric_state
        timeout:
          hours: 1
          minutes: 0
          seconds: 0
          milliseconds: 0
      - metadata: {}
        data: {}
        target:
          entity_id: light.front_door_light
        action: light.turn_off
      alias: If the front door light is off
  mode: restart
- id: '1715034222361'
  alias: Alert maxi that is phone is ringing
  description: This should act in the room he is if he is alone
  triggers:
  - entity_id:
    - sensor.phone_maxi_phone_state
    to: ringing
    trigger: state
  conditions: []
  actions:
  - variables:
      in_room_speakers: "{% if [area_id(states('sensor.maxi_location_by_petro'))]
        \  | map('area_entities') | sum(start=[]) |    select('search', 'speakers')
        | select('search','mass') | unique | list %} {{ [area_id(states('sensor.maxi_location_by_petro'))]
        \  | map('area_entities') | sum(start=[]) |    select('search', 'speakers')
        | select('search','mass') | unique | list }} {% else %} {{ [area_id(states('sensor.maxi_location_by_petro'))]
        \  | map('area_entities') | sum(start=[]) |  select('search', 'speaker')  |
        unique | list }} {% endif %} \n"
      attributes: '{{ trigger }}

        '
  - metadata: {}
    data:
      cache: false
      message: Maxi's phone is ringing
      media_player_entity_id: '{{in_room_speakers}}

        '
    target:
      entity_id: tts.piper
    enabled: true
    action: tts.speak
  mode: single
- id: '1715102391801'
  alias: Alert when there is noise on the terasse
  description: ''
  triggers:
  - entity_id:
    - binary_sensor.noise_ffmpeg_5
    to: 'on'
    for:
      hours: 0
      minutes: 0
      seconds: 0
    trigger: state
  conditions:
  - condition: state
    entity_id: input_boolean.party_mode
    state: 'on'
  - condition: state
    entity_id: binary_sensor.group_patio_motion_occupancy
    state: 'on'
  actions:
  - metadata: {}
    data:
      message: Loud noises on the terasse
    action: notify.mobile_app_phone_maxi
  mode: single
- id: '1715103309573'
  alias: Control LivingRoomTablet charging
  description: ''
  trigger:
  - platform: state
    entity_id:
    - sensor.livingroom_tablet_battery
  condition: []
  action:
  - choose:
    - conditions:
      - condition: numeric_state
        entity_id: sensor.livingroom_tablet_battery
        above: 90
      sequence:
      - service: switch.turn_off
        metadata: {}
        data: {}
        target:
          entity_id: switch.plug_livingroom_tablet
    - conditions:
      - condition: numeric_state
        entity_id: sensor.livingroom_tablet_battery
        below: 15
      sequence:
      - service: switch.turn_on
        metadata: {}
        data: {}
        target:
          entity_id: switch.plug_livingroom_tablet
  mode: single
- id: '1715664801848'
  alias: Auto close closet tablet screen when someone is sleeping
  description: ''
  trigger:
  - platform: state
    entity_id:
    - switch.samsung_galaxy_tab_e_8_0_screen
    to: 'on'
  condition:
  - condition: state
    entity_id: input_boolean.sleeper_in_closet
    state: 'on'
  action:
  - delay:
      hours: 0
      minutes: 0
      seconds: 20
      milliseconds: 0
  - service: switch.turn_off
    metadata: {}
    data: {}
    target:
      entity_id: switch.samsung_galaxy_tab_e_8_0_screen
  - service: switch.turn_off
    metadata: {}
    data: {}
    target:
      entity_id: switch.samsung_galaxy_tab_e_8_0_screen
  mode: single
- id: '1715696933725'
  alias: Tell maxi about the weather when he awakes
  description: ''
  trigger:
  - platform: state
    entity_id:
    - sensor.is_maxi_asleep
    from:
    to: awake
    for:
      hours: 0
      minutes: 5
      seconds: 0
  condition:
  - condition: state
    entity_id: person.maximiliano
    state: home
  action:
  - service: rest_command.local_ai_generate_image
    metadata: {}
    data:
      prompt: it is {{states('sensor.current_time')}}{% if states('sun.sun') =='below_horizon'
        %} at night{% else %} during the day{%endif%}, View of a residential street
        the Plateau Mont-Royal, {{ states('weather.purgatory') }} weather of {{ now().timestamp()
        | timestamp_custom('%B') }}, humidity   perception is {{ states('sensor.sensor_outside_temperature_humidity')
        }}, thermal perception is {{    states('sensor.sensor_outside_temperature_temperature')
        }},  Rennaissance painting
    response_variable: return
  - service: downloader.download_file
    metadata: {}
    data:
      overwrite: true
      filename: weather_image.jpg
      url: '{{return.content.data[0].url}}'
  - service: notify.mobile_app_phone_maxi
    metadata: {}
    data:
      title: Current Weather
      message: It is '{{ states('weather.purgatory') }}'
      data:
        image: /media/local/weather_image.jpg
  mode: single
- id: '1715717946486'
  alias: Doorbell Main automation
  description: Rings and alerts my phone
  triggers:
  - domain: mqtt
    device_id: efbe1670aafa845f79a0b84ddfdc4d6f
    type: action
    subtype: single
    trigger: device
  - domain: mqtt
    device_id: efbe1670aafa845f79a0b84ddfdc4d6f
    type: click
    subtype: single
    trigger: device
  - domain: mqtt
    device_id: efbe1670aafa845f79a0b84ddfdc4d6f
    type: click
    subtype: long
    trigger: device
  - domain: mqtt
    device_id: efbe1670aafa845f79a0b84ddfdc4d6f
    type: action
    subtype: hold
    trigger: device
  - domain: mqtt
    device_id: efbe1670aafa845f79a0b84ddfdc4d6f
    type: action
    subtype: double
    trigger: device
  - domain: mqtt
    device_id: efbe1670aafa845f79a0b84ddfdc4d6f
    type: click
    subtype: double
    trigger: device
  conditions:
  - condition: not
    conditions:
    - condition: state
      entity_id: binary_sensor.sensor_front_door_contact
      state: 'on'
  actions:
  - target:
      entity_id: input_boolean.door_rang
    data: {}
    action: input_boolean.turn_on
  - metadata: {}
    data: {}
    target:
      entity_id: sensor.latest_frigate_event_id
    action: homeassistant.update_entity
  - parallel:
    - metadata: {}
      data:
        color: Blue
        phone_data:
          message: Someone is at the door!
          data:
            channel: doorbell_notifications
            image: 'https://hass.purgatoire.ca/api/frigate/notifications/{{states("sensor.latest_frigate_event_id")}}/snapshot.jpg

              '
            actions:
            - action: URI
              title: Security Tab
              uri: /maxi-mobile/main-view#security_popup
            - action: REPLY
              title: Enter Text
            - action: URI
              title: Open Cameras
              uri: /maxi-mobile/main-view#cameras
      action: script.broadcast_alert_in_the_house
    - alias: Open camera view on maxi phone
      action: notify.mobile_app_phone_maxi
      metadata: {}
      data:
        message: command_webview
        data:
          command: /maxi-mobile/main-view#security_popup
          ttl: 0
          priority: high
      enabled: false
  mode: restart
- id: '1715719948033'
  alias: Reset doorbell stuff on unlock
  description: ''
  trigger:
  - platform: state
    entity_id:
    - lock.lock_front_door
    to: unlocked
  condition: []
  action:
  - service: input_boolean.turn_off
    metadata: {}
    data: {}
    target:
      entity_id:
      - input_boolean.door_rang
      - input_boolean.door_double_rang
      - input_boolean.waiting_someone
  - service: input_text.set_value
    metadata: {}
    data:
      value: Empty
    target:
      entity_id: input_text.front_door_phone_text
  mode: single
- id: '1715788063807'
  alias: Tell maxi when his watch is charged
  description: ''
  triggers:
  - entity_id:
    - sensor.galaxy_watch4_2n0f_battery_level
    to: '100'
    trigger: state
  conditions:
  - condition: state
    entity_id: sensor.galaxy_watch4_2n0f_battery_state
    state: charging
  actions:
  - metadata: {}
    data:
      title: Watch Alert
      message: Your watch is charged!
      data: {}
    action: notify.mobile_app_phone_maxi
  mode: single
- id: '1715791112355'
  alias: Doorbell Show received notification answer on phone
  description: ''
  trigger:
  - platform: event
    event_type: mobile_app_notification_action
    event_data:
      action: REPLY
      title: Doorbell Alert
  condition: []
  action:
  - service: input_text.set_value
    metadata: {}
    data:
      value: '{{trigger.event.data.reply_text}}'
    target:
      entity_id: input_text.front_door_phone_text
  mode: single
- id: '1716328766276'
  alias: Automatically turn off TVs
  description: After 20 minutes
  triggers:
  - entity_id:
    - binary_sensor.group_bedroom_motion_occupancy
    - binary_sensor.group_livingroom_motion_occupancy
    - binary_sensor.group_hotbox_top_motion_occupancy
    - binary_sensor.group_salon_motion_occupancy
    to: 'off'
    for:
      hours: 0
      minutes: 20
      seconds: 0
    trigger: state
  conditions: []
  actions:
  - metadata: {}
    data:
      command: 'Power off {{ [area_id(trigger.entity_id)]    | map(''area_entities'')
        | sum(start=[])  |    select(''search'', ''^media_player\.(?!.*?universal.*?).*chromecast'')
        |  map(''state_attr'', ''friendly_name'') | unique | list | first }}

        '
    action: google_assistant_sdk.send_text_command
  mode: parallel
  max: 7
- id: '1716329212232'
  alias: Notify on potential package
  description: ''
  triggers:
  - entity_id:
    - binary_sensor.front_door_camera_person_occupancy
    to: 'on'
    for:
      hours: 0
      minutes: 0
      seconds: 3
    trigger: state
  conditions:
  - condition: state
    entity_id: input_boolean.waiting_pakidge
    state: 'on'
  actions:
  - action: script.ptz_to_package
    metadata: {}
    data: {}
  - delay:
      hours: 0
      minutes: 0
      seconds: 3
      milliseconds: 0
  - action: llmvision.image_analyzer
    data:
      include_filename: false
      target_width: 1280
      max_tokens: 100
      temperature: 0.2
      expose_images: true
      provider: 01JDD7V3QXP1KN82V27H591YAX
      model: maxi_llama32-vision
      message: "  Answer with 'yes' or 'no', is there a package or a delivery man
        on this\n  picture? Do not use an other word than  'yes' or 'no'"
      image_entity:
      - camera.front_door_camera
      detail: low
    response_variable: answer
  - if:
    - condition: template
      value_template: '{{ "YES" in answer.response_text | upper }}'
    then:
    - metadata: {}
      data:
        data:
          image: /local/llmvision/front_door_camera.jpg
        message: Package is being delivered
        title: Package Detected
      action: notify.mobile_app_phone_maxi
  mode: single
- id: '1716329707766'
  alias: Start music on ACid mode on
  description: ''
  triggers:
  - entity_id:
    - input_boolean.acid_time
    to: 'on'
    trigger: state
  conditions:
  - condition: not
    conditions:
    - condition: state
      entity_id: media_player.universal_home_speakers
      state: playing
  actions:
  - action: media_player.play_media
    target:
      entity_id: media_player.group_mass_home_group_speakers
    data:
      media_content_id: Psychedelic Music
      media_content_type: playlist
  mode: single
- id: '1716329767682'
  alias: Close all blinds on acid mode
  description: ''
  trigger:
  - platform: state
    entity_id:
    - input_boolean.acid_time
    to: 'on'
  condition:
  - condition: state
    entity_id: sun.sun
    state: above_horizon
  action:
  - service: cover.close_cover
    metadata: {}
    data: {}
    target:
      entity_id: cover.group_all_blinds
  mode: single
- id: '1716329795738'
  alias: Close all blinds on kink party
  description: ''
  trigger:
  - platform: state
    entity_id:
    - input_boolean.kink_party
    to: 'on'
  condition: []
  action:
  - service: cover.close_cover
    metadata: {}
    data: {}
    target:
      entity_id: cover.group_all_blinds
  mode: single
- id: '1716330395041'
  alias: Change alll Lights to warm colors on Kink Party
  description: ''
  trigger:
  - platform: state
    entity_id:
    - input_boolean.kink_party
    to: 'on'
  condition: []
  action:
  - service: script.changes_all_on_lights_to_warm_colors
    metadata: {}
    data: {}
  mode: single
- id: '1716416273330'
  alias: Display room color  on TVs when mimiclights mode is triggered
  description: ''
  triggers:
  - trigger: state
    entity_id:
    - input_boolean.mimic_lights_on_screens
    from:
    to:
  conditions: []
  actions:
  - choose:
    - conditions:
      - condition: state
        entity_id: input_boolean.mimic_lights_on_screens
        state: 'on'
      sequence:
      - variables:
          off_chromecasts: '{{integration_entities(''cast'')  |  select(''search'',
            ''chromecast'') |

            select(''is_state'',''off'')| list}}

            '
      - repeat:
          sequence:
          - variables:
              room: '{{ repeat.item | replace("media_player.","") | replace("_chromecast","")
                }}

                '
          - action: cast.show_lovelace_view
            metadata: {}
            data:
              entity_id: '{{repeat.item}}'
              dashboard_path: color-hubs
              view_path: '{{room}}'
          for_each: '{{ off_chromecasts }}'
    - conditions:
      - condition: state
        entity_id: input_boolean.mimic_lights_on_screens
        state: 'off'
      sequence:
      - variables:
          off_chromecasts: '{{integration_entities(''cast'')  |  select(''search'',
            ''chromecast'') |

            select(''is_state'',''playing'')| list |  expand |  select(''search'',
            ''Color Hubs'')  | map(attribute=''entity_id'') |list }}

            '
      - repeat:
          sequence:
          - action: media_player.turn_off
            metadata: {}
            data: {}
            target:
              entity_id: '{{repeat.item}}'
          for_each: '{{ off_chromecasts }}'
  mode: single
- id: '1716559893302'
  alias: Set speakers volume on initial playback v2
  description: Control each home_group speaker  individually instead of a per room
    basis
  triggers:
  - entity_id:
    - media_player.universal_bedroom_speakers
    - media_player.universal_salon_speakers
    - media_player.universal_closet_speaker
    - media_player.universal_hallway_speakers
    - media_player.universal_kitchen_speakers
    - media_player.universal_office_speakers
    - media_player.universal_livingroom_speakers
    - media_player.universal_hotbox_speakers
    to: playing
    from: idle
    trigger: state
  conditions: []
  actions:
  - choose:
    - conditions:
      - alias: Is there no sleeper in the room?
        condition: template
        value_template: '{{ area_id(trigger.entity_id) | lower not in states(''sensor.active_sleeper_rooms'')
          | string | lower }}

          '
      sequence:
      - choose:
        - conditions:
          - condition: state
            entity_id: input_boolean.following_music
            state: 'off'
          sequence:
          - metadata: {}
            data:
              volume_level: 0.4
            target:
              entity_id: '{{trigger.entity_id}}'
            enabled: true
            action: media_player.volume_set
          alias: If following music is off
        - conditions:
          - condition: state
            entity_id: input_boolean.following_music
            state: 'on'
          sequence:
          - alias: Mute or unmute depending on occupancy
            choose:
            - conditions:
              - condition: template
                value_template: '{{ area_id(trigger.entity_id) | lower in states(''sensor.active_motion_rooms'')
                  | string | lower }}

                  '
                alias: Room occupied
              sequence:
              - metadata: {}
                data:
                  volume_level: "{% set current_hour = now().hour %}\n{% set volume
                    = 100 %}\n\n{% if current_hour > 22 %}\n    {% set volume = '.40'
                    %}\n{% elif current_hour >= 0 and current_hour <= 2 %}\n    {%
                    set volume = \".35\" %}\n{% elif current_hour > 2 and current_hour
                    < 7 %}\n    {% set volume = \".30\" %}\n{% else %}\n    {% set
                    volume = '.45' %}\n{% endif %}\n{{ volume }}\n"
                target:
                  entity_id: '{{trigger.entity_id}}'
                enabled: true
                action: media_player.volume_set
              - metadata: {}
                data:
                  is_volume_muted: false
                target:
                  entity_id: '{{trigger.entity_id}}'
                alias: Unmute speaker
                action: media_player.volume_mute
              alias: Set volume if the room is occupied
            - conditions:
              - alias: Is the speaker room occupied?
                condition: template
                value_template: '{{ area_id(trigger.entity_id) | lower not in states(''sensor.active_motion_rooms'')
                  | string | lower }}

                  '
              sequence:
              - data:
                  is_volume_muted: true
                target:
                  entity_id: '{{trigger.entity_id}}'
                action: media_player.volume_mute
              alias: Set mute if the room is unoccupied
          alias: If following music is on
      alias: No sleeper in the room
    - conditions:
      - condition: template
        value_template: '{{ area_id(trigger.entity_id) | lower in states(''sensor.active_sleeper_rooms'')
          | string | lower }}

          '
      sequence:
      - data:
          is_volume_muted: true
        target:
          entity_id: '{{trigger.entity_id}}'
        action: media_player.volume_mute
      alias: Sleeper present in the room
  trace:
    stored_traces: 30
  mode: parallel
  max: 25
- id: '1716566146304'
  alias: Assist play next song
  description: ''
  trigger:
  - platform: conversation
    command:
    - '[Play] [the] next song'
    - Skip [this/the] song
  condition: []
  action:
  - metadata: {}
    data: {}
    target:
      entity_id:
      - media_player.group_mass_home_group_speakers
    action: media_player.media_next_track
  mode: single
- id: '1716912930623'
  alias: Turn camera to doorway on doorbell action
  description: ''
  triggers:
  - domain: mqtt
    device_id: efbe1670aafa845f79a0b84ddfdc4d6f
    type: action
    subtype: single
    trigger: device
  - domain: mqtt
    device_id: efbe1670aafa845f79a0b84ddfdc4d6f
    type: click
    subtype: single
    trigger: device
  - domain: mqtt
    device_id: efbe1670aafa845f79a0b84ddfdc4d6f
    type: action
    subtype: hold
    trigger: device
  - domain: mqtt
    device_id: efbe1670aafa845f79a0b84ddfdc4d6f
    type: click
    subtype: long
    trigger: device
  - domain: mqtt
    device_id: efbe1670aafa845f79a0b84ddfdc4d6f
    type: action
    subtype: double
    trigger: device
  - domain: mqtt
    device_id: efbe1670aafa845f79a0b84ddfdc4d6f
    type: click
    subtype: double
    trigger: device
  conditions: []
  actions:
  - metadata: {}
    data: {}
    action: script.ptz_to_doorway
  mode: single
- id: '1716933958613'
  alias: Automatically turn off the front security horn after 2 minutes and ask if
    it should restart
  description: ''
  triggers:
  - entity_id:
    - switch.plug_front_door_horn
    to: 'on'
    for:
      hours: 0
      minutes: 2
      seconds: 0
    trigger: state
  conditions: []
  actions:
  - metadata: {}
    data: {}
    target:
      entity_id: switch.plug_front_door_horn
    action: switch.turn_off
  - metadata: {}
    data:
      filename: /media/horn_check.png
    target:
      entity_id: camera.front_door_camera
    action: camera.snapshot
  - metadata: {}
    data:
      message: Horn stopped
      data:
        image: /media/local/horn_check.png
        actions:
        - action: restart_horn
          title: Restart the horn?
        channel: security_alerts_notifications
      title: Security breach
    action: notify.mobile_app_phone_maxi
  - wait_for_trigger:
    - event_type: mobile_app_notification_action
      context: {}
      event_data:
        action: restart_horn
      trigger: event
    continue_on_timeout: false
    timeout:
      hours: 0
      minutes: 5
      seconds: 0
      milliseconds: 0
  - target:
      entity_id:
      - switch.plug_front_door_horn
    data: {}
    action: switch.turn_on
  mode: restart
- id: '1716934404427'
  alias: Alert when someone is in the front
  description: ''
  triggers:
  - entity_id:
    - sensor.front_door_camera_person_count
    above: 0
    trigger: numeric_state
  conditions:
  - condition: not
    conditions:
    - condition: state
      entity_id: alarm_control_panel.home_alarm
      state: disarmed
    enabled: false
  actions:
  - alias: Take snapshot for LocalAI
    metadata: {}
    data:
      filename: www/frontdoor_movement.png
    target:
      entity_id:
      - camera.front_door_camera
    enabled: true
    action: camera.snapshot
  - metadata: {}
    data:
      filename: /media/frontdoor_movement.png
    target:
      entity_id:
      - camera.front_door_camera
    action: camera.snapshot
  - metadata: {}
    data:
      message: Movement in the front!
      title: Someone is in the front!
      data:
        image: /media/local/frontdoor_movement.png
        actions:
        - action: blow_front_horn
          title: Blow the horn for 2 minutes?
        - action: REPLY
          title: Enter Text
        ttl: 0
        priority: high
        channel: security_alerts_notifications
    action: notify.mobile_app_phone_maxi
  - action: llmvision.image_analyzer
    data:
      provider: 01JDD7V3QXP1KN82V27H591YAX
      model: maxi_llama32-vision
      message: Describe this person only using adjectives, with no preamble, format
        it as bulletpoints, if there is no person say so
      max_tokens: 42
      temperature: 0.3
      include_filename: true
      image_entity:
      - camera.front_door_camera
      expose_images: true
    response_variable: return
    enabled: false
  - metadata: {}
    data:
      message: '{{return.response_text}}'
      title: This is who is in the front
    enabled: false
    action: notify.mobile_app_phone_maxi
  mode: restart
- id: '1716935540936'
  alias: Alert when the horn goes off and offer to turn it off
  description: ''
  triggers:
  - entity_id:
    - switch.plug_front_door_horn
    to: 'on'
    for:
      hours: 0
      minutes: 0
      seconds: 0
    trigger: state
  conditions: []
  actions:
  - metadata: {}
    data:
      filename: /media/horn_check.png
    target:
      entity_id: camera.front_door_camera
    action: camera.snapshot
  - metadata: {}
    data:
      message: Horn started
      data:
        image: /media/local/horn_check.png
        actions:
        - action: stop_horn
          title: Stop the horn?
        channel: security_alerts_notifications
      title: Security breach
    action: notify.mobile_app_phone_maxi
  - wait_for_trigger:
    - event_type: mobile_app_notification_action
      context: {}
      event_data:
        action: stop_horn
      trigger: event
    continue_on_timeout: false
    timeout:
      hours: 0
      minutes: 3
      seconds: 0
      milliseconds: 0
  - target:
      entity_id: switch.plug_front_door_horn
    data: {}
    action: switch.turn_off
  mode: restart
- id: '1717016815299'
  alias: Alert when someone is in the back
  description: ''
  triggers:
  - trigger: state
    entity_id:
    - binary_sensor.back_entrance_presence_person_occupancy
    - binary_sensor.hotbox_window_presence_person_occupancy
    - binary_sensor.back_door_loitering_all_occupancy
    from:
    to: 'on'
  conditions:
  - condition: not
    conditions:
    - condition: state
      entity_id: alarm_control_panel.home_alarm
      state: disarmed
    enabled: false
  actions:
  - metadata: {}
    data:
      filename: /media/backdoor_movement.png
    target:
      entity_id: camera.back_door_camera
    action: camera.snapshot
  - metadata: {}
    data:
      message: Someone is in the back!
      title: Someone is in the back!
      data:
        ttl: 0
        priority: high
        image: /media/local/backdoor_movement.png
        actions:
        - action: blow_horn_back
          title: Blow the horn for 2 minutes?
        channel: security_alerts_notifications
    action: notify.mobile_app_phone_maxi
  - if:
    - condition: state
      entity_id: person.maximiliano
      state: home
    then:
    - metadata: {}
      data:
        message: Someone is in the back!
        title: Someone is in the back!
        data:
          ttl: 0
          priority: high
          image: /media/local/backdoor_movement.png
          actions:
          - action: blow_horn_back
            title: Blow the horn for 2 minutes?
      action: notify.mobile_app_phone_maxi
  - wait_for_trigger:
    - event_type: mobile_app_notification_action
      context: {}
      event_data:
        action: blow_horn_back
      trigger: event
    continue_on_timeout: false
    timeout:
      hours: 0
      minutes: 5
      seconds: 0
      milliseconds: 0
  - metadata: {}
    data: {}
    target:
      entity_id: switch.plug_back_door_horn
    action: switch.turn_on
  mode: restart
- id: '1717016954049'
  alias: Automatically turn off the back security horn after 2 minutes and ask if
    it should restart
  description: ''
  triggers:
  - entity_id:
    - switch.plug_back_door_horn
    to: 'on'
    for:
      hours: 0
      minutes: 2
      seconds: 0
    trigger: state
  conditions: []
  actions:
  - metadata: {}
    data: {}
    target:
      entity_id:
      - switch.plug_back_door_horn
    action: switch.turn_off
  - metadata: {}
    data:
      filename: /media/back_horn_check.png
    target:
      entity_id:
      - camera.back_door_camera
    action: camera.snapshot
  - metadata: {}
    data:
      message: Horn stopped
      data:
        image: /media/local/back_horn_check.png
        actions:
        - action: restart_back_horn
          title: Restart the horn?
        channel: security_alerts_notifications
      title: Security breach
    action: notify.mobile_app_phone_maxi
  - wait_for_trigger:
    - event_type: mobile_app_notification_action
      context: {}
      event_data:
        action: restart_back_horn
      trigger: event
    continue_on_timeout: false
    timeout:
      hours: 0
      minutes: 5
      seconds: 0
      milliseconds: 0
  - data: {}
    target:
      entity_id: switch.plug_back_door_horn
    action: switch.turn_on
  mode: restart
- id: '1717038269264'
  alias: Alert maxi is someone comes in while he is sleeping
  description: ''
  triggers:
  - entity_id:
    - binary_sensor.sensor_patio_door_contact
    to: 'on'
    trigger: state
    enabled: true
  - entity_id:
    - binary_sensor.sensor_server_door_contact
    to: 'on'
    trigger: state
    enabled: true
  - entity_id:
    - binary_sensor.sensor_back_outside_door_contact
    to: 'on'
    trigger: state
  - entity_id:
    - binary_sensor.sensor_front_door_contact
    to: 'on'
    trigger: state
  - entity_id:
    - binary_sensor.sensor_front_outside_door_contact
    to: 'on'
    trigger: state
  conditions:
  - condition: state
    entity_id: alarm_control_panel.home_alarm
    state: armed_night
  - condition: state
    entity_id: person.maximiliano
    state: home
  actions:
  - metadata: {}
    data:
      stop_actions: true
    action: automation.turn_off
    target:
      entity_id: automation.mute_speakers_when_the_room_is_empty
  - metadata: {}
    data: {}
    target:
      entity_id: light.group_all_lights
    action: light.turn_off
  - metadata: {}
    data:
      message: Someone is inside!
      title: A door has been opened {{trigger.entity_id}}
      data:
        channel: security_alerts_notifications
        ttl: 0
        priority: high
        image: https://hass.purgatoire.ca/api/frigate/notifications/{{states("sensor.latest_frigate_event_id")}}/snapshot.jpg
        actions:
        - action: trigger_inside_alert
          title: Blare inside alert?
    action: notify.mobile_app_phone_maxi
  - metadata: {}
    data:
      rgb_color:
      - 255
      - 92
      - 179
      brightness_pct: 100
    target:
      entity_id: light.bedroom_chandelier_light
    action: light.turn_on
  - action: tts.speak
    data:
      media_player_entity_id: ' {{ [states(''sensor.where_is_maxi_sleeping'') | capitalize
        ]  | map(''area_entities'') | sum(start=[]) | select(''match'', ''^media_player.universal.*speaker[s]'')
        | unique | list }}'
      message: Someone has entered, a door has been opened
      cache: true
    target:
      entity_id: tts.piper
  - metadata: {}
    data:
      is_volume_muted: false
    target:
      entity_id: ' {{ [states(''sensor.where_is_maxi_sleeping'') | capitalize ]  |
        map(''area_entities'') | sum(start=[]) | select(''match'', ''^media_player.universal.*speaker[s]'')
        | unique | list }}'
    action: media_player.volume_mute
  - action: tts.speak
    data:
      media_player_entity_id: ' {{ [states(''sensor.where_is_maxi_sleeping'') | capitalize
        ]  | map(''area_entities'') | sum(start=[]) | select(''match'', ''^media_player.universal.*speaker[s]'')
        | unique | list }}'
      message: Someone has entered, a door has been opened
      cache: true
    target:
      entity_id: tts.piper
  - action: tts.speak
    data:
      media_player_entity_id: media_player.universal_bedroom_speakers
      message: Someone has entered, a door has been opened
      cache: true
    target:
      entity_id: tts.piper
  - metadata: {}
    data:
      is_volume_muted: false
    target:
      entity_id:
      - media_player.universal_bedroom_speakers
    action: media_player.volume_mute
  - action: tts.speak
    data:
      media_player_entity_id: media_player.universal_bedroom_speakers
      message: Someone has entered, a door has been opened
      cache: true
    target:
      entity_id: tts.piper
  mode: single
- id: '1717038729859'
  alias: Set front door screen text
  description: ''
  trigger:
  - platform: event
    event_type: mobile_app_notification_action
    event_data:
      action: REPLY
  condition: []
  action:
  - service: input_text.set_value
    metadata: {}
    data:
      value: '{{trigger.event.data.reply_text}}'
    target:
      entity_id: input_text.front_door_phone_text
  - delay:
      hours: 0
      minutes: 5
      seconds: 0
      milliseconds: 0
  - service: input_text.set_value
    metadata: {}
    data:
      value: Empty
    target:
      entity_id: input_text.front_door_phone_text
  mode: single
- id: '1717284487763'
  alias: Arm night alarm when everyone is sleeping
  description: ''
  trigger:
  - platform: state
    entity_id:
    - binary_sensor.all_present_sleeping
    to: 'on'
    for:
      hours: 0
      minutes: 5
      seconds: 0
  condition: []
  action:
  - service: alarm_control_panel.alarm_arm_night
    metadata: {}
    data: {}
    target:
      entity_id: alarm_control_panel.home_alarm
  mode: single
- id: '1717284510591'
  alias: Disarm alarm night when someone awakes
  description: ''
  triggers:
  - entity_id:
    - binary_sensor.all_present_sleeping
    to: 'off'
    for:
      hours: 0
      minutes: 0
      seconds: 0
    trigger: state
  conditions:
  - condition: state
    entity_id: alarm_control_panel.home_alarm
    state: armed_night
  actions:
  - target:
      entity_id: alarm_control_panel.home_alarm
    data: {}
    action: alarm_control_panel.alarm_disarm
  mode: single
- id: '1717284957489'
  alias: Turn on sleeper in bedroom boolean when sensor turns to on
  description: ''
  trigger:
  - platform: state
    entity_id:
    - binary_sensor.sleeper_in_bedroom
    to: 'on'
    from: 'off'
  condition: []
  action:
  - service: input_boolean.turn_on
    metadata: {}
    data: {}
    target:
      entity_id: input_boolean.sleeper_in_bedroom
  mode: single
- id: '1717285030468'
  alias: Turn off sleeper in bedroom when lights turns on
  description: ''
  trigger:
  - platform: state
    entity_id:
    - light.bedroom_chandelier_light
    to: 'on'
    for:
      hours: 0
      minutes: 0
      seconds: 0
  condition: []
  action:
  - service: input_boolean.turn_off
    metadata: {}
    data: {}
    target:
      entity_id: input_boolean.sleeper_in_bedroom
  mode: single
- id: '1717285150530'
  alias: Start rain sounds where maxi is sleeping
  description: ''
  triggers:
  - entity_id:
    - sensor.where_is_maxi_sleeping
    trigger: state
    from:
    to:
  conditions:
  - condition: state
    entity_id: person.maximiliano
    state: home
  actions:
  - variables:
      sleeper_speaker: '{{ [states(''sensor.where_is_maxi_sleeping'') ]  | map(''area_entities'')
        | sum(start=[]) | select(''match'', ''^media_player.universal.*speaker[s]?$'')  |
        unique | list | first}}

        '
    enabled: true
  - condition: template
    value_template: '{{ state_attr(sleeper_speaker,''media_title'') != ''thunderstorm''
      }} '
  - metadata: {}
    data:
      media_content_id: http://192.168.0.15:8123/local/thunderstorm.mp4
      media_content_type: music
    target:
      entity_id: '{{ sleeper_speaker }}'
    action: media_player.play_media
  - delay:
      hours: 0
      minutes: 0
      seconds: 1
  - metadata: {}
    data:
      is_volume_muted: false
    target:
      entity_id: '{{ sleeper_speaker }}'
    action: media_player.volume_mute
  - metadata: {}
    target:
      entity_id: '{{ sleeper_speaker }}'
    action: media_player.volume_up
  - delay:
      hours: 0
      minutes: 0
      seconds: 3
  - action: media_player.volume_set
    metadata: {}
    data:
      volume_level: 0.49
    target:
      entity_id: '{{ sleeper_speaker }}'
  mode: single
- id: '1717287475672'
  alias: Raise volume when the AC starts in a room
  description: ''
  triggers:
  - entity_id:
    - switch.zooz_livingroom_ac
    - switch.zooz_bedroom_plug
    to: 'on'
    from: 'off'
    trigger: state
  conditions: []
  actions:
  - metadata: {}
    data: {}
    target:
      entity_id: '{{ area_entities(area_id(trigger.entity_id))|select(''search'',
        ''media_player.universal'')|select(''is_state_attr'', ''is_volume_muted'',
        false)|select(''is_state'', ''playing'')| list }}'
    action: media_player.volume_up
  mode: single
- id: '1717290684944'
  alias: Turn down volume when AC goes off
  description: ''
  triggers:
  - entity_id:
    - switch.zooz_livingroom_ac
    - switch.zooz_bedroom_plug
    to: 'off'
    from: 'on'
    trigger: state
  - trigger: state
    entity_id:
    - climate.salon_ac
    attribute: hvac_action
    to: cooling
  conditions: []
  actions:
  - metadata: {}
    data: {}
    target:
      entity_id: '{{ area_entities(area_id(trigger.entity_id))|select(''search'',
        ''media_player.universal'')|select(''is_state_attr'', ''is_volume_muted'',
        false)|select(''is_state'', ''playing'')| list }}'
    action: media_player.volume_down
  mode: single
- id: '1717291435116'
  alias: Reload tablet page when motion is detected in the kitchen
  description: ''
  trigger:
  - platform: state
    entity_id:
    - binary_sensor.group_kitchen_motion_occupancy
    to: 'off'
  condition: []
  action:
  - service: button.press
    metadata: {}
    data: {}
    target:
      entity_id: button.kitchen_tablet_load_start_url
  mode: single
- id: '1717354512446'
  alias: Alert when there is motion inside during arm away
  description: ''
  triggers:
  - entity_id:
    - binary_sensor.group_office_motion_occupancy
    - binary_sensor.group_hallway_motion_occupancy
    - binary_sensor.group_kitchen_motion_occupancy
    - binary_sensor.group_livingroom_motion_occupancy
    - binary_sensor.group_salon_motion_occupancy
    - binary_sensor.group_server_motion_occupancy
    - binary_sensor.group_bathroom_motion_occupancy
    - binary_sensor.group_bedroom_motion_occupancy
    - binary_sensor.group_entrance_motion_occupancy
    for:
      hours: 0
      minutes: 0
      seconds: 0
    from: 'off'
    to: 'on'
    trigger: state
  conditions:
  - condition: or
    conditions:
    - condition: state
      entity_id: alarm_control_panel.home_alarm
      state: armed_away
    - condition: state
      entity_id: alarm_control_panel.home_alarm
      state: triggered
  actions:
  - metadata: {}
    data:
      stop_actions: true
    action: automation.turn_off
    target:
      entity_id: automation.mute_speakers_when_the_room_is_empty
  - metadata: {}
    data: {}
    target:
      entity_id:
      - light.group_all_lights
      - light.group_all_inside_lights
      - light.group_patio_lights
      - light.front_door_light
      - light.back_door_light
    action: light.turn_off
  - metadata: {}
    data:
      title: Intruder Alert
      message: motion detected in the '{{ area_id(trigger.entity_id) }}'
      data:
        ttl: 0
        priority: high
        image: https://hass.purgatoire.ca/api/frigate/notifications/{{states("sensor.latest_frigate_event_id")}}/snapshot.jpg
        actions:
        - action: trigger_inside_alert
          title: Blare inside alert?
    action: notify.mobile_app_phone_maxi
  - if:
    - condition: not
      conditions:
      - condition: state
        entity_id: alarm_control_panel.home_alarm
        state: triggered
    then:
    - metadata: {}
      data: {}
      target:
        entity_id: alarm_control_panel.home_alarm
      action: alarm_control_panel.alarm_trigger
  mode: single
- id: '1717355119853'
  alias: Turn on light automation once alarm is disarmed
  description: ''
  triggers:
  - entity_id:
    - alarm_control_panel.home_alarm
    from: triggered
    to: disarmed
    trigger: state
  conditions: []
  actions:
  - metadata: {}
    data: {}
    action: automation.turn_on
    target:
      entity_id: automation.turn_on_lighs_automatically
  mode: single
- id: '1717355583664'
  alias: Trigger front horn through phone notification
  description: ''
  trigger:
  - platform: event
    event_type: mobile_app_notification_action
    context: {}
    event_data:
      action: blow_front_horn
  condition: []
  action:
  - service: switch.turn_on
    metadata: {}
    data: {}
    target:
      entity_id: switch.plug_front_door_horn
  mode: single
- id: '1717356233481'
  alias: Stop speakers on disarm
  description: ''
  triggers:
  - entity_id:
    - alarm_control_panel.home_alarm
    from: triggered
    to: disarmed
    trigger: state
  conditions: []
  actions:
  - metadata: {}
    data: {}
    action: media_player.media_stop
    target:
      entity_id: media_player.universal_home_speakers
  mode: single
- id: '1717358289455'
  alias: Trigger in-home defense script after the alarm is triggered for 6 continious
    minutes
  description: ''
  triggers:
  - entity_id:
    - alarm_control_panel.home_alarm
    to: triggered
    for:
      hours: 0
      minutes: 3
      seconds: 0
    trigger: state
  conditions: []
  actions:
  - metadata: {}
    data: {}
    action: script.in_home_defense_script
  mode: single
- id: '1717358415139'
  alias: Trigger police announcement on triggered alarm
  description: ''
  triggers:
  - entity_id:
    - alarm_control_panel.home_alarm
    to: triggered
    for:
      hours: 0
      minutes: 0
      seconds: 0
    trigger: state
  conditions: []
  actions:
  - metadata: {}
    data:
      title: Intruder Alert
      message: The alarm has been triggered, engaging de-escalation
      data:
        image: https://hass.purgatoire.ca/api/frigate/notifications/{{states("sensor.latest_frigate_event_id")}}/snapshot.jpg
        actions:
        - action: trigger_inside_alert
          title: Blare inside alert?
    action: notify.mobile_app_phone_maxi
  - data:
      stop_actions: true
    action: automation.turn_off
    target:
      entity_id:
      - automation.mute_speakers_when_the_room_is_empty
      - automation.turn_on_lighs_automatically
      - automation.speaker_automatic_volume_v4
  - metadata: {}
    data: {}
    target:
      entity_id:
      - light.group_all_inside_lights
      - light.group_all_lights
      - light.group_patio_lights
    action: light.turn_off
  - parallel:
    - metadata: {}
      data: {}
      action: media_player.turn_on
      target:
        entity_id: media_player.universal_bathroom_speakers
    - metadata: {}
      data: {}
      action: media_player.turn_on
      target:
        entity_id: media_player.universal_bedroom_speakers
    - metadata: {}
      data: {}
      action: media_player.turn_on
      target:
        entity_id: media_player.universal_hallway_speakers
    - metadata: {}
      data: {}
      action: media_player.turn_on
      target:
        entity_id: media_player.universal_hotbox_speakers
    - metadata: {}
      data: {}
      action: media_player.turn_on
      target:
        entity_id: media_player.universal_kitchen_speakers
    - metadata: {}
      data: {}
      action: media_player.turn_on
      target:
        entity_id: media_player.universal_salon_speakers
    - metadata: {}
      data: {}
      action: media_player.turn_on
      target:
        entity_id: media_player.universal_office_speakers
    - metadata: {}
      data: {}
      action: media_player.turn_on
      target:
        entity_id: media_player.universal_livingroom_speakers
    enabled: true
  - parallel:
    - metadata: {}
      data:
        is_volume_muted: false
      action: media_player.volume_mute
      target:
        entity_id: media_player.universal_bathroom_speakers
    - metadata: {}
      data:
        is_volume_muted: false
      action: media_player.volume_mute
      target:
        entity_id: media_player.universal_bedroom_speakers
    - metadata: {}
      data:
        is_volume_muted: false
      action: media_player.volume_mute
      target:
        entity_id: media_player.universal_hallway_speakers
    - metadata: {}
      data:
        is_volume_muted: false
      action: media_player.volume_mute
      target:
        entity_id: media_player.universal_hotbox_speakers
    - metadata: {}
      data:
        is_volume_muted: false
      action: media_player.volume_mute
      target:
        entity_id: media_player.universal_kitchen_speakers
    - metadata: {}
      data:
        is_volume_muted: false
      action: media_player.volume_mute
      target:
        entity_id: media_player.universal_salon_speakers
    - metadata: {}
      data:
        is_volume_muted: false
      action: media_player.volume_mute
      target:
        entity_id: media_player.universal_office_speakers
    - metadata: {}
      data:
        is_volume_muted: false
      action: media_player.volume_mute
      target:
        entity_id: media_player.universal_livingroom_speakers
    enabled: true
  - parallel:
    - metadata: {}
      data:
        volume_level: 1
      action: media_player.volume_set
      target:
        entity_id: media_player.universal_bathroom_speakers
    - metadata: {}
      data:
        volume_level: 1
      action: media_player.volume_set
      target:
        entity_id: media_player.universal_bedroom_speakers
    - metadata: {}
      data:
        volume_level: 1
      action: media_player.volume_set
      target:
        entity_id: media_player.universal_hallway_speakers
    - metadata: {}
      data:
        volume_level: 1
      action: media_player.volume_set
      target:
        entity_id: media_player.universal_hotbox_speakers
    - metadata: {}
      data:
        volume_level: 1
      action: media_player.volume_set
      target:
        entity_id: media_player.universal_kitchen_speakers
    - metadata: {}
      data:
        volume_level: 1
      action: media_player.volume_set
      target:
        entity_id: media_player.universal_salon_speakers
    - metadata: {}
      data:
        volume_level: 1
      action: media_player.volume_set
      target:
        entity_id: media_player.universal_office_speakers
    - metadata: {}
      data:
        volume_level: 1
      action: media_player.volume_set
      target:
        entity_id: media_player.universal_livingroom_speakers
    enabled: true
  - metadata: {}
    data:
      announce_volume: 100
      url: https://hass.purgatoire.ca/local/deescalation.mp3
      use_pre_announce: true
    action: music_assistant.play_announcement
    target:
      entity_id: media_player.group_mass_home_group_speakers
  mode: single
- id: '1717359724027'
  alias: Trigger all home defense script through notification
  description: ''
  trigger:
  - platform: event
    event_type: mobile_app_notification_action
    context: {}
    event_data:
      action: trigger_all_alerts
  condition: []
  action:
  - service: script.in_home_defense_script
    data: {}
  mode: single
- id: '1717360188815'
  alias: Lock tablets on triggered alarm
  description: ''
  trigger:
  - platform: state
    entity_id:
    - alarm_control_panel.home_alarm
    to: triggered
  condition: []
  action:
  - service: switch.turn_on
    metadata: {}
    data: {}
    target:
      entity_id:
      - switch.hotbox_tablet_maintenance_mode
      - switch.samsung_galaxy_tab_e_8_0_maintenance_mode
      - switch.hallway_tablet_maintenance_mode
      - switch.kitchen_tablet_maintenance_mode
      - switch.livingroom_tablet_maintenance_mode
  mode: single
- id: '1717360231281'
  alias: Unlock tablets on disarmed alarm
  description: ''
  trigger:
  - platform: state
    entity_id:
    - alarm_control_panel.home_alarm
    to: disarmed
    for:
      hours: 0
      minutes: 0
      seconds: 0
  condition: []
  action:
  - service: switch.turn_off
    target:
      entity_id:
      - switch.hotbox_tablet_maintenance_mode
      - switch.samsung_galaxy_tab_e_8_0_maintenance_mode
      - switch.hallway_tablet_maintenance_mode
      - switch.kitchen_tablet_maintenance_mode
      - switch.livingroom_tablet_maintenance_mode
    data: {}
  mode: single
- id: '1717797397935'
  alias: Trigger In home defense script through phone notification
  description: ''
  triggers:
  - event_type: mobile_app_notification_action
    context:
      user_id:
      - 7f1de31122574f6fa2215e519d6083ea
    event_data:
      action: trigger_inside_alert
    trigger: event
  conditions: []
  actions:
  - action: script.inside_only_home_defense_script
    metadata: {}
    data: {}
  mode: single
- id: '1719366131642'
  alias: Open bedroom covers when the person awakes
  description: ''
  trigger:
  - platform: state
    entity_id:
    - input_boolean.sleeper_in_bedroom
    from: 'on'
    to: 'off'
    for:
      hours: 0
      minutes: 10
      seconds: 0
  condition:
  - condition: state
    entity_id: binary_sensor.sensor_bedroom_door_contact
    state: 'on'
    for:
      hours: 0
      minutes: 5
      seconds: 0
  action:
  - metadata: {}
    data: {}
    target:
      entity_id: cover.cover_bedroom_blinds
    action: cover.open_cover
  mode: single
- id: '1719366196396'
  alias: Close bedroom cover when sleeper turns on
  description: ''
  trigger:
  - platform: state
    entity_id:
    - input_boolean.sleeper_in_bedroom
    from:
    to: 'on'
    for:
      hours: 0
      minutes: 1
      seconds: 0
  condition: []
  action:
  - service: cover.close_cover
    target:
      entity_id:
      - cover.cover_bedroom_blinds
    data: {}
  mode: single
- id: '1719617622275'
  alias: Display Salon Display interface
  description: ''
  triggers:
  - trigger: time_pattern
    hours: /1
  conditions: []
  actions:
  - metadata: {}
    data: {}
    action: media_player.turn_off
    target:
      entity_id: media_player.salon_hub
  - metadata: {}
    data:
      dashboard_path: lovelace-hub
      view_path: salon-hub
      entity_id: media_player.salon_hub
    action: cast.show_lovelace_view
    enabled: false
  - action: dash_cast.load_url
    data:
      entity_id: media_player.salon_hub
      url: http://192.168.0.15:8123/lovelace-hub/salon-hub?kiosk=1
      force: true
  mode: single
- id: '1720489259503'
  alias: Assist Start Media on TV
  description: ''
  triggers:
  - command:
    - '[let''s] watch {query} [on the] [in the] {room} [TV]'
    - '[let''s] play {query} [on the] [in the] {room} TV'
    - '[let''s] watch {query}'
    trigger: conversation
  conditions: []
  actions:
  - metadata: {}
    action: conversation.process
    data:
      text: Is "{{trigger.slots.query}}" a movie or a tv show? Just answer with one
        or two words
      agent_id: conversation.maxi_mistral
    response_variable: return
  - variables:
      room: '{% if trigger.slots.room %} {{trigger.slots.room}} {% else %} {{ area_name(trigger.device_id)}}
        {% endif %}

        '
      media_type: "{% if \"show\" in  return.response.speech.plain.speech or \"Show\"
        in\n return.response.speech.plain.speech or \"serie\" in\n return.response.speech.plain.speech
        or \"Serie\" in\n return.response.speech.plain.speech %}\n tvshow\n{% else
        %}\n  movie\n{% endif %}\n"
      library_name: "{% if \"show\" in  return.response.speech.plain.speech or \"Show\"
        in\n return.response.speech.plain.speech or \"serie\" in\n return.response.speech.plain.speech
        or \"Serie\" in\n return.response.speech.plain.speech %}\n TV Shows\n{% else
        %}\n  Movies\n{% endif %}\n"
      media_content: '{{trigger.slots.query}}'
      target: '{{ [area_id(room)]    | map(''area_entities'')  | sum(start=[]) | select(''search'',
        (''media_player.universal.*chromecast'')) | unique  | list }}

        '
  - data:
      media_content_type: '{{media_type}}

        '
      media_content_id: 'plex://{ "library_name": "{{library_name}}", "title": "{{media_content}}","shuffle":
        1 }

        '
    target:
      entity_id: '{{target}}

        '
    action: media_player.play_media
  mode: parallel
  max: 10
- id: '1721278758149'
  alias: 'Bedroom hue tap remote automation '
  description: ''
  triggers:
  - domain: mqtt
    device_id: 401156183b8cc392cc4838000cc56c3c
    type: action
    subtype: press_1
    trigger: device
    id: press_1
  - domain: mqtt
    device_id: 401156183b8cc392cc4838000cc56c3c
    type: action
    subtype: press_4
    trigger: device
    id: press_4
  - domain: mqtt
    device_id: 401156183b8cc392cc4838000cc56c3c
    type: action
    subtype: press_3
    trigger: device
    id: press_3
  - domain: mqtt
    device_id: 401156183b8cc392cc4838000cc56c3c
    type: action
    subtype: press_2
    trigger: device
    id: press_2
  conditions: []
  actions:
  - choose:
    - conditions:
      - condition: trigger
        id: ''
      sequence:
      - action: light.toggle
        metadata: {}
        data: {}
        target:
          entity_id: light.group_bedroom_lights
    - conditions:
      - condition: trigger
        id:
        - press_4
      sequence:
      - action: light.turn_on
        metadata: {}
        data:
          brightness_step_pct: 10
        target:
          entity_id: light.group_bedroom_lights
    - conditions:
      - condition: trigger
        id:
        - press_3
        - press_1
      sequence:
      - choose:
        - conditions:
          - condition: state
            entity_id: input_boolean.sleeper_in_bedroom
            state: 'on'
          - condition: state
            entity_id: light.group_bedroom_lights
            state: 'off'
          sequence:
          - action: light.turn_on
            metadata: {}
            data:
              kelvin: 3167
              brightness_pct: 15
            target:
              entity_id: light.group_bedroom_lights
        - conditions:
          - condition: state
            entity_id: binary_sensor.sleeper_in_bedroom
            state: 'off'
          - condition: state
            entity_id: light.group_bedroom_lights
            state: 'off'
          sequence:
          - action: light.turn_on
            metadata: {}
            data:
              kelvin: 5300
              brightness_pct: 100
              transition: 3
            target:
              entity_id: light.group_bedroom_lights
        default:
        - action: light.toggle
          metadata: {}
          data: {}
          target:
            entity_id: light.group_bedroom_lights
    - conditions:
      - condition: trigger
        id:
        - press_2
      sequence:
      - action: light.turn_on
        metadata: {}
        data:
          brightness_step_pct: -10
        target:
          entity_id: light.group_bedroom_lights
  mode: single
- id: '1722263369374'
  alias: assist Stop home group music
  description: ''
  trigger:
  - platform: conversation
    command:
    - stop [the] music
  condition: []
  action:
  - service: media_player.media_stop
    metadata: {}
    data: {}
    target:
      entity_id: media_player.group_mass_home_group_speakers
  mode: single
- id: '1722712931229'
  alias: Alert maxi when a work timer ends
  description: ''
  trigger:
  - platform: state
    entity_id:
    - timer.work_break
    from: active
    to: idle
    for:
      hours: 0
      minutes: 0
      seconds: 2
  condition: []
  action: []
  mode: single
- id: '1722878184182'
  alias: Assist Control covers
  description: Open or close covers
  trigger:
  - platform: conversation
    command:
    - (close|open) [the] {room} (cover|window|blind|covers|blinds|windows)
  condition: []
  action:
  - variables:
      covers: "{{ [area_id(trigger.slots.room | lower)]  | map('area_entities') |
        sum(start=[]) |\n  select('match', '^cover.') | unique | list }}\n"
  - choose:
    - conditions:
      - condition: template
        value_template: '{{ ''close'' in trigger.sentence | lower }}'
      sequence:
      - service: cover.close_cover
        data: {}
        target:
          entity_id: '{{covers}}'
    - conditions:
      - condition: template
        value_template: '{{ ''open'' in trigger.sentence | lower }}'
      sequence:
      - service: cover.open_cover
        data: {}
        target:
          entity_id: '{{covers}}'
  mode: single
- id: '1722909291790'
  alias: Dial livingroom library control
  description: ''
  use_blueprint:
    path: EPMatt/ikea_e1744.yaml
    input:
      integration: Zigbee2MQTT
      controller_entity: sensor.remote_livingroom_library_dial_action
      action_rotate_left:
      - variables:
          speaker: '{{ [area_id(trigger.event.data.entity_id)]     | map(''area_entities'')   |
            sum(start=[]) |    select(''search'', ''airplay'') |  expand   | selectattr(''attributes.is_volume_muted'',
            ''false'') |map(attribute=''entity_id'') | list}}

            '
          chromecast: '{{ [area_id(trigger.event.data.entity_id)]     | map(''area_entities'')   |
            sum(start=[]) |    select(''search'', ''chromecast'') |  expand   | selectattr(''attributes.is_volume_muted'',
            ''false'') |map(attribute=''entity_id'') | list}}

            '
          media_players: '{{ speaker + chromecast }}

            '
        alias: Find unmuted media players
      - choose:
        - conditions:
          - alias: Test if chromecast or speaker present
            condition: template
            value_template: '{{ ''speaker'' in media_players | string | lower  or
              ''chromecast'' in media_players |          string | lower }}'
          sequence:
          - target:
              entity_id: '{{media_players}}'
            data_template:
              volume_level: '{{ state_attr((media_players | first),''volume_level'')
                - 0.03}}'
            action: media_player.volume_set
          alias: Speaker playing and unmuted
      helper_last_controller_event: input_text.dial_livingroom_library_helper
      rotate_left_loop: true
      rotate_right_loop: true
      action_rotate_right:
      - variables:
          speaker: '{{ [area_id(trigger.event.data.entity_id)]     | map(''area_entities'')   |
            sum(start=[]) |    select(''search'', ''airplay'') |  expand   | selectattr(''attributes.is_volume_muted'',
            ''false'') |map(attribute=''entity_id'') | list}}

            '
          chromecast: '{{ [area_id(trigger.event.data.entity_id)]     | map(''area_entities'')   |
            sum(start=[]) |    select(''search'', ''chromecast'') |  expand   | selectattr(''attributes.is_volume_muted'',
            ''false'') |map(attribute=''entity_id'') | list}}

            '
          media_players: '{{ speaker + chromecast }}

            '
        alias: Find unmuted media players
      - choose:
        - conditions:
          - alias: Test if chromecast or speaker present
            condition: template
            value_template: '{{ ''speaker'' in media_players | string | lower  or
              ''chromecast'' in media_players |          string | lower }}'
          sequence:
          - target:
              entity_id: '{{media_players}}'
            data_template:
              volume_level: '{{ state_attr((media_players | first),''volume_level'')
                + 0.02}}'
            action: media_player.volume_set
          alias: Speaker playing and unmuted
      action_click_short:
      - variables:
          speaker: '{{ [area_id(trigger.event.data.entity_id)]     | map(''area_entities'')   |
            sum(start=[]) |    select(''search'', ''airplay'') |  expand   | selectattr(''attributes.is_volume_muted'',
            ''false'') |map(attribute=''entity_id'') | list}}

            '
          chromecast: '{{ [area_id(trigger.event.data.entity_id)]     | map(''area_entities'')   |
            sum(start=[]) |    select(''search'', ''chromecast'') |  expand   | selectattr(''attributes.is_volume_muted'',
            ''false'') |map(attribute=''entity_id'') | list}}

            '
          media_players: '{{ speaker + chromecast }}

            '
        alias: Find unmuted media players
      - metadata: {}
        data: {}
        target:
          entity_id: '{{media_players}}'
        action: media_player.media_play_pause
      action_click_triple:
      - variables:
          speaker: '{{ [area_id(trigger.event.data.entity_id)]     | map(''area_entities'')   |
            sum(start=[]) |    select(''search'', ''airplay'') |  expand   | selectattr(''attributes.is_volume_muted'',
            ''false'') |map(attribute=''entity_id'') | list}}

            '
          chromecast: '{{ [area_id(trigger.event.data.entity_id)]     | map(''area_entities'')   |
            sum(start=[]) |    select(''search'', ''chromecast'') |  expand   | selectattr(''attributes.is_volume_muted'',
            ''false'') |map(attribute=''entity_id'') | list}}

            '
          media_players: '{{ speaker + chromecast }}

            '
        alias: Find unmuted media players
      - metadata: {}
        data: {}
        target:
          entity_id: '{{media_players}}'
        action: media_player.turn_off
      rotate_left_max_loop_repeats: 10
      rotate_right_max_loop_repeats: 10
      helper_debounce_delay: 0
      action_click_double:
      - variables:
          speaker: '{{ [area_id(trigger.event.data.entity_id)]     | map(''area_entities'')   |
            sum(start=[]) |    select(''search'', ''airplay'') |  expand   | selectattr(''attributes.is_volume_muted'',
            ''false'') |map(attribute=''entity_id'') | list}}

            '
          chromecast: '{{ [area_id(trigger.event.data.entity_id)]     | map(''area_entities'')   |
            sum(start=[]) |    select(''search'', ''chromecast'') |  expand   | selectattr(''attributes.is_volume_muted'',
            ''false'') |map(attribute=''entity_id'') | list}}

            '
          media_players: '{{ speaker + chromecast }}

            '
        alias: Find unmuted media players
      - metadata: {}
        data: {}
        target:
          entity_id: '{{media_players}}'
        action: media_player.media_next_track
- id: '1722919148822'
  alias: Dial salon automation
  description: ''
  use_blueprint:
    path: EPMatt/ikea_e1744.yaml
    input:
      integration: Zigbee2MQTT
      controller_entity: sensor.remote_salon_dial_action
      action_rotate_left:
      - variables:
          speaker: '{{ [area_id(trigger.event.data.entity_id)]     | map(''area_entities'')   |
            sum(start=[]) |    select(''search'', ''airplay'') |  expand   | selectattr(''attributes.is_volume_muted'',
            ''false'') |map(attribute=''entity_id'') | list}}

            '
          chromecast: '{{ [area_id(trigger.event.data.entity_id)]     | map(''area_entities'')   |
            sum(start=[]) |    select(''search'', ''chromecast'') |  expand   | selectattr(''attributes.is_volume_muted'',
            ''false'') |map(attribute=''entity_id'') | list}}

            '
          media_players: '{{ speaker + chromecast }}

            '
        alias: Find unmuted media players
      - choose:
        - conditions:
          - alias: Test if chromecast or speaker present
            condition: template
            value_template: '{{ ''speaker'' in media_players | string | lower  or
              ''chromecast'' in media_players |          string | lower }}'
          sequence:
          - target:
              entity_id: '{{media_players}}'
            data_template:
              volume_level: '{{ state_attr((media_players | first),''volume_level'')
                - 0.03}}'
            action: media_player.volume_set
          alias: Speaker playing and unmuted
      helper_last_controller_event: input_text.dial_salon_helper
      rotate_left_loop: true
      rotate_right_loop: true
      action_rotate_right:
      - variables:
          speaker: '{{ [area_id(trigger.event.data.entity_id)]     | map(''area_entities'')   |
            sum(start=[]) |    select(''search'', ''airplay'') |  expand   | selectattr(''attributes.is_volume_muted'',
            ''false'') |map(attribute=''entity_id'') | list}}

            '
          chromecast: '{{ [area_id(trigger.event.data.entity_id)]     | map(''area_entities'')   |
            sum(start=[]) |    select(''search'', ''chromecast'') |  expand   | selectattr(''attributes.is_volume_muted'',
            ''false'') |map(attribute=''entity_id'') | list}}

            '
          media_players: '{{ speaker + chromecast }}

            '
        alias: Find unmuted media players
      - choose:
        - conditions:
          - alias: Test if chromecast or speaker present
            condition: template
            value_template: '{{ ''speaker'' in media_players | string | lower  or
              ''chromecast'' in media_players |          string | lower }}'
          sequence:
          - target:
              entity_id: '{{media_players}}'
            data_template:
              volume_level: '{{ state_attr((media_players | first),''volume_level'')
                + 0.02}}'
            action: media_player.volume_set
          alias: Speaker playing and unmuted
      action_click_short:
      - variables:
          speaker: '{{ [area_id(trigger.event.data.entity_id)]     | map(''area_entities'')   |
            sum(start=[]) |    select(''search'', ''airplay'') |  expand   | selectattr(''attributes.is_volume_muted'',
            ''false'') |map(attribute=''entity_id'') | list}}

            '
          chromecast: '{{ [area_id(trigger.event.data.entity_id)]     | map(''area_entities'')   |
            sum(start=[]) |    select(''search'', ''chromecast'') |  expand   | selectattr(''attributes.is_volume_muted'',
            ''false'') |map(attribute=''entity_id'') | list}}

            '
          media_players: '{{ speaker + chromecast }}

            '
        alias: Find unmuted media players
      - metadata: {}
        data: {}
        target:
          entity_id: '{{media_players}}'
        action: media_player.media_play_pause
      action_click_triple:
      - variables:
          speaker: '{{ [area_id(trigger.event.data.entity_id)]     | map(''area_entities'')   |
            sum(start=[]) |    select(''search'', ''airplay'') |  expand   | selectattr(''attributes.is_volume_muted'',
            ''false'') |map(attribute=''entity_id'') | list}}

            '
          chromecast: '{{ [area_id(trigger.event.data.entity_id)]     | map(''area_entities'')   |
            sum(start=[]) |    select(''search'', ''chromecast'') |  expand   | selectattr(''attributes.is_volume_muted'',
            ''false'') |map(attribute=''entity_id'') | list}}

            '
          media_players: '{{ speaker + chromecast }}

            '
        alias: Find unmuted media players
      - metadata: {}
        data: {}
        target:
          entity_id: '{{media_players}}'
        action: media_player.turn_off
      rotate_left_max_loop_repeats: 60
      rotate_right_max_loop_repeats: 60
      helper_debounce_delay: 0
      action_click_double:
      - variables:
          speaker: '{{ [area_id(trigger.event.data.entity_id)]     | map(''area_entities'')   |
            sum(start=[]) |    select(''search'', ''airplay'') |  expand   | selectattr(''attributes.is_volume_muted'',
            ''false'') |map(attribute=''entity_id'') | list}}

            '
          chromecast: '{{ [area_id(trigger.event.data.entity_id)]     | map(''area_entities'')   |
            sum(start=[]) |    select(''search'', ''chromecast'') |  expand   | selectattr(''attributes.is_volume_muted'',
            ''false'') |map(attribute=''entity_id'') | list}}

            '
          media_players: '{{ speaker + chromecast }}

            '
        alias: Find unmuted media players
      - metadata: {}
        data: {}
        target:
          entity_id: '{{media_players}}'
        action: media_player.media_next_track
- id: '1722920464413'
  alias: dial hallway automation
  description: ''
  use_blueprint:
    path: EPMatt/ikea_e1744.yaml
    input:
      integration: Zigbee2MQTT
      controller_entity: sensor.remote_hallway_dial_action
      action_rotate_left:
      - variables:
          speaker: '{{ [area_id(trigger.event.data.entity_id)]     | map(''area_entities'')   |
            sum(start=[]) |    select(''search'', ''airplay'') |  expand   | selectattr(''attributes.is_volume_muted'',
            ''false'') |map(attribute=''entity_id'') | list}}

            '
          chromecast: '{{ [area_id(trigger.event.data.entity_id)]     | map(''area_entities'')   |
            sum(start=[]) |    select(''search'', ''chromecast'') |  expand   | selectattr(''attributes.is_volume_muted'',
            ''false'') |map(attribute=''entity_id'') | list}}

            '
          media_players: '{{ speaker + chromecast }}

            '
        alias: Find unmuted media players
      - choose:
        - conditions:
          - alias: Test if chromecast or speaker present
            condition: template
            value_template: '{{ ''speaker'' in media_players | string | lower  or
              ''chromecast'' in media_players |          string | lower }}'
            enabled: true
          sequence:
          - target:
              entity_id: '{{media_players}}'
            data_template:
              volume_level: '{{ state_attr((media_players | first),''volume_level'')
                - 0.03}}'
            action: media_player.volume_set
            enabled: true
          alias: Speaker playing and unmuted
      helper_last_controller_event: input_text.dial_hallway_helper
      rotate_left_loop: true
      rotate_right_loop: true
      action_rotate_right:
      - variables:
          speaker: '{{ [area_id(trigger.event.data.entity_id)]     | map(''area_entities'')   |
            sum(start=[]) |    select(''search'', ''airplay'') |  expand   | selectattr(''attributes.is_volume_muted'',
            ''false'') |map(attribute=''entity_id'') | list}}

            '
          chromecast: '{{ [area_id(trigger.event.data.entity_id)]     | map(''area_entities'')   |
            sum(start=[]) |    select(''search'', ''chromecast'') |  expand   | selectattr(''attributes.is_volume_muted'',
            ''false'') |map(attribute=''entity_id'') | list}}

            '
          media_players: '{{ speaker + chromecast }}

            '
        alias: Find unmuted media players
      - choose:
        - conditions:
          - alias: Test if chromecast or speaker present
            condition: template
            value_template: "     {{ 'speaker' in media_players | string | lower  or
              'chromecast' in media_players |\n          string | lower }}"
            enabled: false
          sequence:
          - target:
              entity_id: '{{media_players}}'
            data_template:
              volume_level: '{{ state_attr((media_players | first),''volume_level'')
                + 0.02}}'
            action: media_player.volume_set
            enabled: true
          alias: Speaker playing and unmuted
      action_click_short:
      - variables:
          speaker: '{{ [area_id(trigger.event.data.entity_id)]     | map(''area_entities'')   |
            sum(start=[]) |    select(''search'', ''airplay'') |  expand   | selectattr(''attributes.is_volume_muted'',
            ''false'') |map(attribute=''entity_id'') | list}}

            '
          chromecast: '{{ [area_id(trigger.event.data.entity_id)]     | map(''area_entities'')   |
            sum(start=[]) |    select(''search'', ''chromecast'') |  expand   | selectattr(''attributes.is_volume_muted'',
            ''false'') |map(attribute=''entity_id'') | list}}

            '
          media_players: '{{ speaker + chromecast }}

            '
        alias: Find unmuted media players
      - metadata: {}
        data: {}
        target:
          entity_id: '{{media_players}}'
        action: media_player.media_play_pause
      action_click_triple:
      - variables:
          speaker: '{{ [area_id(trigger.event.data.entity_id)]     | map(''area_entities'')   |
            sum(start=[]) |    select(''search'', ''airplay'') |  expand   | selectattr(''attributes.is_volume_muted'',
            ''false'') |map(attribute=''entity_id'') | list}}

            '
          chromecast: '{{ [area_id(trigger.event.data.entity_id)]     | map(''area_entities'')   |
            sum(start=[]) |    select(''search'', ''chromecast'') |  expand   | selectattr(''attributes.is_volume_muted'',
            ''false'') |map(attribute=''entity_id'') | list}}

            '
          media_players: '{{ speaker + chromecast }}

            '
        alias: Find unmuted media players
      - metadata: {}
        data: {}
        target:
          entity_id: '{{media_players}}'
        action: media_player.turn_off
      rotate_left_max_loop_repeats: 60
      rotate_right_max_loop_repeats: 60
      helper_debounce_delay: 0
      action_click_double:
      - variables:
          speaker: '{{ [area_id(trigger.event.data.entity_id)]     | map(''area_entities'')   |
            sum(start=[]) |    select(''search'', ''airplay'') |  expand   | selectattr(''attributes.is_volume_muted'',
            ''false'') |map(attribute=''entity_id'') | list}}

            '
          chromecast: '{{ [area_id(trigger.event.data.entity_id)]     | map(''area_entities'')   |
            sum(start=[]) |    select(''search'', ''chromecast'') |  expand   | selectattr(''attributes.is_volume_muted'',
            ''false'') |map(attribute=''entity_id'') | list}}

            '
          media_players: '{{ speaker + chromecast }}

            '
        alias: Find unmuted media players
      - metadata: {}
        data: {}
        target:
          entity_id: '{{media_players}}'
        action: media_player.media_next_track
- id: '1723154539730'
  alias: Dial office control automation
  description: ''
  use_blueprint:
    path: EPMatt/ikea_e1744.yaml
    input:
      integration: Zigbee2MQTT
      controller_entity: sensor.remote_office_dial_action_action
      action_rotate_left:
      - variables:
          speaker: '{{ [area_id(trigger.event.data.entity_id)]     | map(''area_entities'')   |
            sum(start=[]) |    select(''search'', ''airplay'') |  expand   | selectattr(''attributes.is_volume_muted'',
            ''false'') |map(attribute=''entity_id'') | list}}

            '
          chromecast: '{{ [area_id(trigger.event.data.entity_id)]     | map(''area_entities'')   |
            sum(start=[]) |    select(''search'', ''chromecast'') |  expand   | selectattr(''attributes.is_volume_muted'',
            ''false'') |map(attribute=''entity_id'') | list}}

            '
          media_players: '{{ speaker + chromecast }}

            '
        alias: Find unmuted media players
      - choose:
        - conditions:
          - alias: Test if chromecast or speaker present
            condition: template
            value_template: '{{ ''speaker'' in media_players | string | lower  or
              ''chromecast'' in media_players |          string | lower }}'
          sequence:
          - target:
              entity_id: '{{media_players}}'
            data_template:
              volume_level: '{{ state_attr((media_players | first),''volume_level'')
                - 0.03}}'
            action: media_player.volume_set
          alias: Speaker playing and unmuted
      helper_last_controller_event: input_text.dial_office_helper
      rotate_left_loop: true
      rotate_right_loop: true
      action_rotate_right:
      - variables:
          speaker: '{{ [area_id(trigger.event.data.entity_id)]     | map(''area_entities'')   |
            sum(start=[]) |    select(''search'', ''airplay'') |  expand   | selectattr(''attributes.is_volume_muted'',
            ''false'') |map(attribute=''entity_id'') | list}}

            '
          chromecast: '{{ [area_id(trigger.event.data.entity_id)]     | map(''area_entities'')   |
            sum(start=[]) |    select(''search'', ''chromecast'') |  expand   | selectattr(''attributes.is_volume_muted'',
            ''false'') |map(attribute=''entity_id'') | list}}

            '
          media_players: '{{ speaker + chromecast }}

            '
        alias: Find unmuted media players
      - choose:
        - conditions:
          - alias: Test if chromecast or speaker present
            condition: template
            value_template: '{{ ''speaker'' in media_players | string | lower  or
              ''chromecast'' in media_players |          string | lower }}'
          sequence:
          - target:
              entity_id: '{{media_players}}'
            data_template:
              volume_level: '{{ state_attr((media_players | first),''volume_level'')
                + 0.02}}'
            action: media_player.volume_set
          alias: Speaker playing and unmuted
      action_click_short:
      - variables:
          speaker: '{{ [area_id(trigger.event.data.entity_id)]     | map(''area_entities'')   |
            sum(start=[]) |    select(''search'', ''airplay'') |  expand   | selectattr(''attributes.is_volume_muted'',
            ''false'') |map(attribute=''entity_id'') | list}}

            '
          chromecast: '{{ [area_id(trigger.event.data.entity_id)]     | map(''area_entities'')   |
            sum(start=[]) |    select(''search'', ''chromecast'') |  expand   | selectattr(''attributes.is_volume_muted'',
            ''false'') |map(attribute=''entity_id'') | list}}

            '
          media_players: '{{ speaker + chromecast }}

            '
        alias: Find unmuted media players
      - metadata: {}
        data: {}
        target:
          entity_id: '{{media_players}}'
        action: media_player.media_play_pause
      action_click_triple:
      - variables:
          speaker: '{{ [area_id(trigger.event.data.entity_id)]     | map(''area_entities'')   |
            sum(start=[]) |    select(''search'', ''airplay'') |  expand   | selectattr(''attributes.is_volume_muted'',
            ''false'') |map(attribute=''entity_id'') | list}}

            '
          chromecast: '{{ [area_id(trigger.event.data.entity_id)]     | map(''area_entities'')   |
            sum(start=[]) |    select(''search'', ''chromecast'') |  expand   | selectattr(''attributes.is_volume_muted'',
            ''false'') |map(attribute=''entity_id'') | list}}

            '
          media_players: '{{ speaker + chromecast }}

            '
        alias: Find unmuted media players
      - metadata: {}
        data: {}
        target:
          entity_id: '{{media_players}}'
        action: media_player.turn_off
      rotate_left_max_loop_repeats: 60
      rotate_right_max_loop_repeats: 60
      helper_debounce_delay: 0
      action_click_double:
      - variables:
          speaker: '{{ [area_id(trigger.event.data.entity_id)]     | map(''area_entities'')   |
            sum(start=[]) |    select(''search'', ''airplay'') |  expand   | selectattr(''attributes.is_volume_muted'',
            ''false'') |map(attribute=''entity_id'') | list}}

            '
          chromecast: '{{ [area_id(trigger.event.data.entity_id)]     | map(''area_entities'')   |
            sum(start=[]) |    select(''search'', ''chromecast'') |  expand   | selectattr(''attributes.is_volume_muted'',
            ''false'') |map(attribute=''entity_id'') | list}}

            '
          media_players: '{{ speaker + chromecast }}

            '
        alias: Find unmuted media players
      - metadata: {}
        data: {}
        target:
          entity_id: '{{media_players}}'
        action: media_player.media_next_track
- id: '1723157141694'
  alias: Dial livingroom wall control automation
  description: ''
  use_blueprint:
    path: EPMatt/ikea_e1744.yaml
    input:
      integration: Zigbee2MQTT
      controller_entity: sensor.remote_livingroom_wall_dial_action
      action_rotate_left:
      - variables:
          speaker: '{{ [area_id(trigger.event.data.entity_id)]     | map(''area_entities'')   |
            sum(start=[]) |    select(''search'', ''airplay'') |  expand   | selectattr(''attributes.is_volume_muted'',
            ''false'') |map(attribute=''entity_id'') | list}}

            '
          chromecast: '{{ [area_id(trigger.event.data.entity_id)]     | map(''area_entities'')   |
            sum(start=[]) |    select(''search'', ''chromecast'') |  expand   | selectattr(''attributes.is_volume_muted'',
            ''false'') |map(attribute=''entity_id'') | list}}

            '
          media_players: '{{ speaker + chromecast }}

            '
        alias: Find unmuted media players
      - choose:
        - conditions:
          - alias: Test if chromecast or speaker present
            condition: template
            value_template: '{{ ''speaker'' in media_players | string | lower  or
              ''chromecast'' in media_players |          string | lower }}'
          sequence:
          - target:
              entity_id: '{{media_players}}'
            data_template:
              volume_level: '{{ state_attr((media_players | first),''volume_level'')
                - 0.03}}'
            action: media_player.volume_set
          alias: Speaker playing and unmuted
      helper_last_controller_event: input_text.dial_livingroom_helper
      rotate_left_loop: true
      rotate_right_loop: true
      action_rotate_right:
      - variables:
          speaker: '{{ [area_id(trigger.event.data.entity_id)]     | map(''area_entities'')   |
            sum(start=[]) |    select(''search'', ''airplay'') |  expand   | selectattr(''attributes.is_volume_muted'',
            ''false'') |map(attribute=''entity_id'') | list}}

            '
          chromecast: '{{ [area_id(trigger.event.data.entity_id)]     | map(''area_entities'')   |
            sum(start=[]) |    select(''search'', ''chromecast'') |  expand   | selectattr(''attributes.is_volume_muted'',
            ''false'') |map(attribute=''entity_id'') | list}}

            '
          media_players: '{{ speaker + chromecast }}

            '
        alias: Find unmuted media players
      - choose:
        - conditions:
          - alias: Test if chromecast or speaker present
            condition: template
            value_template: '{{ ''speaker'' in media_players | string | lower  or
              ''chromecast'' in media_players |          string | lower }}'
          sequence:
          - target:
              entity_id: '{{media_players}}'
            data_template:
              volume_level: '{{ state_attr((media_players | first),''volume_level'')
                + 0.02}}'
            action: media_player.volume_set
          alias: Speaker playing and unmuted
      action_click_short:
      - variables:
          speaker: '{{ [area_id(trigger.event.data.entity_id)]     | map(''area_entities'')   |
            sum(start=[]) |    select(''search'', ''airplay'') |  expand   | selectattr(''attributes.is_volume_muted'',
            ''false'') |map(attribute=''entity_id'') | list}}

            '
          chromecast: '{{ [area_id(trigger.event.data.entity_id)]     | map(''area_entities'')   |
            sum(start=[]) |    select(''search'', ''chromecast'') |  expand   | selectattr(''attributes.is_volume_muted'',
            ''false'') |map(attribute=''entity_id'') | list}}

            '
          media_players: '{{ speaker + chromecast }}

            '
        alias: Find unmuted media players
      - metadata: {}
        data: {}
        target:
          entity_id: '{{media_players}}'
        action: media_player.media_play_pause
      action_click_triple:
      - variables:
          speaker: '{{ [area_id(trigger.event.data.entity_id)]     | map(''area_entities'')   |
            sum(start=[]) |    select(''search'', ''airplay'') |  expand   | selectattr(''attributes.is_volume_muted'',
            ''false'') |map(attribute=''entity_id'') | list}}

            '
          chromecast: '{{ [area_id(trigger.event.data.entity_id)]     | map(''area_entities'')   |
            sum(start=[]) |    select(''search'', ''chromecast'') |  expand   | selectattr(''attributes.is_volume_muted'',
            ''false'') |map(attribute=''entity_id'') | list}}

            '
          media_players: '{{ speaker + chromecast }}

            '
        alias: Find unmuted media players
      - metadata: {}
        data: {}
        target:
          entity_id: '{{media_players}}'
        action: media_player.turn_off
      rotate_left_max_loop_repeats: 60
      rotate_right_max_loop_repeats: 60
      helper_debounce_delay: 0
      action_click_double:
      - variables:
          speaker: '{{ [area_id(trigger.event.data.entity_id)]     | map(''area_entities'')   |
            sum(start=[]) |    select(''search'', ''airplay'') |  expand   | selectattr(''attributes.is_volume_muted'',
            ''false'') |map(attribute=''entity_id'') | list}}

            '
          chromecast: '{{ [area_id(trigger.event.data.entity_id)]     | map(''area_entities'')   |
            sum(start=[]) |    select(''search'', ''chromecast'') |  expand   | selectattr(''attributes.is_volume_muted'',
            ''false'') |map(attribute=''entity_id'') | list}}

            '
          media_players: '{{ speaker + chromecast }}

            '
        alias: Find unmuted media players
      - metadata: {}
        data: {}
        target:
          entity_id: '{{media_players}}'
        action: media_player.media_next_track
- id: '1723161942387'
  alias: dial kitchen control automation
  description: ''
  use_blueprint:
    path: EPMatt/ikea_e1744.yaml
    input:
      integration: Zigbee2MQTT
      controller_entity: sensor.remote_kitchen_dial_action
      action_rotate_left:
      - variables:
          speaker: '{{ [area_id(trigger.event.data.entity_id)]     | map(''area_entities'')   |
            sum(start=[]) |    select(''search'', ''airplay'') |  expand   | selectattr(''attributes.is_volume_muted'',
            ''false'') |map(attribute=''entity_id'') | list}}

            '
          chromecast: '{{ [area_id(trigger.event.data.entity_id)]     | map(''area_entities'')   |
            sum(start=[]) |    select(''search'', ''chromecast'') |  expand   | selectattr(''attributes.is_volume_muted'',
            ''false'') |map(attribute=''entity_id'') | list}}

            '
          media_players: '{{ speaker + chromecast }}

            '
        alias: Find unmuted media players
      - choose:
        - conditions:
          - alias: Test if chromecast or speaker present
            condition: template
            value_template: '{{ ''speaker'' in media_players | string | lower  or
              ''chromecast'' in media_players |          string | lower }}'
          sequence:
          - target:
              entity_id: '{{media_players}}'
            data_template:
              volume_level: '{{ state_attr((media_players | first),''volume_level'')
                - 0.03}}'
            action: media_player.volume_set
          alias: Speaker playing and unmuted
      helper_last_controller_event: input_text.dial_kitchen_helper
      rotate_left_loop: true
      rotate_right_loop: true
      action_rotate_right:
      - variables:
          speaker: '{{ [area_id(trigger.event.data.entity_id)]     | map(''area_entities'')   |
            sum(start=[]) |    select(''search'', ''airplay'') |  expand   | selectattr(''attributes.is_volume_muted'',
            ''false'') |map(attribute=''entity_id'') | list}}

            '
          chromecast: '{{ [area_id(trigger.event.data.entity_id)]     | map(''area_entities'')   |
            sum(start=[]) |    select(''search'', ''chromecast'') |  expand   | selectattr(''attributes.is_volume_muted'',
            ''false'') |map(attribute=''entity_id'') | list}}

            '
          media_players: '{{ speaker + chromecast }}

            '
        alias: Find unmuted media players
      - choose:
        - conditions:
          - alias: Test if chromecast or speaker present
            condition: template
            value_template: '{{ ''speaker'' in media_players | string | lower  or
              ''chromecast'' in media_players |          string | lower }}'
          sequence:
          - target:
              entity_id: '{{media_players}}'
            data_template:
              volume_level: '{{ state_attr((media_players | first),''volume_level'')
                + 0.02}}'
            action: media_player.volume_set
          alias: Speaker playing and unmuted
      action_click_short:
      - variables:
          speaker: '{{ [area_id(trigger.event.data.entity_id)]     | map(''area_entities'')   |
            sum(start=[]) |    select(''search'', ''airplay'') |  expand   | selectattr(''attributes.is_volume_muted'',
            ''false'') |map(attribute=''entity_id'') | list}}

            '
          chromecast: '{{ [area_id(trigger.event.data.entity_id)]     | map(''area_entities'')   |
            sum(start=[]) |    select(''search'', ''chromecast'') |  expand   | selectattr(''attributes.is_volume_muted'',
            ''false'') |map(attribute=''entity_id'') | list}}

            '
          media_players: '{{ speaker + chromecast }}

            '
        alias: Find unmuted media players
      - metadata: {}
        data: {}
        target:
          entity_id: '{{media_players}}'
        action: media_player.media_play_pause
      action_click_triple:
      - variables:
          speaker: '{{ [area_id(trigger.event.data.entity_id)]     | map(''area_entities'')   |
            sum(start=[]) |    select(''search'', ''airplay'') |  expand   | selectattr(''attributes.is_volume_muted'',
            ''false'') |map(attribute=''entity_id'') | list}}

            '
          chromecast: '{{ [area_id(trigger.event.data.entity_id)]     | map(''area_entities'')   |
            sum(start=[]) |    select(''search'', ''chromecast'') |  expand   | selectattr(''attributes.is_volume_muted'',
            ''false'') |map(attribute=''entity_id'') | list}}

            '
          media_players: '{{ speaker + chromecast }}

            '
        alias: Find unmuted media players
      - metadata: {}
        data: {}
        target:
          entity_id: '{{media_players}}'
        action: media_player.turn_off
      rotate_left_max_loop_repeats: 60
      rotate_right_max_loop_repeats: 60
      helper_debounce_delay: 0
      action_click_double:
      - variables:
          speaker: '{{ [area_id(trigger.event.data.entity_id)]     | map(''area_entities'')   |
            sum(start=[]) |    select(''search'', ''airplay'') |  expand   | selectattr(''attributes.is_volume_muted'',
            ''false'') |map(attribute=''entity_id'') | list}}

            '
          chromecast: '{{ [area_id(trigger.event.data.entity_id)]     | map(''area_entities'')   |
            sum(start=[]) |    select(''search'', ''chromecast'') |  expand   | selectattr(''attributes.is_volume_muted'',
            ''false'') |map(attribute=''entity_id'') | list}}

            '
          media_players: '{{ speaker + chromecast }}

            '
        alias: Find unmuted media players
      - metadata: {}
        data: {}
        target:
          entity_id: '{{media_players}}'
        action: media_player.media_next_track
- id: '1723169196057'
  alias: dial office desk control automation
  description: ''
  use_blueprint:
    path: maxi/ikea_e1744_fixed.yaml
    input:
      integration: Zigbee2MQTT
      controller_entity: sensor.remote_office_desk_dial_action
      action_rotate_left:
      - variables:
          speaker: '{{ [area_id(trigger.event.data.entity_id)]     | map(''area_entities'')   |
            sum(start=[]) |    select(''search'', ''airplay'') |  expand   | selectattr(''attributes.is_volume_muted'',
            ''false'') |map(attribute=''entity_id'') | list}}

            '
          chromecast: '{{ [area_id(trigger.event.data.entity_id)]     | map(''area_entities'')   |
            sum(start=[]) |    select(''search'', ''chromecast'') |  expand   | selectattr(''attributes.is_volume_muted'',
            ''false'') |map(attribute=''entity_id'') | list}}

            '
          media_players: '{{ speaker + chromecast }}

            '
        alias: Find unmuted media players
      - choose:
        - conditions:
          - alias: Test if chromecast or speaker present
            condition: template
            value_template: '{{ ''speaker'' in media_players | string | lower  or
              ''chromecast'' in media_players |          string | lower }}'
          sequence:
          - target:
              entity_id: '{{media_players}}'
            data_template:
              volume_level: '{{ state_attr((media_players | first),''volume_level'')
                | float - 0.03}}'
            action: media_player.volume_set
          alias: Speaker playing and unmuted
      helper_last_controller_event: input_text.dial_office_desk_helper
      rotate_left_loop: true
      rotate_right_loop: true
      action_rotate_right:
      - variables:
          speaker: '{{ [area_id(trigger.event.data.entity_id)]     | map(''area_entities'')   |
            sum(start=[]) |    select(''search'', ''airplay'') |  expand   | selectattr(''attributes.is_volume_muted'',
            ''false'') |map(attribute=''entity_id'') | list}}

            '
          chromecast: '{{ [area_id(trigger.event.data.entity_id)]     | map(''area_entities'')   |
            sum(start=[]) |    select(''search'', ''chromecast'') |  expand   | selectattr(''attributes.is_volume_muted'',
            ''false'') |map(attribute=''entity_id'') | list}}

            '
          media_players: '{{ speaker + chromecast }}

            '
        alias: Find unmuted media players
      - choose:
        - conditions:
          - alias: Test if chromecast or speaker present
            condition: template
            value_template: '{{ ''speaker'' in media_players | string | lower  or
              ''chromecast'' in media_players |          string | lower }}'
          sequence:
          - target:
              entity_id: '{{media_players}}'
            data_template:
              volume_level: '{{ state_attr((media_players | first),''volume_level'')
                | float + 0.02}}'
            action: media_player.volume_set
            enabled: true
          alias: Speaker playing and unmuted
      action_click_short:
      - variables:
          speaker: '{{ [area_id(trigger.event.data.entity_id)]     | map(''area_entities'')   |
            sum(start=[]) |    select(''search'', ''airplay'') |  expand   | selectattr(''attributes.is_volume_muted'',
            ''false'') |map(attribute=''entity_id'') | list}}

            '
          chromecast: '{{ [area_id(trigger.event.data.entity_id)]     | map(''area_entities'')   |
            sum(start=[]) |    select(''search'', ''chromecast'') |  expand   | selectattr(''attributes.is_volume_muted'',
            ''false'') |map(attribute=''entity_id'') | list}}

            '
          media_players: '{{ speaker + chromecast }}

            '
        alias: Find unmuted media players
      - metadata: {}
        data: {}
        target:
          entity_id: '{{media_players}}'
        action: media_player.media_play_pause
      action_click_triple:
      - variables:
          speaker: '{{ [area_id(trigger.event.data.entity_id)]     | map(''area_entities'')   |
            sum(start=[]) |    select(''search'', ''airplay'') |  expand   | selectattr(''attributes.is_volume_muted'',
            ''false'') |map(attribute=''entity_id'') | list}}

            '
          chromecast: '{{ [area_id(trigger.event.data.entity_id)]     | map(''area_entities'')   |
            sum(start=[]) |    select(''search'', ''chromecast'') |  expand   | selectattr(''attributes.is_volume_muted'',
            ''false'') |map(attribute=''entity_id'') | list}}

            '
          media_players: '{{ speaker + chromecast }}

            '
        alias: Find unmuted media players
      - metadata: {}
        data: {}
        target:
          entity_id: '{{media_players}}'
        action: media_player.turn_off
      rotate_left_max_loop_repeats: 60
      rotate_right_max_loop_repeats: 60
      helper_debounce_delay: 0
      action_click_double:
      - variables:
          speaker: '{{ [area_id(trigger.event.data.entity_id)]     | map(''area_entities'')   |
            sum(start=[]) |    select(''search'', ''airplay'') |  expand   | selectattr(''attributes.is_volume_muted'',
            ''false'') |map(attribute=''entity_id'') | list}}

            '
          chromecast: '{{ [area_id(trigger.event.data.entity_id)]     | map(''area_entities'')   |
            sum(start=[]) |    select(''search'', ''chromecast'') |  expand   | selectattr(''attributes.is_volume_muted'',
            ''false'') |map(attribute=''entity_id'') | list}}

            '
          media_players: '{{ speaker + chromecast }}

            '
        alias: Find unmuted media players
      - metadata: {}
        data: {}
        target:
          entity_id: '{{media_players}}'
        action: media_player.media_next_track
- id: '1723214966525'
  alias: Front door automation on unlock for main codes
  description: ''
  triggers:
  - entity_id:
    - lock.lock_front_door
    trigger: state
    to: unlocked
    for:
      hours: 0
      minutes: 0
      seconds: 1
  conditions:
  - alias: Was the door unlocked?
    condition: template
    value_template: '{{  states(''sensor.lock_front_door_action_source_name'') ==
      ''keypad'' }}'
  actions:
  - action: alarm_control_panel.alarm_disarm
    metadata: {}
    data: {}
    target:
      entity_id: alarm_control_panel.home_alarm
  - variables:
      action_id: '{{ states(''sensor.lock_front_door_action_user'') }}

        '
      user_opening: "{% if action_id | string == '1' %}\n  Maxi\n{% elif action_id
        | string == '2' %}\n  Myriam\n{% elif action_id | string == '3' %}\n  Carla\n{%
        elif action_id | string == '4' %}\n  Fay\n{% elif action_id | string == '9'
        %}\n  Ré\n{% else %}\n Unknown\n{% endif %}\n"
  - metadata: {}
    data:
      message: '{{ user_opening }} has arrived

        '
      color: cyan
    action: script.broadcast_alert_in_the_house
  mode: parallel
  max: 10
- id: '1723530969899'
  alias: 'Turn off Livingroom lights when bedroom Sleeper turns on '
  description: 'Check also that the Livingroom is empty '
  trigger:
  - platform: state
    entity_id:
    - binary_sensor.sleeper_in_bedroom
    to: 'on'
    from: 'off'
  condition:
  - condition: state
    entity_id: binary_sensor.group_livingroom_motion_occupancy
    state: 'off'
  action:
  - action: light.turn_off
    metadata: {}
    data:
      transition: 20
    target:
      area_id: livingroom
      entity_id: light.group_livingroom_lights
  mode: single
- id: '1723823368949'
  alias: Automatic Volume on playback v3
  description: Control each home_group speaker  individually instead of a per room
    basis
  triggers:
  - entity_id:
    - media_player.universal_bathroom_speakers
    - media_player.universal_bedroom_speakers
    - media_player.universal_salon_speakers
    - media_player.universal_closet_speaker
    - media_player.universal_hallway_speakers
    - media_player.universal_kitchen_speakers
    - media_player.universal_office_speakers
    - media_player.universal_livingroom_speakers
    - media_player.universal_hotbox_speakers
    to: playing
    from:
    trigger: state
  conditions:
  - condition: template
    value_template: '{{ now() - trigger.from_state.last_changed > timedelta(seconds=10)}}'
    enabled: false
  actions:
  - choose:
    - conditions:
      - alias: Is there no sleeper in the room?
        condition: template
        value_template: '{{ area_id(trigger.entity_id) | lower not in states(''sensor.active_sleeper_rooms'')
          | string | lower }}

          '
      sequence:
      - choose:
        - conditions:
          - condition: state
            entity_id: input_boolean.following_music
            state: 'off'
          sequence: []
          alias: If following music is off
        - conditions:
          - condition: state
            entity_id: input_boolean.following_music
            state: 'on'
          sequence:
          - alias: Mute or unmute depending on occupancy
            choose:
            - conditions:
              - condition: template
                value_template: '{{ area_id(trigger.entity_id) | lower in states(''sensor.active_motion_rooms'')
                  | string | lower }}

                  '
                alias: Room occupied
              sequence:
              - choose:
                - conditions:
                  - condition: time
                    after: 09:00:00
                    before: '11:30:00'
                    weekday:
                    - fri
                    - thu
                    - wed
                    - tue
                    - mon
                    - sat
                    - sun
                  sequence:
                  - metadata: {}
                    data:
                      volume_level: 0.3
                    target:
                      entity_id: '{{trigger.entity_id}}'
                    enabled: true
                    action: media_player.volume_set
                  - metadata: {}
                    data:
                      is_volume_muted: false
                    target:
                      entity_id: '{{trigger.entity_id}}'
                    alias: Unmute speaker
                    action: media_player.volume_mute
                - conditions:
                  - condition: time
                    after: '11:30:00'
                    before: '21:30:00'
                    weekday:
                    - fri
                    - thu
                    - wed
                    - tue
                    - mon
                    - sun
                    - sat
                  sequence:
                  - metadata: {}
                    data:
                      volume_level: 0.35
                    target:
                      entity_id: '{{trigger.entity_id}}'
                    enabled: true
                    action: media_player.volume_set
                  - metadata: {}
                    data:
                      is_volume_muted: false
                    target:
                      entity_id: '{{trigger.entity_id}}'
                    alias: Unmute speaker
                    action: media_player.volume_mute
                - conditions:
                  - condition: time
                    after: '21:30:00'
                    before: '23:30:00'
                    weekday:
                    - fri
                    - thu
                    - wed
                    - tue
                    - mon
                    - sun
                    - sat
                  sequence:
                  - metadata: {}
                    data:
                      volume_level: 0.4
                    target:
                      entity_id: '{{trigger.entity_id}}'
                    enabled: true
                    action: media_player.volume_set
                  - metadata: {}
                    data:
                      is_volume_muted: false
                    target:
                      entity_id: '{{trigger.entity_id}}'
                    alias: Unmute speaker
                    action: media_player.volume_mute
                - conditions:
                  - condition: time
                    after: '23:30:00'
                    before: 01:00:00
                    weekday:
                    - fri
                    - thu
                    - wed
                    - tue
                    - mon
                    - sun
                    - sat
                  sequence:
                  - metadata: {}
                    data:
                      volume_level: 0.3
                    target:
                      entity_id: '{{trigger.entity_id}}'
                    enabled: true
                    action: media_player.volume_set
                  - metadata: {}
                    data:
                      is_volume_muted: false
                    target:
                      entity_id: '{{trigger.entity_id}}'
                    alias: Unmute speaker
                    action: media_player.volume_mute
                - conditions:
                  - condition: time
                    after: 01:00:00
                    before: 03:00:00
                    weekday:
                    - fri
                    - thu
                    - wed
                    - tue
                    - mon
                    - sun
                    - sat
                  sequence:
                  - metadata: {}
                    data:
                      volume_level: 0.25
                    target:
                      entity_id: '{{trigger.entity_id}}'
                    enabled: true
                    action: media_player.volume_set
                  - metadata: {}
                    data:
                      is_volume_muted: false
                    target:
                      entity_id: '{{trigger.entity_id}}'
                    alias: Unmute speaker
                    action: media_player.volume_mute
                - conditions:
                  - condition: time
                    after: 03:00:00
                    before: 09:00:00
                    weekday:
                    - fri
                    - thu
                    - wed
                    - tue
                    - mon
                    - sun
                    - sat
                  sequence:
                  - metadata: {}
                    data:
                      volume_level: 0.22
                    target:
                      entity_id: '{{trigger.entity_id}}'
                    enabled: true
                    action: media_player.volume_set
                  - metadata: {}
                    data:
                      is_volume_muted: false
                    target:
                      entity_id: '{{trigger.entity_id}}'
                    alias: Unmute speaker
                    action: media_player.volume_mute
                default:
                - metadata: {}
                  data:
                    volume_level: 0.35
                  target:
                    entity_id: '{{trigger.entity_id}}'
                  enabled: true
                  action: media_player.volume_set
                - metadata: {}
                  data:
                    is_volume_muted: false
                  target:
                    entity_id: '{{trigger.entity_id}}'
                  alias: Unmute speaker
                  action: media_player.volume_mute
              alias: Set volume if the room is occupied
            - conditions:
              - alias: Is the speaker room occupied?
                condition: template
                value_template: '{{ area_id(trigger.entity_id) | lower not in states(''sensor.active_motion_rooms'')
                  | string | lower }}

                  '
              sequence:
              - data:
                  is_volume_muted: true
                target:
                  entity_id: '{{trigger.entity_id}}'
                action: media_player.volume_mute
              alias: Set mute if the room is unoccupied
          alias: If following music is on
      alias: No sleeper in the room
    - conditions:
      - condition: template
        value_template: '{{ area_id(trigger.entity_id) | lower in states(''sensor.active_sleeper_rooms'')
          | string | lower }}

          '
      sequence:
      - data:
          is_volume_muted: true
        target:
          entity_id: '{{trigger.entity_id}}'
        action: media_player.volume_mute
      alias: Sleeper present in the room
  mode: parallel
  trace:
    stored_traces: 30
  max: 25
- id: '1727032753670'
  alias: Alert people in the back to go away
  description: Flash the red lights in the back while people are loitering
  triggers:
  - entity_id:
    - binary_sensor.back_door_loitering_person_occupancy
    to: 'on'
    from: 'off'
    for:
      hours: 0
      minutes: 0
      seconds: 30
    trigger: state
  conditions: []
  actions:
  - metadata: {}
    data:
      title: Security Alert
      message: Alerting loiterers to leave the back door
      data:
        image: /api/camera_proxy/camera.back_door_camera
        ttl: 0
        priority: high
        channel: security_alerts_notifications
        actions:
        - action: URI
          title: Open Cameras
          uri: /maxi-mobile/main-view#cameras
    action: notify.mobile_app_phone_maxi
  - repeat:
      sequence:
      - sequence:
        - metadata: {}
          data:
            color_name: red
            brightness: 255
          target:
            entity_id: light.back_door_light
          action: light.turn_on
        - delay:
            hours: 0
            minutes: 0
            seconds: 0
            milliseconds: 701
        - metadata: {}
          data: {}
          target:
            entity_id: light.back_door_light
          action: light.turn_off
      until:
      - condition: state
        entity_id: binary_sensor.back_door_camera_person_occupancy
        state: 'off'
        for:
          hours: 0
          minutes: 0
          seconds: 10
  - wait_for_trigger:
    - entity_id:
      - binary_sensor.back_door_camera_person_occupancy
      to: 'off'
      for:
        hours: 0
        minutes: 0
        seconds: 30
      trigger: state
    timeout:
      hours: 0
      minutes: 0
      seconds: 0
      milliseconds: 0
    continue_on_timeout: true
  - metadata: {}
    data:
      transition: 30
    target:
      entity_id: light.back_door_light
    action: light.turn_off
  mode: single
- id: '1727112478403'
  alias: Lower sound when assist in progress
  description: ''
  triggers:
  - entity_id:
    - assist_satellite.esp32_s3_box_kitchen_assistant_assist_satellite
    - assist_satellite.saloon_assistant_assist_satellite
    - assist_satellite.hallway_assistant_assist_satellite
    - assist_satellite.hotbox_assistant_assist_satellite
    - assist_satellite.office_assistant_assist_satellite
    - assist_satellite.lv_assistant_assist_satellite
    from:
    trigger: state
    to: listening
  conditions: []
  actions:
  - variables:
      playing_speakers: '{% set entity_id = [area_id(trigger.entity_id)]   | map(''area_entities'')
        | sum(start=[]) |    select(''search'', ''speakers'') | select(''is_state'',''playing'')
        | unique | list %} {{ [entity_id | first | string] + [state_attr(entity_id
        | first | string, ''volume_level'') | string] }}

        '
      playing_chromecasts: '{% set entity_id = [area_id(trigger.entity_id)]   | map(''area_entities'')
        | sum(start=[]) |    select(''search'', ''chromecast'') | select(''is_state'',''playing'')
        | unique | list %} {{[entity_id | first | string] + [state_attr(entity_id
        | first | string, ''volume_level'') | string] }}

        '
  - parallel:
    - alias: Dismiss empty variables
      if:
      - alias: Speaker present
        condition: template
        value_template: '{{ playing_speakers.0 != ""}}'
      then:
      - alias: Speakers
        sequence:
        - variables:
            original_volume: '{{ state_attr(playing_speakers.0, ''volume_level'')
              | round(2, ''floor'')| string  }}

              '
            desired_volume: '{{ (original_volume | float / 2 ) | round(2, ''floor'')|
              string }}

              '
        - action: media_player.volume_set
          metadata: {}
          data:
            volume_level: '{{ desired_volume }}

              '
          target:
            entity_id: '{{playing_speakers.0}}'
          alias: Lower Music
        - wait_template: '{{ states(trigger.entity_id) == "idle" }}'
          continue_on_timeout: true
          timeout: '60'
        - condition: template
          value_template: '{{ (state_attr(playing_speakers.0, ''volume_level'') |
            float | round(2, ''floor'') | float) == desired_volume  | round(2, ''floor'')
            }}'
        - action: media_player.volume_set
          metadata: {}
          data:
            volume_level: '{{ original_volume }}

              '
          target:
            entity_id: '{{playing_speakers.0}}'
    - alias: Dismiss empty variables
      if:
      - condition: template
        value_template: '{{ playing_chromecasts.0 != ""}}'
      then:
      - alias: chromecasts
        sequence:
        - variables:
            original_volume: '{{ state_attr(playing_chromecasts.0, ''volume_level'')  |
              round(2, ''floor'')|  string  }}

              '
            desired_volume: '{{ (original_volume | float / 2 ) | round(2, ''floor'')|
              string }}

              '
        - action: media_player.volume_set
          metadata: {}
          data:
            volume_level: '{{ desired_volume }}

              '
          target:
            entity_id: '{{playing_chromecasts.0}}'
          alias: Lower Music
        - wait_template: '{{ states(trigger.entity_id) == "idle" }}'
          continue_on_timeout: true
          timeout: '60'
        - condition: template
          value_template: '{{ (state_attr(playing_chromecasts.0, ''volume_level'')
            | float | round(2, ''floor'') | float) == desired_volume  | round(2, ''floor'')
            }}'
        - action: media_player.volume_set
          metadata: {}
          data:
            volume_level: '{{ original_volume }}

              '
          target:
            entity_id: '{{playing_chromecasts.0}}'
  mode: parallel
  max: 10
- id: '1727273501229'
  alias: Assist Play random music
  description: ''
  triggers:
  - command:
    - play random music
    trigger: conversation
  conditions: []
  actions:
  - action: media_player.play_media
    target:
      entity_id: media_player.group_mass_home_group_speakers
    data:
      media_content_id: 500 Random tracks
      media_content_type: playlist
  mode: single
- id: '1728086665319'
  alias: Manage bedroom AC through maxi occupancy
  description: ''
  triggers:
  - entity_id:
    - binary_sensor.user_home
    trigger: state
  conditions: []
  actions:
  - choose:
    - conditions:
      - condition: state
        entity_id: binary_sensor.user_home
        state: 'on'
      sequence:
      - metadata: {}
        data:
          preset_mode: none
        target:
          entity_id:
          - climate.hotbox_ac
          - climate.livingroom_ac
          - climate.office_ac
        action: climate.set_preset_mode
    - conditions:
      - condition: state
        entity_id: binary_sensor.user_home
        state: 'off'
      sequence:
      - metadata: {}
        data:
          preset_mode: away
        target:
          entity_id:
          - climate.hotbox_ac
          - climate.livingroom_ac
          - climate.office_ac
        action: climate.set_preset_mode
  mode: single
- id: '1728309825943'
  alias: Sleep actions when "sleeper in livingroom" is turned on
  description: ''
  triggers:
  - entity_id:
    - input_boolean.sleeper_in_livingroom
    to: 'on'
    from: 'off'
    trigger: state
  conditions: []
  actions:
  - action: media_player.volume_mute
    metadata: {}
    data:
      is_volume_muted: true
    target:
      entity_id:
      - media_player.universal_livingroom_speakers
      - media_player.universal_hallway_speakers
  - action: cover.close_cover
    metadata: {}
    data: {}
    target:
      entity_id: cover.cover_livingroom_blinds
  - action: media_player.turn_off
    metadata: {}
    data: {}
    target:
      entity_id: media_player.lg_livingroom_tv
  - action: light.turn_off
    metadata: {}
    data:
      transition: 2
    target:
      area_id: livingroom
      entity_id: light.group_livingroom_lights
  mode: single
- id: '1728310438747'
  alias: Undo Sleep actions when "sleeper in livingroom" is turned off
  description: ''
  triggers:
  - entity_id:
    - input_boolean.sleeper_in_livingroom
    to: 'off'
    from: 'on'
    trigger: state
  conditions: []
  actions:
  - variables:
      off_lights_in_room: "{% set ns = namespace(f = [] ) %} {% for i in ( [area_id(trigger.entity_id)]
        \ | map('area_entities') | sum(start=[]) | select('match', '^light.') | select('is_state','off')
        \ |  unique | list )  %} {% if i not in  label_entities(\"High Intensity Light\")
        | string %}\n  {% set ns.f = ns.f + [i] %}\n{% endif %} {% endfor %} {{ ns.f
        }}\n"
  - action: light.turn_on
    data:
      transition: 120
      color_name: warm_white
    target:
      entity_id: '{{off_lights_in_room}}'
  - action: media_player.volume_mute
    metadata: {}
    data:
      is_volume_muted: false
    target:
      entity_id:
      - media_player.universal_livingroom_speakers
      - media_player.universal_hallway_speakers
  mode: single
- id: '1728311156670'
  alias: Dim Wall lights when livingroom TV is playing and Beige couch or matress
    is occupied
  description: ''
  triggers:
  - trigger: state
    entity_id:
    - binary_sensor.sensor_livingroom_beige_couch_fp2_occupancy
    - binary_sensor.sensor_livingroom_matress_fp2_occupancy
    to: 'on'
  - trigger: state
    entity_id:
    - media_player.universal_livingroom_chromecast
    from:
    to: playing
  conditions:
  - condition: state
    entity_id: light.livingroom_wall_light
    state: 'on'
  - condition: not
    conditions:
    - condition: state
      entity_id: media_player.universal_livingroom_chromecast
      state: 'off'
  - condition: or
    conditions:
    - condition: state
      entity_id: binary_sensor.sensor_livingroom_beige_couch_fp2_occupancy
      state: 'on'
    - condition: state
      entity_id: binary_sensor.sensor_livingroom_matress_fp2_occupancy
      state: 'on'
  actions:
  - action: light.turn_on
    metadata: {}
    data:
      transition: 2
      brightness_pct: 1
    target:
      entity_id: light.livingroom_wall_light
  mode: single
- id: '1728311332778'
  alias: 'unDim Wall lights when livingroom TV is stopped '
  description: ''
  triggers:
  - trigger: state
    entity_id:
    - binary_sensor.sensor_livingroom_beige_couch_fp2_occupancy
    - binary_sensor.sensor_livingroom_matress_fp2_occupancy
    to: 'off'
  - trigger: state
    entity_id:
    - media_player.universal_livingroom_chromecast
    from:
    to: 'off'
  conditions:
  - condition: state
    entity_id: light.livingroom_wall_light
    state: 'on'
  - condition: or
    conditions:
    - condition: and
      conditions:
      - condition: state
        entity_id: binary_sensor.sensor_livingroom_beige_couch_fp2_occupancy
        state: 'off'
      - condition: state
        entity_id: binary_sensor.sensor_livingroom_matress_fp2_occupancy
        state: 'off'
    - condition: state
      entity_id: media_player.universal_livingroom_chromecast
      state: 'off'
  actions:
  - action: light.turn_on
    metadata: {}
    data:
      transition: 5
      brightness: '{{ state_attr("light.group_livingroom_lights", ''brightness'')
        / 2 }}

        '
    target:
      entity_id: light.livingroom_wall_light
  mode: single
- id: '1728390311720'
  alias: Turn Assist screens on when listening
  description: ''
  triggers:
  - entity_id:
    - assist_satellite.esp32_s3_box_kitchen_assistant_assist_satellite
    - assist_satellite.saloon_assistant_assist_satellite
    - assist_satellite.hallway_assistant_assist_satellite
    - assist_satellite.hotbox_assistant_assist_satellite
    - assist_satellite.office_assistant_assist_satellite
    - assist_satellite.lv_assistant_assist_satellite
    from:
    trigger: state
    to: listening
  conditions: []
  actions:
  - action: light.turn_on
    metadata: {}
    data: {}
    target:
      entity_id: '{{device_entities(device_id(trigger.entity_id)) | select("match",
        ".*light.*") | first }}'
  mode: single
- id: '1728390398785'
  alias: Turn off Assists screens when done listening
  description: ''
  triggers:
  - entity_id:
    - assist_satellite.esp32_s3_box_kitchen_assistant_assist_satellite
    - assist_satellite.saloon_assistant_assist_satellite
    - assist_satellite.hallway_assistant_assist_satellite
    - assist_satellite.hotbox_assistant_assist_satellite
    - assist_satellite.office_assistant_assist_satellite
    - assist_satellite.lv_assistant_assist_satellite
    from:
    trigger: state
    to: idle
  conditions:
  - condition: template
    value_template: '{{ area_id(trigger.entity_id) | replace(''_top'','''') | replace(''_down'','''')
      in states(''sensor.active_sleeper_rooms'') | string  }}'
  actions:
  - action: light.turn_off
    metadata: {}
    data: {}
    target:
      entity_id: '{{device_entities(device_id(trigger.entity_id)) | select("match",
        ".*light.*") | first }}'
  mode: single
- id: '1729462034192'
  alias: Display room color  on TVs when mimiclights mode is triggered
  description: ''
  triggers:
  - trigger: state
    entity_id:
    - input_boolean.mimic_lights_on_screens
    from:
    to:
  conditions: []
  actions:
  - choose:
    - conditions:
      - condition: state
        entity_id: input_boolean.mimic_lights_on_screens
        state: 'on'
      sequence:
      - variables:
          off_chromecasts: '{{integration_entities(''cast'')  |  select(''search'',
            ''chromecast'') |

            select(''is_state'',''off'')| list}}

            '
      - repeat:
          sequence:
          - variables:
              room: '{{ repeat.item | replace("media_player.","") | replace("_chromecast","")
                }}

                '
          - action: cast.show_lovelace_view
            metadata: {}
            data:
              entity_id: '{{repeat.item}}'
              dashboard_path: color-hubs
              view_path: '{{room}}'
          for_each: '{{ off_chromecasts }}'
    - conditions:
      - condition: state
        entity_id: input_boolean.mimic_lights_on_screens
        state: 'off'
      sequence:
      - variables:
          off_chromecasts: '{{integration_entities(''cast'')  |  select(''search'',
            ''chromecast'') |

            select(''is_state'',''playing'')| list |  expand |  select(''search'',
            ''Color Hubs'')  | map(attribute=''entity_id'') |list }}

            '
      - repeat:
          sequence:
          - action: media_player.turn_off
            metadata: {}
            data: {}
            target:
              entity_id: '{{repeat.item}}'
          for_each: '{{ off_chromecasts }}'
  mode: single
- id: '1729518874101'
  alias: Turn off the front door light in relation to the sun position
  description: ''
  triggers:
  - trigger: state
    entity_id:
    - sun.sun
    from:
    to: above_horizon
    for:
      hours: 0
      minutes: 15
      seconds: 0
  conditions: []
  actions:
  - action: light.turn_off
    metadata: {}
    data:
      transition: 300
    target:
      entity_id: light.front_door_light
  mode: single
- id: '1729519649402'
  alias: Front door automation on unlock for conditional codes
  description: ''
  triggers:
  - entity_id:
    - lock.lock_front_door
    trigger: state
    attribute: action
    to: unlock_failure_invalid_schedule
    for:
      hours: 0
      minutes: 0
      seconds: 1
  conditions:
  - alias: Was the door unlocked?
    condition: template
    value_template: '{{  states(''sensor.lock_front_door_action_source_name'') ==
      ''keypad'' }}'
  - condition: state
    entity_id: person.maximiliano
    state: home
  actions:
  - variables:
      action_id: '{{ states(''sensor.lock_front_door_action_user'') }}

        '
      user_opening: "{% if action_id | string == '1' %}\n  Maxi\n{% elif action_id
        | string == '9' %}\n  Ré\n{% else %}\n Unknown\n{% endif %}\n"
  - choose:
    - conditions:
      - condition: template
        value_template: '{{ "Unknown" in user_opening  }}'
      sequence:
      - metadata: {}
        data:
          message: 'A stranger is trying to open the door

            '
          color: blue
        action: script.broadcast_alert_in_the_house
      alias: Unknown code
    - conditions:
      - condition: template
        value_template: '{{ "Unknown" not in user_opening  }}'
      sequence:
      - action: lock.unlock
        target:
          entity_id: lock.lock_front_door
        data: {}
      - metadata: {}
        data:
          message: '{{ user_opening }} has arrived

            '
          color: cyan
        action: script.broadcast_alert_in_the_house
      alias: Known code
  mode: single
- id: '1729698675763'
  alias: Notify when someone leaves through front door
  description: ''
  triggers:
  - entity_id:
    - lock.lock_front_door
    trigger: state
    attribute: action
    to: manual_unlock
  conditions:
  - alias: Was the door unlocked?
    condition: template
    value_template: '{{ trigger.to_state.attributes.action == ''manual_unlock''  }}'
  actions:
  - action: script.non_important_broadcast_alert_in_the_house
    metadata: {}
    data:
      color: green
  mode: single
- id: '1729698938654'
  alias: Alert maxi if someone enters his room while alarm is set to armed home
  description: ''
  triggers:
  - trigger: state
    entity_id:
    - binary_sensor.sensor_bedroom_door_contact
    from: 'off'
    to: 'on'
  - trigger: state
    entity_id:
    - binary_sensor.sensor_bedroom_motion_occupancy
    from: 'off'
    to: 'on'
  conditions:
  - condition: state
    entity_id: alarm_control_panel.home_alarm
    state: armed_home
  actions:
  - action: notify.mobile_app_phone_maxi
    data:
      message: Someone has entered the bedroom
      title: Security Alert
      data:
        ttl: 0
        priority: high
        channel: security_alerts_notifications
  - action: tts.speak
    metadata: {}
    data:
      cache: true
      media_player_entity_id: media_player.universal_bedroom_speakers
      message: Please leave this room immediately.
    target:
      entity_id: tts.piper
  - wait_for_trigger:
    - trigger: state
      entity_id:
      - binary_sensor.group_bedroom_motion_occupancy
      from: 'on'
      to: 'off'
      for:
        hours: 0
        minutes: 5
        seconds: 0
    continue_on_timeout: false
  mode: restart
- id: '1730428380200'
  alias: Assist Show cameras on TVs
  description: ''
  triggers:
  - trigger: conversation
    command:
    - '[Show] [me] [the] cameras  [on] [the] [tvs] [please]'
    - Security Audit
    - '[Put] [the] cameras [on] [the] [tvs]'
  conditions: []
  actions:
  - variables:
      all_chromecasts: '{{ integration_entities(''cast'') |  select(''search'', ''chromecast'')
        | expand |  map(attribute=''entity_id'')| list }}'
  - alias: Broadcast Image to paused chromecasts
    repeat:
      sequence:
      - action: dash_cast.load_url
        data:
          entity_id: '{{all_chromecasts[repeat.index - 1]}}'
          url: http://192.168.0.11:1984/stream.html?src=front_door_camera_sub
          force: true
      for_each: '{{ all_chromecasts }}'
  mode: single
- id: '1730910881566'
  alias: Show main screen when music stops on Hallway tablet
  description: ''
  triggers:
  - trigger: state
    entity_id:
    - media_player.group_mass_home_group_speakers
    to: 'off'
    for:
      hours: 0
      minutes: 1
      seconds: 0
  conditions:
  - condition: or
    conditions:
    - condition: state
      entity_id: sensor.hallway_tablet_current_page
      attribute: full_url
      state: http://192.168.0.15:8123/tablets-subviews/subview-music#camera_motion_detected
    - condition: state
      entity_id: sensor.hallway_tablet_current_page
      attribute: full_url
      state: http://192.168.0.15:8123/tablets-subviews/subview-music
  actions:
  - action: button.press
    metadata: {}
    data: {}
    target:
      entity_id: button.hallway_tablet_load_start_url
  mode: single
- id: '1731345211107'
  alias: Alert if the front door remains unlocked for too long
  description: ''
  triggers:
  - entity_id:
    - lock.lock_front_door
    to: unlocked
    for:
      hours: 0
      minutes: 6
      seconds: 0
    trigger: state
  conditions: []
  actions:
  - repeat:
      sequence:
      - action: script.broadcast_alert_in_the_house
        data:
          message: Front Lock has remained unlocked
          color: yellow
      - metadata: {}
        data:
          title: 'Front door alert:'
          data:
            ttl: 0
            priority: high
            channel: security_alerts_notifications
          message: Front door is currently unlocked
        action: notify.mobile_app_phone_maxi
      - delay:
          hours: 0
          minutes: 3
          seconds: 0
          milliseconds: 0
      while:
      - condition: state
        entity_id: lock.lock_front_door
        state: unlocked
    enabled: true
  mode: restart
- id: '1731514999187'
  alias: 'Alert maxi when people are too noisy on the patio during a party '
  description: ''
  triggers:
  - trigger: state
    entity_id:
    - binary_sensor.noise_ffmpeg_5
    to: 'on'
    from: 'off'
    for:
      hours: 0
      minutes: 0
      seconds: 30
  conditions:
  - condition: state
    entity_id: binary_sensor.group_patio_motion_occupancy
    state: 'on'
  actions:
  - choose:
    - conditions:
      - condition: state
        entity_id: person.maximiliano
        state: home
      - condition: state
        entity_id: input_boolean.party_mode
        state: 'on'
      sequence:
      - action: notify.mobile_app_phone_maxi
        metadata: {}
        data:
          message: People are being too noisy on the patio
          title: Noise alert
  - choose:
    - conditions:
      - condition: state
        entity_id: person.maximiliano
        state: not_home
      sequence:
      - action: script.non_important_broadcast_alert_in_the_house
        data:
          message: Please make less noise on the patio
  mode: single
- id: '1731515407976'
  alias: Sleep actions when "sleeper in patio" is turned on
  description: ''
  triggers:
  - entity_id:
    - input_boolean.sleeper_in_patio
    to: 'on'
    from: 'off'
    trigger: state
  conditions: []
  actions:
  - action: light.turn_off
    metadata: {}
    data:
      transition: 2
    target:
      area_id: patio
      entity_id: light.group_patio_lights
  mode: single
- id: '1731515445191'
  alias: Undo Sleep actions when "sleeper in patio" is turned off
  description: ''
  triggers:
  - entity_id:
    - input_boolean.sleeper_in_patio
    to: 'off'
    from: 'on'
    trigger: state
    for:
      hours: 0
      minutes: 0
      seconds: 5
  conditions: []
  actions:
  - action: light.turn_on
    metadata: {}
    data:
      transition: 45
    target:
      entity_id: light.group_patio_lights
  mode: single
- id: '1731610772963'
  alias: Alert when the stove water is boiling.
  description: ''
  triggers:
  - entity_id:
    - sensor.sensor_stove_temperature_humidity
    above: 75
    trigger: numeric_state
  conditions:
  - condition: state
    entity_id: binary_sensor.maxi_sleeping
    state: 'off'
  - condition: state
    entity_id: binary_sensor.all_present_sleeping
    state: 'off'
  - condition: state
    entity_id: input_boolean.cooking_mode
    state: 'off'
  actions:
  - repeat:
      sequence:
      - action: script.non_important_broadcast_alert_in_the_house
        data:
          message: The water is boiling in the Kitchen
      - delay:
          hours: 0
          minutes: 4
          seconds: 0
          milliseconds: 0
      - condition: state
        entity_id: binary_sensor.group_kitchen_motion_occupancy
        state: 'off'
        for:
          hours: 0
          minutes: 3
          seconds: 0
      while:
      - condition: state
        entity_id: binary_sensor.group_kitchen_motion_occupancy
        state: 'off'
    enabled: true
  mode: restart
- id: '1731610964007'
  alias: Alert when the fridge remains open
  description: ''
  triggers:
  - entity_id:
    - binary_sensor.sensor_fridge_door_contact
    trigger: state
    to: 'on'
    for:
      hours: 0
      minutes: 4
      seconds: 0
  conditions: []
  actions:
  - repeat:
      sequence:
      - action: script.broadcast_alert_in_the_house
        data:
          message: The Fridge door is open, please close it.
      - delay:
          hours: 0
          minutes: 4
          seconds: 0
          milliseconds: 0
      while:
      - condition: state
        entity_id: binary_sensor.sensor_fridge_door_contact
        state: 'on'
    enabled: true
  mode: restart
- id: '1731611005918'
  alias: Alert house-wide when there is smoke in the kitchen
  description: ''
  triggers:
  - entity_id:
    - binary_sensor.sensor_kitchen_smoke_detector_smoke
    trigger: state
    to: 'on'
    for:
      hours: 0
      minutes: 0
      seconds: 0
    from:
  conditions: []
  actions:
  - repeat:
      sequence:
      - action: script.broadcast_alert_in_the_house
        data:
          color: white
          message: Attention, Smoke detected in the kitchen, Please investigate.
      - metadata: {}
        data:
          title: Smoke has been detected in the kitchen! Act quickly!
          data:
            image: /api/camera_proxy/camera.kitchen_tablet
            actions:
            - action: open_phone_app_911
              title: Call 911!
            ttl: 0
            priority: high
            channel: security_alerts_notifications
          message: Smoke detected in the kitchen
        action: notify.mobile_app_phone_maxi
      - delay:
          hours: 0
          minutes: 4
          seconds: 0
          milliseconds: 0
      while:
      - condition: state
        entity_id: binary_sensor.sensor_kitchen_smoke_detector_smoke
        state: 'on'
    enabled: true
  mode: restart
- id: '1731611467781'
  alias: Alert when Cooking timer is finished
  description: ''
  triggers:
  - trigger: state
    entity_id:
    - timer.cooking
    from: active
    to: idle
  conditions: []
  actions:
  - repeat:
      sequence:
      - action: script.non_important_broadcast_alert_in_the_house
        data:
          message: Kitchen Timer Finished!
      - delay:
          hours: 0
          minutes: 4
          seconds: 0
          milliseconds: 0
      while:
      - condition: state
        entity_id: binary_sensor.group_kitchen_motion_occupancy
        state: 'off'
    enabled: true
  mode: single
- id: '1731636350020'
  alias: Auto vacuum the entrance
  description: ''
  triggers:
  - trigger: state
    entity_id:
    - lock.lock_front_door
    to: unlocked
  conditions:
  - condition: numeric_state
    entity_id: counter.entries_since_last_vacuuming
    above: 4
  - condition: state
    entity_id: input_boolean.party_mode
    state: 'off'
  - condition: state
    entity_id: input_boolean.acid_time
    state: 'off'
  - condition: state
    entity_id: input_boolean.kink_party
    state: 'off'
  actions: []
  mode: single
- id: '1731941986104'
  alias: Trigger back horn when someone loiters for too long at the door
  description: Flash the red lights in the back while people are loitering
  triggers:
  - entity_id:
    - binary_sensor.back_door_loitering_person_occupancy
    to: 'on'
    from:
    for:
      hours: 0
      minutes: 1
      seconds: 0
    trigger: state
  conditions:
  - condition: not
    conditions:
    - condition: state
      entity_id: alarm_control_panel.home_alarm
      state: disarmed
  actions:
  - action: switch.turn_on
    metadata: {}
    data: {}
    target:
      entity_id: switch.plug_back_door_horn
  - metadata: {}
    data:
      data:
        image: /api/camera_proxy/camera.back_door_camera
        ttl: 0
        priority: high
        channel: security_alerts_notifications
      message: Trying to scare the loiterers away with horn
      title: Security Alert!
    action: notify.mobile_app_phone_maxi
  - wait_for_trigger:
    - entity_id:
      - binary_sensor.back_door_camera_person_occupancy
      to: 'off'
      for:
        hours: 0
        minutes: 0
        seconds: 30
      trigger: state
    timeout:
      hours: 0
      minutes: 15
      seconds: 0
      milliseconds: 0
    continue_on_timeout: true
  - action: switch.turn_off
    metadata: {}
    data: {}
    target:
      entity_id: switch.plug_back_door_horn
  mode: single
- id: '1731942818929'
  alias: Turn off Horns on Alarm disarm
  description: ''
  triggers:
  - entity_id:
    - alarm_control_panel.home_alarm
    from: triggered
    to: disarmed
    trigger: state
  conditions: []
  actions:
  - action: switch.turn_off
    metadata: {}
    data: {}
    target:
      entity_id:
      - switch.plug_back_door_horn
      - switch.plug_front_door_horn
  mode: single
- id: '1732291871329'
  alias: Sleep actions when "maxi is sleeping" is turned on anywhere
  description: Close the blinds, turn off the lights and turn on the sleep mode of
    Adaptative lighting
  triggers:
  - entity_id:
    - binary_sensor.maxi_sleeping
    to: 'on'
    for:
      hours: 0
      minutes: 5
      seconds: 0
    trigger: state
  conditions: []
  actions:
  - action: notify.mobile_app_phone_maxi
    metadata: {}
    data:
      message: command_dnd
      data:
        command: priority_only
    alias: Set maxi phone to DND Priority Only
    enabled: true
  - alias: Set maxi phone brightness to 1%
    action: notify.mobile_app_phone_maxi
    metadata: {}
    data:
      message: command_screen_brightness_level
      data:
        command: 5
  mode: restart
- id: '1732293937510'
  alias: Undo sleeping actions for Maxi when he awakes
  description: Close the blinds, turn off the lights and turn on the sleep mode of
    Adaptative lighting
  triggers:
  - entity_id:
    - binary_sensor.maxi_sleeping
    to: 'off'
    for:
      hours: 0
      minutes: 15
      seconds: 0
    trigger: state
  conditions: []
  actions:
  - alias: Set maxi phone to DND off
    action: notify.mobile_app_phone_maxi
    metadata: {}
    data:
      message: command_dnd
      data:
        command: 'off'
  - alias: Set maxi phone brightness to automatic
    action: notify.mobile_app_phone_maxi
    metadata: {}
    data:
      message: command_auto_screen_brightness
      data:
        command: turn_on
  mode: restart
- id: '1732294056055'
  alias: Turn on Phone Bluetooth emitter when maxi arrives home
  description: ''
  triggers:
  - trigger: state
    entity_id:
    - person.maximiliano
    from:
    to: home
  conditions: []
  actions:
  - action: notify.mobile_app_phone_maxi
    metadata: {}
    data:
      message: command_ble_transmitter
      data:
        command: turn_on
  mode: single
- id: '1732294106703'
  alias: Turn off Phone Bluetooth emitter when maxi leaves home
  description: ''
  triggers:
  - trigger: state
    entity_id:
    - person.maximiliano
    from:
    to: not_home
  conditions: []
  actions:
  - action: notify.mobile_app_phone_maxi
    metadata: {}
    data:
      message: command_ble_transmitter
      data:
        command: turn_off
  mode: single
- id: '1732406375683'
  alias: Lower volume if police is detected in the front during a party
  description: ''
  triggers:
  - trigger: numeric_state
    entity_id:
    - sensor.front_door_camera_person_count
    above: 0
  conditions:
  - condition: numeric_state
    entity_id: sensor.average_unmuted_speakers_volume
    above: 0.4
  - condition: state
    entity_id: input_boolean.party_mode
    state: 'on'
  actions:
  - action: llmvision.image_analyzer
    data:
      include_filename: false
      target_width: 1280
      detail: low
      max_tokens: 100
      temperature: 0.2
      expose_images: true
      provider: 01JDD7V3QXP1KN82V27H591YAX
      model: maxi_llama32-vision
      message: '  Answer with ''yes'' or ''no'', is there a police officer or a security
        guard on this image? Only use one word to answer'
      image_entity:
      - camera.front_door_camera
    response_variable: answer
    alias: Analyse if a cop is present
  - if:
    - condition: template
      value_template: '{{ "YES" in answer.reponse_text | upper }}'
    then:
    - metadata: {}
      data:
        data:
          image: 'https://hass.purgatoire.ca/local/llmvision/front_door_camera.jpg

            '
        message: Police detected at the front door
        title: Police Alert
      action: notify.mobile_app_phone_maxi
    - action: media_player.volume_set
      metadata: {}
      data:
        volume_level: 0.3
      target:
        entity_id:
        - media_player.universal_hallway_speakers
        - media_player.universal_livingroom_speakers
        - media_player.universal_kitchen_speakers
        - media_player.universal_salon_speakers
        - media_player.universal_office_speakers
    - action: media_player.volume_set
      metadata: {}
      data:
        volume_level: 0.28
      target:
        entity_id: media_player.group_mass_home_group_speakers
    alias: Lower volume if a cop is present and notify maxi
  mode: single
- id: '1732911162102'
  alias: Assist Trigger find my phone
  description: ''
  triggers:
  - command:
    - where is my phone
    - find my phone
    - phone now
    trigger: conversation
  conditions: []
  actions:
  - action: google_assistant_sdk.send_text_command
    data:
      command: where is my phone?
  mode: single
- id: '1732990123635'
  alias: Assist Equalize volume in the house
  description: ''
  triggers:
  - trigger: conversation
    command:
    - equalize the volume
    - normalize the volume
  conditions: []
  actions:
  - variables:
      average_volume: '{{ states(''sensor.average_unmuted_speakers_volume'')}}'
      unmuted_speakers: '{{ state_attr(''sensor.active_speakers_rooms'',''unmuted_rooms'')}}'
  - choose:
    - conditions:
      - condition: state
        entity_id: input_boolean.following_music
        state: 'off'
      sequence:
      - action: media_player.volume_set
        metadata: {}
        data:
          volume_level: '{{average_volume}}'
        target:
          entity_id:
          - media_player.universal_hallway_speakers
          - media_player.universal_kitchen_speakers
          - media_player.universal_salon_speakers
          - media_player.universal_office_speakers
          - media_player.universal_livingroom_speakers
          - media_player.universal_hotbox_speakers
    - conditions:
      - condition: state
        entity_id: input_boolean.following_music
        state: 'on'
      sequence:
      - repeat:
          sequence:
          - action: media_player.volume_set
            metadata: {}
            data:
              volume_level: '{{average_volume}}'
            target:
              entity_id: '{{ "media_player.universal_" + unmuted_speakers[repeat.index
                - 1] + "_speakers" }}

                '
          for_each: '{{ unmuted_speakers }}'
  mode: single
- id: '1733533239694'
  alias: Assist quick color change phrase
  description: ''
  triggers:
  - command:
    - lights {color}
    trigger: conversation
  conditions: []
  actions:
  - variables:
      room: '{{area_name(trigger.device_id) | lower}}

        '
  - action: light.turn_on
    metadata: {}
    data:
      color_name: '{{trigger.slots.color}}'
    target:
      area_id: '{{room }}'
  mode: single
- id: '1733597890338'
  alias: kitchen google display automation
  description: ''
  triggers:
  - trigger: time_pattern
    minutes: /45
  - trigger: state
    entity_id:
    - media_player.kitchen_google_hub
    to: 'off'
    for:
      hours: 0
      minutes: 1
      seconds: 0
  conditions:
  - condition: or
    conditions:
    - condition: state
      entity_id: media_player.kitchen_google_hub
      attribute: app_name
      state: DashCast
    - condition: state
      entity_id: media_player.kitchen_google_hub
      state: 'off'
    - condition: state
      entity_id: media_player.kitchen_google_hub
      state: idle
  actions:
  - action: media_player.volume_set
    metadata: {}
    data:
      volume_level: 0
    target:
      entity_id: media_player.kitchen_google_hub
  - metadata: {}
    data: {}
    action: media_player.turn_off
    target:
      entity_id: media_player.kitchen_google_hub
  - action: dash_cast.load_url
    data:
      entity_id: media_player.kitchen_google_hub
      url: http://192.168.0.15:8123/lovelace-hub/kitchen-google-hub?kiosk
      force: true
  mode: single
- id: '1733789430500'
  alias: Turn on the front door light in relation to the sun position
  description: ''
  triggers:
  - trigger: state
    entity_id:
    - sun.sun
    from:
    to: below_horizon
    for:
      hours: 0
      minutes: 1
      seconds: 0
  conditions: []
  actions:
  - repeat:
      sequence:
      - action: light.turn_on
        metadata: {}
        data:
          transition: 20
          kelvin: 3597
          brightness_pct: 100
        target:
          entity_id: light.front_door_light
      - delay:
          hours: 0
          minutes: 30
          seconds: 0
          milliseconds: 0
      while:
      - condition: state
        entity_id: sun.sun
        state: below_horizon
      - condition: or
        conditions:
        - condition: numeric_state
          entity_id: light.front_door_light
          attribute: brightness
          below: 50
        - condition: state
          entity_id: light.front_door_light
          state: 'off'
  mode: single
- id: '1733790164217'
  alias: Set Wallpaper engine colors to match the lights
  description: ''
  triggers:
  - trigger: state
    entity_id:
    - sensor.hotbox_lights_color
  conditions: []
  actions:
  - variables:
      red: '{{ (((states(''sensor.hotbox_lights_color'') | string).split('','').0.replace("(","")
        | int / 255 )| string)[:4] }}

        '
      green: '{{ (((states(''sensor.hotbox_lights_color'') | string).split('','').1
        | int / 255 )| string)[:4] }}

        '
      blue: '{{ (((states(''sensor.hotbox_lights_color'') | string).split('','').2.replace(")","")
        | int / 255 )| string)[:4] }}

        '
  - action: mqtt.publish
    metadata: {}
    data:
      qos: 0
      retain: false
      topic: homeassistant/button/DESKTOP_MAXI/custom/action
      payload: '%wpe% -control applyProperties -properties RAW~({"schemecolor":"{{red}}
        {{green}} {{blue}}"})~END'
    enabled: true
  - action: mqtt.publish
    metadata: {}
    data:
      qos: 0
      retain: false
      topic: homeassistant/button/DESKTOP_MAXI/custom/action
      payload: '%wpe% -control applyProperties -properties RAW~({"wavecolorleft":"{{red}}
        {{green}} {{blue}}"})~END'
    enabled: true
  - action: mqtt.publish
    metadata: {}
    data:
      qos: 0
      retain: false
      topic: homeassistant/button/DESKTOP_MAXI/custom/action
      payload: '%wpe% -control applyProperties -properties RAW~({"wavecolor":"{{red}}
        {{green}} {{blue}}"})~END'
    enabled: true
  - action: mqtt.publish
    metadata: {}
    data:
      qos: 0
      retain: false
      topic: homeassistant/button/DESKTOP_MAXI/custom/action
      payload: '%wpe% -control applyProperties -properties RAW~({"e9Color1":"{{red}}
        {{green}} {{blue}}"})~END'
    enabled: true
  - action: mqtt.publish
    metadata: {}
    data:
      qos: 0
      retain: false
      topic: homeassistant/button/DESKTOP_MAXI/custom/action
      payload: '%wpe% -control applyProperties -properties RAW~({"e9Color2":"{{red}}
        {{green}} {{blue}}"})~END'
    enabled: true
  - action: mqtt.publish
    metadata: {}
    data:
      qos: 0
      retain: false
      topic: homeassistant/button/DESKTOP_MAXI/custom/action
      payload: '%wpe% -control applyProperties -properties RAW~({"e9Color3":"{{red}}
        {{green}} {{blue}}"})~END'
    enabled: true
  - action: mqtt.publish
    metadata: {}
    data:
      qos: 0
      retain: false
      topic: homeassistant/button/DESKTOP_MAXI/custom/action
      payload: '%wpe% -control applyProperties -properties RAW~({"e9Color4":"{{red}}
        {{green}} {{blue}}"})~END'
    enabled: true
  - action: mqtt.publish
    metadata: {}
    data:
      qos: 0
      retain: false
      topic: homeassistant/button/DESKTOP_MAXI/custom/action
      payload: '%wpe% -control applyProperties -properties RAW~({"apple":"{{red}}
        {{green}} {{blue}}"})~END'
    enabled: true
  mode: restart
- id: '1734282252470'
  alias: Assist Unmute ESP32 endpoints when room is occupied
  description: 'This one uses motion groups '
  triggers:
  - entity_id:
    - binary_sensor.group_office_motion_occupancy
    - binary_sensor.group_hallway_motion_occupancy
    - binary_sensor.group_kitchen_motion_occupancy
    - binary_sensor.group_hotbox_top_motion_occupancy
    - binary_sensor.group_livingroom_motion_occupancy
    - binary_sensor.group_hotbox_down_motion_occupancy
    - binary_sensor.group_patio_motion_occupancy
    - binary_sensor.group_closet_motion_occupancy
    - binary_sensor.group_server_motion_occupancy
    - binary_sensor.group_bathroom_motion_occupancy
    - binary_sensor.group_bedroom_motion_occupancy
    - binary_sensor.group_entrance_motion_occupancy
    - binary_sensor.group_workstation_motion_occupancy
    - binary_sensor.group_salon_motion_occupancy
    for:
      hours: 0
      minutes: 0
      seconds: 0
    trigger: state
    to: 'on'
  conditions:
  - condition: template
    value_template: '{{ area_id(trigger.entity_id) | replace(''_top'','''') | replace(''_down'','''')
      not in states(''sensor.active_sleeper_rooms'') | string  }}'
    enabled: true
  actions:
  - variables:
      esp32_mute_entities: '{{([area_id(trigger.entity_id)]  | map(''area_entities'')
        | sum(start=[]) |select(''match'', ''switch.*mute$'') |  unique | list ) }}

        '
  - repeat:
      sequence:
      - metadata: {}
        data: {}
        target:
          entity_id: '{{esp32_mute_entities[repeat.index - 1]    }}'
        action: switch.turn_off
      for_each: '{{esp32_mute_entities}}'
  mode: parallel
  max: 25
- id: '1734282372322'
  alias: Assist mute ESP32 endpoints when room is unoccupied
  description: 'This one uses motion groups '
  triggers:
  - entity_id:
    - binary_sensor.group_office_motion_occupancy
    - binary_sensor.group_hallway_motion_occupancy
    - binary_sensor.group_kitchen_motion_occupancy
    - binary_sensor.group_hotbox_top_motion_occupancy
    - binary_sensor.group_livingroom_motion_occupancy
    - binary_sensor.group_hotbox_down_motion_occupancy
    - binary_sensor.group_patio_motion_occupancy
    - binary_sensor.group_closet_motion_occupancy
    - binary_sensor.group_server_motion_occupancy
    - binary_sensor.group_bathroom_motion_occupancy
    - binary_sensor.group_bedroom_motion_occupancy
    - binary_sensor.group_entrance_motion_occupancy
    - binary_sensor.group_workstation_motion_occupancy
    - binary_sensor.group_salon_motion_occupancy
    for:
      hours: 0
      minutes: 2
      seconds: 0
    trigger: state
    to: 'off'
  conditions: []
  actions:
  - variables:
      esp32_mute_entities: '{{([area_id(trigger.entity_id)]  | map(''area_entities'')
        | sum(start=[]) |select(''match'', ''switch.*mute$'') |  unique | list ) }}

        '
  - repeat:
      sequence:
      - metadata: {}
        data: {}
        target:
          entity_id: '{{esp32_mute_entities[repeat.index - 1]    }}'
        action: switch.turn_on
      for_each: '{{esp32_mute_entities}}'
  mode: parallel
  max: 25
- id: '1734282532788'
  alias: Assist turn off ESP32 endpoint screens when room is unoccupied
  description: 'This one uses motion groups '
  triggers:
  - entity_id:
    - binary_sensor.group_office_motion_occupancy
    - binary_sensor.group_hallway_motion_occupancy
    - binary_sensor.group_kitchen_motion_occupancy
    - binary_sensor.group_hotbox_top_motion_occupancy
    - binary_sensor.group_livingroom_motion_occupancy
    - binary_sensor.group_hotbox_down_motion_occupancy
    - binary_sensor.group_patio_motion_occupancy
    - binary_sensor.group_closet_motion_occupancy
    - binary_sensor.group_server_motion_occupancy
    - binary_sensor.group_bathroom_motion_occupancy
    - binary_sensor.group_bedroom_motion_occupancy
    - binary_sensor.group_entrance_motion_occupancy
    - binary_sensor.group_workstation_motion_occupancy
    - binary_sensor.group_salon_motion_occupancy
    for:
      hours: 0
      minutes: 1
      seconds: 45
    trigger: state
    to: 'off'
  conditions: []
  actions:
  - variables:
      esp32_screens_entities: '{{([area_id(trigger.entity_id)]  | map(''area_entities'')
        | sum(start=[]) |select(''match'', ''light.*backlight$'') |  unique | list
        ) }}

        '
  - repeat:
      sequence:
      - metadata: {}
        data: {}
        target:
          entity_id: '{{esp32_screens_entities[repeat.index - 1]    }}'
        action: switch.turn_off
      for_each: '{{esp32_screens_entities}}'
  mode: parallel
  max: 25
- id: '1734282569650'
  alias: Assist turn on ESP32 endpoint screens when room is occupied
  description: 'This one uses motion groups '
  triggers:
  - entity_id:
    - binary_sensor.group_office_motion_occupancy
    - binary_sensor.group_hallway_motion_occupancy
    - binary_sensor.group_kitchen_motion_occupancy
    - binary_sensor.group_hotbox_top_motion_occupancy
    - binary_sensor.group_livingroom_motion_occupancy
    - binary_sensor.group_hotbox_down_motion_occupancy
    - binary_sensor.group_patio_motion_occupancy
    - binary_sensor.group_closet_motion_occupancy
    - binary_sensor.group_server_motion_occupancy
    - binary_sensor.group_bathroom_motion_occupancy
    - binary_sensor.group_bedroom_motion_occupancy
    - binary_sensor.group_entrance_motion_occupancy
    - binary_sensor.group_workstation_motion_occupancy
    - binary_sensor.group_salon_motion_occupancy
    trigger: state
    to: 'on'
  conditions: []
  actions:
  - variables:
      esp32_screens_entities: '{{([area_id(trigger.entity_id)]  | map(''area_entities'')
        | sum(start=[]) |select(''match'', ''light.*backlight$'') |  unique | list
        ) }}

        '
  - repeat:
      sequence:
      - metadata: {}
        data: {}
        target:
          entity_id: '{{esp32_screens_entities[repeat.index - 1]    }}'
        action: switch.turn_on
      for_each: '{{esp32_screens_entities}}'
  mode: parallel
  max: 25
- id: '1734911416848'
  alias: Stop bathroom speaker when door opens
  description: ''
  triggers:
  - entity_id:
    - binary_sensor.sensor_bathroom_door_contact
    to: 'on'
    from: 'off'
    trigger: state
    for:
      hours: 0
      minutes: 0
      seconds: 5
  conditions: []
  actions:
  - choose:
    - conditions:
      - condition: state
        entity_id: binary_sensor.group_bathroom_motion_occupancy
        state: 'off'
      sequence:
      - action: media_player.turn_off
        metadata: {}
        data: {}
        target:
          entity_id: media_player.universal_bathroom_speakers
    - conditions:
      - condition: state
        entity_id: binary_sensor.group_bathroom_motion_occupancy
        state: 'on'
      sequence:
      - choose:
        - conditions:
          - condition: state
            entity_id: sensor.active_chromecast_rooms
            state: '[]'
          sequence:
          - action: media_player.volume_set
            metadata: {}
            data:
              volume_level: 0.2
            target:
              entity_id: media_player.universal_bathroom_speakers
        - conditions:
          - condition: not
            conditions:
            - condition: state
              entity_id: sensor.active_chromecast_rooms
              state: '[]'
            - condition: not
              conditions:
              - condition: state
                entity_id: sensor.active_speakers_rooms
                state: '[''bathroom'']'
          sequence:
          - action: media_player.turn_off
            metadata: {}
            data: {}
            target:
              entity_id: media_player.universal_bathroom_speakers
  mode: restart
- id: '1734912412449'
  alias: Turn off BAthroom fan when humidity falls
  description: ''
  triggers:
  - trigger: numeric_state
    entity_id:
    - sensor.sensor_bathroom_temperature_humidity
    below: 50
  conditions: []
  actions:
  - action: switch.turn_off
    metadata: {}
    data: {}
    target:
      entity_id: switch.bathroom_fan
  mode: single
- id: '1735277359392'
  alias: Open phone to 911 number when smoke "call 911" notification is pressed
  description: ''
  triggers:
  - event_type: mobile_app_notification_action
    context:
      user_id:
      - 7f1de31122574f6fa2215e519d6083ea
    event_data:
      action: open_phone_app_911
    trigger: event
  conditions: []
  actions:
  - action: notify.maxi_notification_group
    metadata: {}
    data:
      message: command_activity
      data:
        intent_package_name: com.samsung.android.dialer
        intent_action: android.intent.action.DIAL
        intent_uri: tel:911
  mode: single
- id: '1735346521960'
  alias: Automatically turn back door light back off
  description: ''
  triggers:
  - trigger: state
    entity_id:
    - light.back_door_light
    to: 'on'
    for:
      hours: 0
      minutes: 10
      seconds: 0
  conditions:
  - condition: state
    entity_id: binary_sensor.back_door_camera_person_occupancy
    state: 'off'
  actions:
  - action: light.turn_off
    metadata: {}
    data:
      transition: 60
    target:
      entity_id: light.back_door_light
  mode: single
- id: '1735682831028'
  alias: Raise bathroom volume when door closes
  description: ''
  triggers:
  - entity_id:
    - binary_sensor.sensor_bathroom_door_contact
    to: 'off'
    from: 'on'
    trigger: state
    for:
      hours: 0
      minutes: 0
      seconds: 0
  conditions: []
  actions:
  - action: media_player.volume_set
    metadata: {}
    data:
      volume_level: 0.53
    target:
      entity_id: media_player.universal_bathroom_speakers
  mode: restart
- id: '1736017695181'
  alias: Lower hotbox down light when maxi open his webcam
  description: ''
  triggers:
  - trigger: state
    entity_id:
    - binary_sensor.desktop_maxi_webcamactive
    from: 'off'
    to: 'on'
  conditions:
  - condition: state
    entity_id: light.hotbox_down_light
    state: 'on'
  - condition: numeric_state
    entity_id: light.hotbox_down_light
    attribute: brightness
    above: 30
  actions:
  - action: light.turn_on
    metadata: {}
    data:
      transition: 1
      brightness_pct: 29
      kelvin: 2780
    target:
      entity_id: light.hotbox_down_light
  mode: single
- id: '1736355787833'
  alias: Restart FFMPEG noise detection if it crashes
  description: ''
  triggers:
  - trigger: state
    entity_id:
    - binary_sensor.noise_ffmpeg_5
    from:
    to: unavailable
    for:
      hours: 0
      minutes: 0
      seconds: 10
  conditions: []
  actions:
  - action: ffmpeg.restart
    metadata: {}
    data: {}
  mode: single
- id: '1737729890470'
  alias: Speaker Automatic Volume v4
  description: Uses the script 'Speaker Automatic Volume Adjustment script'
  triggers:
  - entity_id:
    - media_player.universal_bathroom_speakers
    - media_player.universal_bedroom_speakers
    - media_player.universal_salon_speakers
    - media_player.universal_closet_speaker
    - media_player.universal_hallway_speakers
    - media_player.universal_kitchen_speakers
    - media_player.universal_office_speakers
    - media_player.universal_livingroom_speakers
    - media_player.universal_hotbox_speakers
    to: playing
    from:
    trigger: state
  conditions:
  - condition: template
    value_template: '{{ (now() - trigger.from_state.last_changed) > timedelta(seconds=120)}}'
    enabled: true
    alias: Only continue if non-playing for over 120 seconds
  actions:
  - variables:
      trigger_speaker: '{{ trigger.entity_id }}

        '
  - action: script.speaker_automatic_volume_adjustment_script
    metadata: {}
    data:
      received_speaker: '{{trigger_speaker}}

        '
  mode: parallel
  trace:
    stored_traces: 30
  max: 10
- id: '1737850261149'
  alias: alert maxi if someone goes into the hotbox during a party
  description: ''
  triggers:
  - trigger: state
    entity_id:
    - binary_sensor.sensor_hotbox_door_contact
    from: 'off'
    to: 'on'
  - trigger: state
    entity_id:
    - binary_sensor.group_hotbox_motion_occupancy
    from: 'off'
    to: 'on'
  conditions:
  - condition: state
    entity_id: alarm_control_panel.home_alarm
    state: armed_home
  actions:
  - action: notify.mobile_app_phone_maxi
    data:
      message: Someone has entered the hotbox
      title: Security Alert
      data:
        ttl: 0
        priority: high
        channel: security_alerts_notifications
  - action: tts.speak
    metadata: {}
    data:
      cache: false
      media_player_entity_id: media_player.universal_hotbox_speakers
      message: Please leave this room immediately.
    target:
      entity_id: tts.piper
  - wait_for_trigger:
    - trigger: state
      entity_id:
      - binary_sensor.group_hotbox_motion_occupancy
      to: 'off'
      from: 'on'
      for:
        hours: 0
        minutes: 5
        seconds: 0
    continue_on_timeout: false
  - action: media_player.turn_off
    metadata: {}
    data: {}
    target:
      entity_id: media_player.universal_hotbox_speakers
  mode: restart
- id: '1738085188825'
  alias: hotbox down dial automation
  description: ''
  use_blueprint:
    path: EPMatt/ikea_e1744.yaml
    input:
      integration: Zigbee2MQTT
      controller_entity: sensor.remote_hotbox_down_dial_action
      action_rotate_left:
      - variables:
          speaker: '{{ [area_id(trigger.event.data.entity_id)]     | map(''area_entities'')   |
            sum(start=[]) |    select(''search'', ''airplay'') |  expand   | selectattr(''attributes.is_volume_muted'',
            ''false'') |map(attribute=''entity_id'') | list}}

            '
          chromecast: '{{ [area_id(trigger.event.data.entity_id)]     | map(''area_entities'')   |
            sum(start=[]) |    select(''search'', ''chromecast'') |  expand   | selectattr(''attributes.is_volume_muted'',
            ''false'') |map(attribute=''entity_id'') | list}}

            '
          media_players: '{{ speaker + chromecast }}

            '
        alias: Find unmuted media players
      - choose:
        - conditions:
          - alias: Test if chromecast or speaker present
            condition: template
            value_template: '{{ ''speaker'' in media_players | string | lower  or
              ''chromecast'' in media_players |          string | lower }}'
            enabled: true
          sequence:
          - target:
              entity_id: '{{media_players}}'
            data_template:
              volume_level: '{{ state_attr((media_players | first),''volume_level'')
                - 0.03}}'
            action: media_player.volume_set
            enabled: true
          alias: Speaker playing and unmuted
      helper_last_controller_event: input_text.dial_hotbox_down_helper
      rotate_left_loop: true
      rotate_right_loop: true
      action_rotate_right:
      - variables:
          speaker: '{{ [area_id(trigger.event.data.entity_id)]     | map(''area_entities'')   |
            sum(start=[]) |    select(''search'', ''airplay'') |  expand   | selectattr(''attributes.is_volume_muted'',
            ''false'') |map(attribute=''entity_id'') | list}}

            '
          chromecast: '{{ [area_id(trigger.event.data.entity_id)]     | map(''area_entities'')   |
            sum(start=[]) |    select(''search'', ''chromecast'') |  expand   | selectattr(''attributes.is_volume_muted'',
            ''false'') |map(attribute=''entity_id'') | list}}

            '
          media_players: '{{ speaker + chromecast }}

            '
        alias: Find unmuted media players
      - choose:
        - conditions:
          - alias: Test if chromecast or speaker present
            condition: template
            value_template: "     {{ 'speaker' in media_players | string | lower  or
              'chromecast' in media_players |\n          string | lower }}"
            enabled: false
          sequence:
          - target:
              entity_id: '{{media_players}}'
            data_template:
              volume_level: '{{ state_attr((media_players | first),''volume_level'')
                + 0.02}}'
            action: media_player.volume_set
            enabled: true
          alias: Speaker playing and unmuted
      action_click_short:
      - variables:
          speaker: '{{ [area_id(trigger.event.data.entity_id)]     | map(''area_entities'')   |
            sum(start=[]) |    select(''search'', ''airplay'') |  expand   | selectattr(''attributes.is_volume_muted'',
            ''false'') |map(attribute=''entity_id'') | list}}

            '
          chromecast: '{{ [area_id(trigger.event.data.entity_id)]     | map(''area_entities'')   |
            sum(start=[]) |    select(''search'', ''chromecast'') |  expand   | selectattr(''attributes.is_volume_muted'',
            ''false'') |map(attribute=''entity_id'') | list}}

            '
          media_players: '{{ speaker + chromecast }}

            '
        alias: Find unmuted media players
      - metadata: {}
        data: {}
        target:
          entity_id: '{{media_players}}'
        action: media_player.media_play_pause
      action_click_triple:
      - variables:
          speaker: '{{ [area_id(trigger.event.data.entity_id)]     | map(''area_entities'')   |
            sum(start=[]) |    select(''search'', ''airplay'') |  expand   | selectattr(''attributes.is_volume_muted'',
            ''false'') |map(attribute=''entity_id'') | list}}

            '
          chromecast: '{{ [area_id(trigger.event.data.entity_id)]     | map(''area_entities'')   |
            sum(start=[]) |    select(''search'', ''chromecast'') |  expand   | selectattr(''attributes.is_volume_muted'',
            ''false'') |map(attribute=''entity_id'') | list}}

            '
          media_players: '{{ speaker + chromecast }}

            '
        alias: Find unmuted media players
      - metadata: {}
        data: {}
        target:
          entity_id: '{{media_players}}'
        action: media_player.turn_off
      rotate_left_max_loop_repeats: 60
      rotate_right_max_loop_repeats: 60
      helper_debounce_delay: 0
      action_click_double:
      - variables:
          speaker: '{{ [area_id(trigger.event.data.entity_id)]     | map(''area_entities'')   |
            sum(start=[]) |    select(''search'', ''airplay'') |  expand   | selectattr(''attributes.is_volume_muted'',
            ''false'') |map(attribute=''entity_id'') | list}}

            '
          chromecast: '{{ [area_id(trigger.event.data.entity_id)]     | map(''area_entities'')   |
            sum(start=[]) |    select(''search'', ''chromecast'') |  expand   | selectattr(''attributes.is_volume_muted'',
            ''false'') |map(attribute=''entity_id'') | list}}

            '
          media_players: '{{ speaker + chromecast }}

            '
        alias: Find unmuted media players
      - metadata: {}
        data: {}
        target:
          entity_id: '{{media_players}}'
        action: media_player.media_next_track
- id: '1738094823714'
  alias: Stop bathroom speaker when no motion and door open
  description: ''
  triggers:
  - trigger: state
    entity_id:
    - binary_sensor.group_bathroom_motion_occupancy
    to: 'off'
    for:
      hours: 0
      minutes: 3
      seconds: 0
  conditions:
  - condition: state
    entity_id: binary_sensor.sensor_bathroom_door_contact
    state: 'on'
  actions:
  - action: media_player.turn_off
    metadata: {}
    data: {}
    target:
      entity_id: media_player.universal_bathroom_speakers
  mode: restart
- id: '1738165564001'
  alias: Music Assistant LLM Automation MAXI FIX
  description: ''
  triggers:
  - alias: Trigger to request for music
    trigger: conversation
    command:
    - (play|listen to) {query}
  actions:
  - alias: Store input from blueprint in variables so they can be used in the prompt
    variables:
      expose_areas: true
      expose_players: true
      play_continuously: Use player settings
      area_names: '{{ integration_entities(''music_assistant'')  | map(''area_name'')
        | join('', '') }}'
      player_names: '{{ integration_entities(''music_assistant'') | map(''state_attr'',
        ''friendly_name'') | join('', '') }}'
  - alias: Send the request to the LLM
    action: conversation.process
    data:
      text: 'You are an AI process that transforms a music search query into a structured
        JSON.


        This is the voice command query provided by the user: "{{ trigger.sentence
        }}"


        Here is the structured JSON that I expect in response {"action_data": {"media_id":"name",
        "media_type":"type", "artist":"name", "album":"name"}, "media_description":
        "description of media", "target_data", {"areas": ["area name"], "players":
        ["player name"]}}


        The argument "media_type" is mandatory and must always be provided no matter
        what!

        "media_type" can only be one of 5 different values:

        - "track" if the search is about a specific track or a list of tracks.

        - "album" if the search is about an album or a list of albums.

        - "artist" if the search is about an artist.

        - "playlist" if the search specifically requests a playlist.

        - "radio" in case the search is a radio channel.

        media_type is mandatory and must always be provided. In case a request does
        not match any of these types, for example when music from a specific genre
        is requested, then use "track" and provide a list of matching songs for the
        "media_id" parameter.


        The argument "media_id" is also mandatory and must always be provided no matter
        what!

        media_id is the most specific from track, album, and artist.

        "track" and "artist" can be a single value or multiple values.

        - If the search is about a track: Then media_id is the track name or a json
        formatted list of track names. In case there are multiple artists in the result,
        use both the artist name and song name separated by a dash as track name (example:
        "Artist name - Song name"). In case all songs are from the same artist, use
        the artist for the "artist" parameter, and only use the song names as track
        name.

        - If the search is about an album: Then media_id is the album name or a json
        formatted list of album names.

        - If the search is about an artist: Then media_id is the artist name.

        - If the search is a specific playlist: Then media_id is the requested playlist.

        - If the search is a radio channel: Then media_id is the requested channel.

        "media_id" is a mandatory argument and must always be provided.


        If case it is needed, the fields "artist" and "album" can be used to further
        restrict the search.

        For example, if the input is "Hells Bells by ACDC", then the output should
        be {"media_id":"Hells Bells", "media_type":"track", "artist":"AC/DC"}

        "artist" and "album" are optional and never used in the case of a playlist
        search.


        There can be several types of answers for the "action_data" dictionary. Here
        are some examples:

        Just an artist >> {"media_id": "artist name", "media_type":"artist"}.

        An album by an artist >> {"media_id": "album name", "media_type": "album",
        "artist": "artist name"}.

        A track by an artist >> {"media_id": "track name", "media_type": "track",
        "artist": "artist name"}.

        Just a track if the artist is not known >> {"media_id": "track name", "media_type":
        "track"}.

        Just a playlist if the request is a specific playlist >> {"media_id":"playlist
        name", "media_type":"playlist"}.

        Multiple tracks of different artists >> {"media_id": ["Artist name - Song
        name", "Another artist name - Another song name", "Another artist name - Another
        song name"], "media_type":"track"}.

        Multiple tracks of the same artist >> {"media_id": ["Song name", "Another
        song name"], "artist": "artist name", "media_type":"track"}


        The "media_description" key is used to describe the media which will be played.
        This can be taken from the voice command query, but it should be only the
        part which is relevant for the media. So if the voice request is "Play the
        best Queen songs on the living room player" the value for "media_description"
        should be "the best Queen songs"


        The "target_data" key is used to define the information on which the request
        should be played.

        {% if expose_areas %}These are the area names which have a Music Assantant
        player: {{ area_names }}. Only use these area names for the "target_data".
        In case another area description is used in the request, try to map it to
        one of these area names." {% endif %}

        In case the query requests the music to be played in one or more areas {%
        if expose_areas %}in which a Music Assistant player is located{% endif %},
        use {"areas": ["area name"]} for "target_data". Always use a list with area
        names, even when there is only one. {% if expose_areas %}Try to match the
        areas mentioned in the request to the provided area names. Only use area names
        from the list provided. {% else %}Do not include articles like "the" at the
        start of the area name. So if the request is "Play music from Queen in the
        kitchen" use "kitchen" as area name. Besides removing the first article, use
        exactly what was provided in the request.{% endif %}When no area is mentioned
        in the voice request{% if expose_areas %} or no area could be matched{% endif
        %}, use {"areas":[]}

        {% if expose_players %}These are the Music Assistant players in the system:
        {{ player_names }}. Only use these names for the "target_data". In case another
        player name is mentioned in the request, try to map it to one of these player
        names.{% endif %}

        In case the query requests the music to be played on one or more media players,
        use {"players": ["player name"]} for "target_data". Always use a list with
        player names, even when there is only one. {% if expose_players %}Try to match
        the players mentioned in the request to the provided player names. Only use
        player names from the list provided. {% else %}Do not include articles like
        "the" at the start of the player name. So if the request is "Play music from
        Queen on the bedroom Sonos" use "bedroom Sonos" as area name. Besides removing
        the first article, use exactly what was provided in the request.{% endif %}When
        no player is mentioned in the voice  request{% if expose_players %} or no
        player could be matched {% endif %}, use {"players":[]}


        Note that the input query can be in a different language. For the "media_type"
        the untranslated English terms should be used, in case of a playlist search
        use the language used in the input.


        IMPORTANT: You must reply with only the JSON model, nothing before nor after
        because your response will be processed by a search component of a media player
        service. So also no code tags. Only the JSON! AND DO NOT PREPEND THE JSON
        CODE WITH json, just output from "{" to "}".'
      agent_id: conversation.maxi_mistral
    response_variable: result
  - alias: Store relevant part of LLM result in variable and define target
    variables:
      llm_result_temp: '{{ result.response.speech.plain.speech | replace(''json'','''')
        | replace(''```'','''') }}'
      llm_result: '{{ llm_result_temp | string | from_json}}'
      llm_action_data:
        media_id: '{{ llm_result.action_data.media_id }}'
        media_type: '{{ llm_result.action_data.media_type }}'
        artist: '{{ llm_result.action_data.artist | default(''NA'', true) }}'
        album: '{{ llm_result.action_data.album | default(''NA'', true) }}'
        radio_mode: '{{ false if play_continuously == ''Never'' else play_continuously
          == ''Always'' and llm_result.action_data.media_type != ''radio'' or ''NA''
          }}'
      llm_target_data:
        entity_id: '{% set players = llm_result.get(''target_data'', {}).get(''players'',
          []) %} {% set players = players | join(''|'') if players is list else players
          %} {{ integration_entities(''music_assistant'') | expand | selectattr(''name'',
          ''in'', player_names.split('', '') | select(''search'', players, ignorecase=true)
          | list) | map(attribute=''entity_id'') | list if players else [] }}'
        area_id: '{% set areas = llm_result.get(''target_data'', {}).get(''areas'',
          []) %} {% set areas = areas | join(''|'') if areas is list else areas %}
          {{ area_names.split('', '') | select(''search'', areas, ignorecase=true)
          | map(''area_id'') | list if areas else [] }}'
      llm_target: '{{ iif(llm_result.get(''target_data'', {}).get(''players'') or
        llm_result.get(''target_data'', {}).get(''areas'')) }}'
      device_area: '{{ area_id(trigger.device_id) if area_name(trigger.device_id)
        in area_names.split('', '') }}'
      default_player: media_player.group_mass_home_group_speakers
      backup_target: '{{ (dict(area_id=[device_area]) if device_area) or (dict(entity_id=[default_player])
        if default_player) }}'
      target_data: '{{ (llm_target_data if llm_target else backup_target) | default({},
        true) }}'
      target: '{{ dict(target_data.items() | selectattr(''1'')) }}'
  - alias: Store relevant part of LLM result in variable and define target
    variables:
      llm_result_temp: '{{ result.response.speech.plain.speech | replace(''json'','''')    }}'
      llm_result: '{{ llm_result_temp | string | from_json}}'
      llm_action_data:
        media_id: '{{ llm_result.action_data.media_id }}'
        media_type: '{{ llm_result.action_data.media_type }}'
        artist: '{{ llm_result.action_data.artist | default(''NA'', true) }}'
        album: '{{ llm_result.action_data.album | default(''NA'', true) }}'
        radio_mode: '{{ false if play_continuously == ''Never'' else play_continuously
          == ''Always'' and llm_result.action_data.media_type != ''radio'' or ''NA''
          }}'
      llm_target_data:
        entity_id: '{% set players = llm_result.get(''target_data'', {}).get(''players'',
          []) %} {% set players = players | join(''|'') if players is list else players
          %} {{ integration_entities(''music_assistant'') | expand | selectattr(''name'',
          ''in'', player_names.split('', '') | select(''search'', players, ignorecase=true)
          | list) | map(attribute=''entity_id'') | list if players else [] }}'
        area_id: '{% set areas = llm_result.get(''target_data'', {}).get(''areas'',
          []) %} {% set areas = areas | join(''|'') if areas is list else areas %}
          {{ area_names.split('', '') | select(''search'', areas, ignorecase=true)
          | map(''area_id'') | list if areas else [] }}'
      llm_target: '{{ iif(llm_result.get(''target_data'', {}).get(''players'') or
        llm_result.get(''target_data'', {}).get(''areas'')) }}'
      device_area: '{{ area_id(trigger.device_id) if area_name(trigger.device_id)
        in area_names.split('', '') }}'
      default_player: media_player.group_mass_home_group_speakers
      backup_target: '{{ (dict(area_id=[device_area]) if device_area) or (dict(entity_id=[default_player])
        if default_player) }}'
      target_data: '{{ (llm_target_data if llm_target else backup_target) | default({},
        true) }}'
      target: '{{ dict(target_data.items() | selectattr(''1'')) }}'
    enabled: false
  - alias: Only try to play music when target was determined
    if:
    - alias: Check if it was possible to determine a target
      condition: template
      value_template: '{{ iif(target) }}'
    then:
    - alias: Play Music based on LLM result
      action: music_assistant.play_media
      data: '{{ dict(llm_action_data.items() | rejectattr(''1'', ''eq'', ''NA''))
        }}'
      target: '{{ target }}'
  - alias: Set variables for responses
    variables:
      combine: and
      responses:
        no_target: No target could be determined and no default player is set
        only_area: Now playing <media_info> in <area_info>
        only_player: Now playing <media_info> on <player_info>
        area_player: Now playing <media_info> in <area_info> and on <player_info>
      response: '{% if iif(target.get(''area_id'') and target.get(''entity_id''))
        %} area_player {% elif iif(target.get(''area_id'')) %} only_area {% elif iif(target.get(''entity_id''))
        %} only_player {% else %} no_target {% endif %}'
      only_device_area: '{{ target.get(''area_id'', []) == [device_area] }}'
      area_list: '{{ [] if only_device_area else target.get(''area_id'', []) | map(''area_name'')
        | list }}'
      area_info: '{{ area_list[:-1] | join('', '') ~ '' '' ~ combine ~ '' '' ~ area_list[-1]
        if area_list | count > 2 else area_list | join('' '' ~ combine ~ '' '') }}'
      player_list: '{{ target.get(''entity_id'') | map(''state_attr'', ''friendly_name'')
        | list }}'
      player_info: '{{ player_list[:-1] | join('', '') ~ '' '' ~ combine ~ '' '' ~
        player_list[-1] if player_list | count > 2 else player_list | join('' '' ~
        combine ~ '' '') }}'
      media_info: '{{ llm_result.media_description }}'
  - alias: Set response for Assist
    set_conversation_response: '{{ responses[response] | replace(''<media_info>'',
      media_info) | replace(''<area_info>'', area_info) | replace(''<player_info>'',
      player_info) }}'
  mode: parallel
- id: '1738198899369'
  alias: Assist identify the device
  description: ''
  triggers:
  - trigger: conversation
    command:
    - who are you
    - what is your name
    - what is your identity
  conditions: []
  actions:
  - action: assist_satellite.announce
    metadata: {}
    data: {}
  mode: single
- id: '1738201829040'
  alias: Set the kitchen hub volume to 100% on app launch
  description: ''
  triggers:
  - trigger: state
    entity_id:
    - media_player.kitchen_google_hub
    to: playing
  conditions:
  - condition: state
    entity_id: media_player.kitchen_google_hub
    attribute: app_name
    state: Plex
  - condition: template
    value_template: '{{ (now() - trigger.from_state.last_changed) > timedelta(seconds=120)}}'
    enabled: false
    alias: Only continue if non-playing for over 120 seconds
  actions:
  - action: media_player.volume_set
    metadata: {}
    data:
      volume_level: 1
    target:
      entity_id: media_player.kitchen_google_hub
  mode: single
- id: '1738852306883'
  alias: Music Assistant - Local(only) Voice Support Blueprint
  description: ''
  use_blueprint:
    path: music-assistant/mass_assist_blueprint_en.yaml
    input:
      default_player_entity_id_input: media_player.group_mass_home_group_speakers
- id: '1739201293361'
  alias: Alert maxi that his laptop battery is low
  description: ''
  triggers:
  - trigger: numeric_state
    entity_id:
    - sensor.laptop_maxi_msi_battery_charge_remaining_percentage
    below: 25
  conditions: []
  actions:
  - choose:
    - conditions:
      - condition: state
        entity_id: person.maximiliano
        state: home
      sequence:
      - variables:
          in_room_speakers: "{% if [area_id(states('sensor.maxi_location_by_petro'))]
            \  | map('area_entities') | sum(start=[]) |    select('search', 'speakers')
            | select('search','mass') | unique | list %} {{ [area_id(states('sensor.maxi_location_by_petro'))]
            \  | map('area_entities') | sum(start=[]) |    select('search', 'speakers')
            | select('search','mass') | unique | list }} {% else %} {{ [area_id(states('sensor.maxi_location_by_petro'))]
            \  | map('area_entities') | sum(start=[]) |  select('search', 'speaker')
            \ | unique | list }} {% endif %} \n"
          attributes: '{{ trigger }}

            '
      - metadata: {}
        data:
          cache: false
          message: Charge your laptop!
          media_player_entity_id: '{{in_room_speakers}}

            '
        target:
          entity_id: tts.piper
        enabled: true
        action: tts.speak
    - conditions:
      - condition: state
        entity_id: person.maximiliano
        state: not_home
      sequence:
      - action: notify.mobile_app_phone_maxi
        metadata: {}
        data:
          title: 'Laptop Alert:'
          data:
            ttl: 0
            priority: high
            channel: laptop_notifications
          message: LOW BATTERY!
  mode: single
