- id: '1691007313405'
  alias: Assist play specific artist
  description: ''
  trigger:
  - platform: conversation
    command:
    - play the artist {artist}
    - play some  [of] {artist}
  condition: []
  action:
  - service: mass.search
    data:
      limit: 1
      media_type:
      - artist
      name: '{{ trigger.slots.artist  }}'
    response_variable: found_artist
  - service: mass.play_media
    target:
      entity_id: media_player.mass_home_group
    data:
      media_type: artist
      enqueue: replace
      media_id: '{{ found_artist.artists.0.name }}'
  mode: single
- id: '1691088980213'
  alias: Assist Play Playlist
  description: ''
  trigger:
  - platform: conversation
    command:
    - start [the] {playlist} playlist
  condition: []
  action:
  - service: mass.play_media
    target:
      entity_id: media_player.mass_home_group
    data:
      media_type: playlist
      enqueue: replace
      media_id: '{{ trigger.slots.playlist }}'
  mode: single
- id: '1691094215164'
  alias: Assist Set Thermostats
  description: ''
  trigger:
  - platform: conversation
    command:
    - (set|change) [the] {thermostat} (AC|thermostat) to {temperature}
  condition: []
  action:
  - service: climate.set_temperature
    data:
      temperature: '{{ trigger.slots.temperature }}'
    target:
      entity_id: climate.{{ trigger.slots.thermostat }}_ac
  mode: single
- id: '1693412216159'
  alias: Assist play specific song
  description: ''
  trigger:
  - platform: conversation
    command:
    - (start|play) [the] song {song}
  condition: []
  action:
  - service: media_player.play_media
    data:
      media_content_type: music
      media_content_id: 'plex://{ "track_name": "{{ trigger.slots.song | replace(".","")
        }}", "allow_multiple": 1 ,"library_name": "Music" }'
    target:
      entity_id: media_player.group_home_speakers
  mode: single
- id: '1698434157594'
  alias: Update Map Extractor camera
  description: ''
  use_blueprint:
    path: PiotrMachowski/update_map_extractor.yaml
    input:
      vacuum: vacuum.xiaomi_vacuum_cleaner
      camera: camera.xiaomi_cloud_map_extractor
      mode_to_handle: turn_off_when_docked
- id: '1708472009602'
  alias: Play Music when maxi awakes at home
  description: This Automation will start music on the home group when maxi awakes
  trigger:
  - platform: state
    entity_id:
    - sensor.is_maxi_asleep
    from: asleep
    to: awake
    for:
      hours: 0
      minutes: 5
      seconds: 0
  condition:
  - condition: state
    entity_id: person.maximiliano
    state: home
  - condition: state
    entity_id: media_player.group_home_speakers
    state: 'off'
  - condition: state
    entity_id: binary_sensor.all_present_sleeping
    state: 'off'
  action:
  - service: media_player.play_media
    target:
      entity_id: media_player.mass_home_group
    data:
      media_content_type: playlist
      media_content_id: 100 Random tracks (from library)
  mode: single
- id: '1708472370553'
  alias: Stop bedroom speaker when bedroom sleeper awake
  description: ''
  trigger:
  - platform: state
    entity_id:
    - input_boolean.sleeper_in_bedroom
    from: 'on'
    to: 'off'
    for:
      hours: 0
      minutes: 3
      seconds: 0
  condition: []
  action:
  - service: media_player.media_stop
    metadata: {}
    data: {}
    target:
      entity_id: media_player.bedroom_speaker
  mode: single
- id: '1711377375732'
  alias: Assist play song by artist next
  description: ''
  trigger:
  - platform: conversation
    command:
    - queue {song} by {artist}
    - cue {song} by {artist}
  condition: []
  action:
  - service: mass.search
    data:
      limit: 1
      media_type:
      - track
      name: '{{ trigger.slots.song  }}'
      artist: '{{ trigger.slots.artist  }}'
    response_variable: found_song
  - service: mass.play_media
    target:
      entity_id: media_player.mass_home_group
    data:
      media_type: track
      enqueue: next
      media_id: '{{ found_song.tracks.0.name }}'
      artist: '{{ trigger.slots.artist  }}'
  mode: single
- id: '1711377604136'
  alias: Assist Play song by artist now
  description: ''
  trigger:
  - platform: conversation
    command:
    - play {song} by {artist}
  condition: []
  action:
  - service: mass.search
    data:
      limit: 1
      media_type:
      - track
      name: '{{ trigger.slots.song  }}'
      artist: '{{ trigger.slots.artist  }}'
    response_variable: found_song
  - service: mass.play_media
    target:
      entity_id: media_player.mass_home_group
    data:
      media_type: track
      enqueue: play
      media_id: '{{ found_song.tracks.0.name }}'
  - service: mass.play_media
    target:
      entity_id: media_player.mass_home_group
    data:
      media_type: track
      enqueue: add
      media_id: '{{ found_song.tracks.0.name }}'
      radio_mode: true
  mode: single
- id: '1711565389493'
  alias: Assist Restart Music Assistant
  description: ''
  trigger:
  - platform: conversation
    command: Restart Music Assistant
  condition: []
  action:
  - service: hassio.addon_restart
    metadata: {}
    data:
      addon: d5369777_music_assistant_beta
  mode: single
- id: '1711576326986'
  alias: Assist play music (default)
  description: ''
  trigger:
  - platform: conversation
    command:
    - play music
  condition: []
  action:
  - service: mass.play_media
    target:
      entity_id: media_player.mass_home_group
    data:
      media_type: playlist
      enqueue: replace
      media_id: maxi music
  mode: single
- id: '1713377627308'
  alias: Mute Speakers in the office when computer mic is in use
  description: ''
  trigger:
  - type: turned_on
    platform: device
    device_id: 0cc46b896079dbc299255330f9ea856e
    entity_id: 470a4142c11434774d1b570a456f145b
    domain: binary_sensor
  condition:
  - condition: not
    conditions:
    - condition: state
      entity_id: media_player.universal_office_speakers
      state: 'off'
  action:
  - service: media_player.volume_mute
    metadata: {}
    data:
      is_volume_muted: true
    target:
      entity_id: media_player.universal_office_speakers
  mode: single
- id: '1713377704036'
  alias: Unmute Speakers in the office when computer mic goes off
  description: ''
  trigger:
  - type: turned_off
    platform: device
    device_id: 0cc46b896079dbc299255330f9ea856e
    entity_id: 470a4142c11434774d1b570a456f145b
    domain: binary_sensor
  condition:
  - condition: not
    conditions:
    - condition: state
      entity_id: media_player.universal_office_speakers
      state: 'off'
  action:
  - service: media_player.volume_mute
    metadata: {}
    data:
      is_volume_muted: false
    target:
      entity_id: media_player.universal_office_speakers
  mode: single
- id: '1713378517441'
  alias: Lock front door when it is closed for 5 seconds
  description: ''
  trigger:
  - platform: state
    entity_id:
    - binary_sensor.sensor_front_outside_door_contact
    from:
    to: 'off'
    for:
      hours: 0
      minutes: 0
      seconds: 5
  condition:
  - condition: not
    conditions:
    - condition: state
      entity_id: lock.lock_front_door
      state: locked
  action:
  - service: lock.lock
    metadata: {}
    data: {}
    target:
      entity_id: lock.lock_front_door
  mode: single
- id: '1713378679048'
  alias: Lock front door 5 minutes after unlocking
  description: ''
  trigger:
  - platform: state
    entity_id:
    - lock.lock_front_door
    to: unlocked
    for:
      hours: 0
      minutes: 5
      seconds: 0
  condition:
  - condition: state
    entity_id: binary_sensor.sensor_front_outside_door_contact
    state: 'off'
  action:
  - service: lock.lock
    metadata: {}
    data: {}
    target:
      entity_id: lock.lock_front_door
  mode: single
- id: '1713378916074'
  alias: Alert that the front door remained open
  description: ''
  trigger:
  - platform: state
    entity_id:
    - binary_sensor.sensor_front_door_contact
    to: 'on'
    for:
      hours: 0
      minutes: 5
      seconds: 0
  condition:
  - condition: state
    entity_id: input_boolean.aerating_appartment
    state: 'off'
  action:
  - service: script.broadcast_alert_in_the_house
    metadata: {}
    data:
      message: Entrance door is open
  mode: restart
- id: '1713399927983'
  alias: Alert that the vacuum is stuck
  description: ''
  trigger:
  - platform: state
    entity_id:
    - vacuum.xiaomi_vacuum_cleaner
    to: error
  condition: []
  action:
  - repeat:
      sequence:
      - service: script.broadcast_alert_in_the_house
        metadata: {}
        data:
          message: Vacuum Stuck
      - delay:
          hours: 0
          minutes: 10
          seconds: 0
          milliseconds: 0
      until:
      - condition: not
        conditions:
        - condition: state
          entity_id: vacuum.xiaomi_vacuum_cleaner
          state: error
  mode: single
- id: '1713407734344'
  alias: Lock back door when it is closed for 5 seconds
  description: ''
  trigger:
  - platform: state
    entity_id:
    - binary_sensor.sensor_back_outside_door_contact
    from:
    to: 'off'
    for:
      hours: 0
      minutes: 0
      seconds: 5
  condition:
  - condition: not
    conditions:
    - condition: state
      entity_id: lock.back_door
      state: locked
  action:
  - service: lock.lock
    metadata: {}
    data: {}
    target:
      entity_id: lock.back_door
  mode: single
- id: '1713407853586'
  alias: Lock back door 5 minutes after unlocking
  description: ''
  trigger:
  - platform: state
    entity_id:
    - lock.back_door
    to: unlocked
    for:
      hours: 0
      minutes: 5
      seconds: 0
  condition:
  - condition: state
    entity_id: binary_sensor.sensor_back_outside_door_contact
    state: 'off'
  action:
  - service: lock.lock
    metadata: {}
    data: {}
    target:
      entity_id: lock.back_door
  mode: single
- id: '1713408006382'
  alias: Turn back door lights on when someone is detected
  description: ''
  trigger:
  - platform: state
    entity_id:
    - binary_sensor.back_door_camera_person_occupancy
    to: 'on'
  condition: []
  action:
  - service: light.turn_on
    metadata: {}
    data:
      color_temp: 254
      brightness: 255
    target:
      entity_id: light.back_door_light
  - wait_for_trigger:
    - platform: state
      entity_id:
      - binary_sensor.back_door_camera_person_occupancy
      to: 'off'
      for:
        hours: 0
        minutes: 0
        seconds: 30
    timeout:
      hours: 0
      minutes: 0
      seconds: 0
      milliseconds: 0
  - service: light.turn_off
    metadata: {}
    data:
      transition: 30
    target:
      entity_id: light.back_door_light
  mode: single
- id: '1713451307697'
  alias: Sleep actions when "all_sleeping" is turned on
  description: Close the blinds, turn off the lights and turn on the sleep mode of
    Adaptative lighting
  trigger:
  - platform: state
    entity_id:
    - binary_sensor.all_present_sleeping
    to: 'on'
    for:
      hours: 0
      minutes: 0
      seconds: 30
  condition:
  - condition: state
    entity_id: input_boolean.kink_party
    state: 'off'
  - condition: state
    entity_id: input_boolean.acid_time
    state: 'off'
  - condition: state
    entity_id: input_boolean.party_mode
    state: 'off'
  action:
  - service: switch.turn_on
    metadata: {}
    data: {}
    target:
      entity_id: switch.adaptive_lighting_sleep_mode_adaptive_lighting
  - service: cover.close_cover
    metadata: {}
    data: {}
    target:
      entity_id:
      - cover.cover_livingroom_blinds
      - cover.cover_office_blinds
  - service: light.turn_off
    metadata: {}
    data:
      transition: 10
    target:
      entity_id: light.group_all_lights
  mode: single
- id: '1713451780517'
  alias: Turn off Sleeping mode for Adaptative lighting on "All_sleeping" turns on
    off
  description: Turn off sleep mode for adaptative lighting
  trigger:
  - platform: state
    entity_id:
    - binary_sensor.all_present_sleeping
    to: 'off'
  condition: []
  action:
  - service: switch.turn_off
    target:
      entity_id: switch.adaptive_lighting_sleep_mode_adaptive_lighting
    data: {}
  mode: single
- id: '1713451981404'
  alias: Turn on party mode when over 5 guests are over
  description: Also check that no psychedelic or kink event is going on
  trigger:
  - platform: numeric_state
    entity_id:
    - sensor.amount_friends_home
    above: 5
  condition:
  - condition: state
    entity_id: input_boolean.kink_party
    state: 'off'
  - condition: state
    entity_id: input_boolean.acid_time
    state: 'off'
  action:
  - service: input_boolean.turn_on
    target:
      entity_id: input_boolean.party_mode
    data: {}
  mode: single
- id: '1713452550061'
  alias: Close blinds when the house is empty
  description: 'Close blinds '
  trigger:
  - platform: numeric_state
    entity_id:
    - zone.home
    for:
      hours: 0
      minutes: 5
      seconds: 0
    below: 0.9
  condition: []
  action:
  - service: cover.close_cover
    metadata: {}
    data: {}
    target:
      entity_id:
      - cover.cover_office_blinds
      - cover.cover_livingroom_blinds
  mode: single
- id: '1713460807856'
  alias: Start visuals when Party mode is turned on
  description: ''
  trigger:
  - platform: state
    entity_id:
    - input_boolean.party_mode
    to: 'on'
  condition: []
  action:
  - service: script.start_visual_playlist_on_plex
    metadata: {}
    data:
      requested_playlist: All Visuals
  mode: single
- id: '1713464997452'
  alias: Change room lights to semi-saturated colors when party turns on
  description: ''
  trigger:
  - platform: state
    entity_id:
    - input_boolean.party_mode
    to: 'on'
  condition: []
  action:
  - variables:
      light_groups: '{{integration_entities(''group'')|  select(''search'', ''lights'')  |  select(''search'',
        ''^((?!all).)*$'') | list}}

        '
  - repeat:
      sequence:
      - service: script.change_received_lights_to_random_colors
        data:
          lights:
          - '{{light_groups[repeat.index - 1]}}'
          saturation: 60
      for_each: '{{ light_groups }}'
  mode: single
- id: '1713465737957'
  alias: Change all single lights to random saturated colors  when acid mode turns
    on
  description: ''
  trigger:
  - platform: state
    entity_id:
    - input_boolean.acid_time
    to: 'on'
  condition: []
  action:
  - variables:
      lights: "{% set ns = namespace(lights=[]) %} {% set groups = integration_entities('group')|
        \ select('search', '^light.')   | list %} {% for group in groups %}\n    {%
        set individual_lights = state_attr(group,'entity_id')%}\n    {% for individual_light
        in individual_lights %}\n    {% if \"group\" not in individual_light and state_attr(individual_light,
        'rgb_color') %}\n      {% set ns.lights = ns.lights  + [individual_light]
        %}\n    {% endif %}\n    {% endfor %}    \n{% endfor %} {{  ns.lights  }}\n"
  - repeat:
      sequence:
      - service: script.change_received_lights_to_random_colors
        data:
          lights:
          - '{{lights[repeat.index - 1]}}'
          saturation: 100
      for_each: '{{ lights }}'
  mode: single
- id: '1713468195069'
  alias: Start 4k visuals when acid time turns on
  description: ''
  trigger:
  - platform: state
    entity_id:
    - input_boolean.acid_time
    to: 'on'
  condition: []
  action:
  - service: script.start_visual_playlist_on_plex
    metadata: {}
    data:
      requested_playlist: 4k visuals
  mode: single
- id: '1713469587813'
  alias: Turn lights to purple when a movie is played
  description: ''
  trigger:
  - platform: state
    entity_id:
    - media_player.universal_office_chromecast
    - media_player.universal_livingroom_chromecast
    - media_player.universal_hotbox_top_chromecast
    - media_player.universal_hotbox_down_chromecast
    - media_player.universal_patio_chromecast
    to: playing
  condition: []
  action:
  - repeat:
      sequence:
      - variables:
          on_lights_in_room: '{{ [area_id(trigger.entity_id)] | map(''area_id'') |
            map(''area_entities'') | sum(start=[]) | select(''match'', ''^light.'')
            | select(''is_state'',''on'') | unique | list }}

            '
          entity_id: '{{ trigger.entity_id }}

            '
          trigger_full: '{{ trigger.to_state.attributes }}

            '
      - if:
        - condition: template
          value_template: '{{ trigger.to_state.attributes.media_content_type == "movie"
            }}'
        - condition: template
          value_template: '{{ not trigger.to_state.attributes.media_series_title }}'
        then:
        - service: light.turn_on
          metadata: {}
          data:
            rgb_color:
            - 255
            - 0
            - 255
            brightness_pct: '30'
          target:
            entity_id: '{{ on_lights_in_room | list }}'
      count: 1
    enabled: true
  - wait_for_trigger:
    - platform: template
      value_template: '{{ states(trigger.entity_id) == "off" }}'
    timeout:
      hours: 4
      minutes: 0
      seconds: 0
      milliseconds: 0
    continue_on_timeout: false
  - variables:
      on_lights_in_room: '{{ [area_id(trigger.entity_id)] | map(''area_id'') | map(''area_entities'')
        | sum(start=[]) | select(''match'', ''^light.'') | select(''is_state'',''on'')
        | unique | list }}

        '
      entity_id: '{{ trigger.entity_id }}

        '
      trigger_full: '{{ trigger.to_state.attributes }}

        '
  - service: light.turn_on
    metadata: {}
    data:
      rgb_color:
      - 255
      - 255
      - 255
      brightness_pct: '100'
    target:
      entity_id: '{{ on_lights_in_room | list}}'
  mode: restart
- id: '1713533595890'
  alias: Disarm alarm-away when "User Home" turns on
  description: ''
  trigger:
  - platform: state
    entity_id:
    - binary_sensor.user_home
    to: 'on'
    from: 'off'
  condition:
  - condition: state
    entity_id: alarm_control_panel.home_alarm
    state: armed_away
  action:
  - service: alarm_control_panel.alarm_disarm
    metadata: {}
    data: {}
    target:
      entity_id: alarm_control_panel.home_alarm
  mode: single
- id: '1713533768680'
  alias: Arm Alarm-Away when "User home" is off for 10 minutes
  description: ''
  trigger:
  - platform: state
    entity_id:
    - binary_sensor.user_home
    from: 'on'
    to: 'off'
    for:
      hours: 0
      minutes: 10
      seconds: 0
  condition: []
  action:
  - service: alarm_control_panel.alarm_arm_away
    metadata: {}
    data: {}
    target:
      entity_id: alarm_control_panel.home_alarm
  mode: single
- id: '1713534223873'
  alias: Turn ACs on and Off  depending on house occupancy
  description: ''
  trigger:
  - platform: state
    entity_id:
    - binary_sensor.user_home
  condition: []
  action:
  - choose:
    - conditions:
      - condition: state
        entity_id: binary_sensor.user_home
        state: 'on'
      sequence:
      - service: climate.set_preset_mode
        metadata: {}
        data:
          preset_mode: none
        target:
          entity_id:
          - climate.hotbox_ac
          - climate.livingroom_ac
          - climate.office_ac
    - conditions:
      - condition: state
        entity_id: binary_sensor.user_home
        state: 'off'
      sequence:
      - service: climate.set_preset_mode
        metadata: {}
        data:
          preset_mode: away
        target:
          entity_id:
          - climate.hotbox_ac
          - climate.livingroom_ac
          - climate.office_ac
  mode: single
- id: '1713535684569'
  alias: Play Muzak in the bathroom when someone enters
  description: ''
  trigger:
  - platform: state
    entity_id:
    - binary_sensor.sensor_bathroom_motion_occupancy
    to: 'on'
    from: 'off'
  condition:
  - condition: state
    entity_id: media_player.bathroom_speaker
    state: 'off'
  action:
  - service: media_player.play_media
    metadata: {}
    data:
      media_content_id: 'plex://{ "library_name": "Muzak", "shuffle": 1, "allow_multiple":
        1}'
      media_content_type: music
    target:
      entity_id: media_player.bathroom_speaker
  - choose:
    - conditions:
      - condition: state
        entity_id: binary_sensor.sensor_bathroom_door_contact
        state: 'on'
      sequence:
      - service: media_player.volume_set
        metadata: {}
        data:
          volume_level: 0.1
        target:
          entity_id: media_player.bathroom_speaker
    - conditions:
      - condition: state
        entity_id: binary_sensor.sensor_bathroom_door_contact
        state: 'off'
      sequence:
      - service: media_player.volume_set
        metadata: {}
        data:
          volume_level: 0.4
        target:
          entity_id: media_player.bathroom_speaker
  mode: single
- id: '1713536409397'
  alias: Raise music on the playing speaker when the Bathroom fans goes on
  description: ''
  trigger:
  - platform: state
    entity_id:
    - switch.bathroom_fan
    from: 'off'
    to: 'on'
  condition:
  - condition: state
    entity_id: binary_sensor.sensor_bathroom_door_contact
    state: 'off'
  action:
  - choose:
    - conditions:
      - condition: state
        entity_id: media_player.bathroom_music_speaker
        state: 'off'
      sequence:
      - service: media_player.volume_up
        metadata: {}
        data: {}
        target:
          entity_id: media_player.bathroom_speaker
      - service: media_player.volume_up
        metadata: {}
        data: {}
        target:
          entity_id: media_player.bathroom_speaker
    - conditions:
      - condition: state
        entity_id: media_player.bathroom_music_speaker
        state: playing
      sequence:
      - service: media_player.volume_up
        metadata: {}
        data: {}
        target:
          entity_id: media_player.bathroom_music_speaker
        enabled: true
      - service: media_player.volume_up
        metadata: {}
        data: {}
        target:
          entity_id: media_player.bathroom_music_speaker
        enabled: true
  mode: single
- id: '1713536741103'
  alias: Start/stop bathroom fan when Bathroom humidity changes
  description: ''
  trigger:
  - platform: numeric_state
    entity_id:
    - sensor.sensor_bathroom_temperature_humidity
    above: sensor.house_median_humidity
  condition: []
  action:
  - service: switch.turn_on
    metadata: {}
    data: {}
    target:
      entity_id: switch.bathroom_fan
  - wait_for_trigger:
    - platform: numeric_state
      entity_id:
      - sensor.sensor_bathroom_temperature_humidity
      below: sensor.sensor_outside_temperature_humidity
    continue_on_timeout: true
    timeout:
      hours: 0
      minutes: 30
      seconds: 0
      milliseconds: 0
  - service: switch.turn_off
    metadata: {}
    data: {}
    target:
      entity_id: switch.bathroom_fan
  mode: single
- id: '1713538197256'
  alias: Control Hallway Tablet charging
  description: ''
  trigger:
  - platform: state
    entity_id:
    - sensor.hallway_tablet_battery
  condition: []
  action:
  - choose:
    - conditions:
      - condition: numeric_state
        entity_id: sensor.hallway_tablet_battery
        above: 90
      sequence:
      - service: switch.turn_off
        metadata: {}
        data: {}
        target:
          entity_id: switch.plug_hallway_tablet
    - conditions:
      - condition: numeric_state
        entity_id: sensor.hallway_tablet_battery
        below: 15
      sequence:
      - service: switch.turn_on
        metadata: {}
        data: {}
        target:
          entity_id: switch.plug_hallway_tablet
  mode: single
- id: '1713574201448'
  alias: Turn lights to white when we stop a movie
  description: ''
  trigger:
  - platform: state
    entity_id:
    - media_player.universal_office_chromecast
    - media_player.universal_livingroom_chromecast
    - media_player.universal_hotbox_top_chromecast
    - media_player.universal_hotbox_down_chromecast
    - media_player.universal_patio_chromecast
    to: 'off'
  condition:
  - condition: template
    value_template: '{{ trigger.from_state.attributes.media_content_type == "movie"
      }}'
  - condition: template
    value_template: '{{ not trigger.from_state.attributes.media_series_title }}'
  action:
  - repeat:
      sequence:
      - variables:
          off_lights_in_room: '{{ [area_id(trigger.entity_id)] | map(''area_id'')
            | map(''area_entities'') | sum(start=[]) | select(''match'', ''^light.'')
            | select(''is_state'',''on'') | unique | list }}

            '
          entity_id: '{{ trigger.entity_id }}

            '
          trigger_full: '{{ trigger.to_state.attributes }}

            '
      - repeat:
          sequence:
          - service: light.turn_on
            metadata: {}
            data:
              rgb_color:
              - 255
              - 255
              - 255
              brightness_pct: '100'
              transition: 150
            target:
              entity_id: '{{ off_lights_in_room[repeat.index - 1 ] }}'
          for_each: '{{off_lights_in_room}}'
        enabled: true
      count: 1
    enabled: true
  mode: restart
- id: '1713630060902'
  alias: Raise lights to 60% brightness when a movie is paused and the brightness
    is below 30%
  description: ''
  trigger:
  - platform: state
    entity_id:
    - media_player.universal_office_chromecast
    - media_player.universal_livingroom_chromecast
    - media_player.universal_hotbox_top_chromecast
    - media_player.universal_hotbox_down_chromecast
    - media_player.universal_patio_chromecast
    to: paused
    from: playing
  condition:
  - condition: template
    value_template: '{{ trigger.from_state.attributes.media_content_type == "movie"
      }}'
  - condition: template
    value_template: '{{ not trigger.from_state.attributes.media_series_title }}'
  action:
  - repeat:
      sequence:
      - variables:
          off_lights_in_room: '{{ [area_id(trigger.entity_id)] | map(''area_id'')
            | map(''area_entities'') | sum(start=[]) | select(''match'', ''^light.'')
            | select(''is_state'',''on'') | unique | list }}

            '
          entity_id: '{{ trigger.entity_id }}

            '
          trigger_full: '{{ trigger.to_state.attributes }}

            '
      - repeat:
          sequence:
          - if:
            - condition: template
              value_template: '

                {{ state_attr(off_lights_in_room[repeat.index - 1 ], "brightness")
                < 80 }}'
            then:
            - service: light.turn_on
              metadata: {}
              data:
                brightness_pct: '60'
              target:
                entity_id: '{{ off_lights_in_room[repeat.index - 1 ] }}'
          for_each: '{{off_lights_in_room}}'
        enabled: true
      count: 1
    enabled: true
  mode: parallel
  max: 6
- id: '1713631370622'
  alias: Turn off Closet fan after 5 minutes of non occupancy
  description: ''
  trigger:
  - platform: state
    entity_id:
    - binary_sensor.group_closet_motion_occupancy
    from: 'on'
    to: 'off'
    for:
      hours: 0
      minutes: 5
      seconds: 0
  condition:
  - condition: state
    entity_id: input_boolean.sleeper_in_closet
    state: 'off'
  action:
  - service: switch.turn_off
    metadata: {}
    data: {}
    target:
      entity_id: switch.plug_closet_fan
  mode: single
- id: '1713719722990'
  alias: Conditionally Unmute Speakers when a room is occupied
  description: 'This one uses motion groups '
  trigger:
  - platform: state
    entity_id:
    - binary_sensor.group_patio_motion_occupancy
    - binary_sensor.group_closet_motion_occupancy
    - binary_sensor.group_office_motion_occupancy
    - binary_sensor.group_server_motion_occupancy
    - binary_sensor.group_bedroom_motion_occupancy
    - binary_sensor.group_hallway_motion_occupancy
    - binary_sensor.group_kitchen_motion_occupancy
    - binary_sensor.group_bathroom_motion_occupancy
    - binary_sensor.group_entrance_motion_occupancy
    - binary_sensor.group_hotbox_top_motion_occupancy
    - binary_sensor.group_livingroom_motion_occupancy
    - binary_sensor.group_hotbox_down_motion_occupancy
    - binary_sensor.group_workstation_motion_occupancy
    - binary_sensor.group_chillingroom_motion_occupancy
    for:
      hours: 0
      minutes: 0
      seconds: 0
    to: 'on'
  condition:
  - condition: state
    entity_id: input_boolean.following_music
    state: 'on'
  - condition: template
    value_template: '{{ trigger.to_state.state == "on" }}'
    alias: Confirm Motion
  - alias: Make sure no sleeper is present
    condition: template
    value_template: '{{ area_id(trigger.entity_id) | lower not in states(''sensor.active_sleeper_rooms'')
      | string | lower }}'
  - alias: Make sure no unmuted TV is present
    condition: template
    value_template: '{{ area_id(trigger.entity_id) | lower not in state_attr(''sensor.active_chromecast_rooms'',
      ''unmuted_rooms'') | string | lower }}'
  - alias: Make sure no active microphone is present
    condition: template
    value_template: '{{ area_id(trigger.entity_id) | lower not in states(''sensor.active_microphones_rooms'')
      | string | lower }}'
  action:
  - variables:
      playing_speakers: '{{ [area_id(trigger.entity_id)]   | map(''area_entities'')
        | sum(start=[]) |    select(''search'', ''speakers'') | select(''is_state'',''playing'')
        | unique | list }}

        '
  - service: media_player.volume_mute
    metadata: {}
    data:
      is_volume_muted: false
    target:
      entity_id: '{{playing_speakers}}'
    alias: Unmute the speaker
  - alias: Set Speaker volume to median volume  if the room is  empty for a long time
    if:
    - condition: template
      value_template: '{{ now() - trigger.from_state.last_changed > timedelta(seconds=1000)
        }}'
      alias: Is it beene empty  over 1000 seconds?
    then:
    - service: media_player.volume_set
      metadata: {}
      data:
        volume_level: '  {{ states(''sensor.average_unmuted_speakers_volume'') }}'
      target:
        entity_id: '{{playing_speakers}}'
      alias: Set volume to the average of the house
  mode: parallel
  max: 10
- id: '1713723493265'
  alias: Start visuals on all inactive TVs
  description: ''
  trigger:
  - platform: state
    entity_id:
    - input_button.start_visuals
    to:
  condition: []
  action:
  - service: script.start_visual_playlist_on_plex
    metadata: {}
    data:
      requested_playlist: All Visuals
  mode: single
- id: '1713802663884'
  alias: Set speakers volume on initial playback
  description: ''
  trigger:
  - platform: state
    entity_id:
    - media_player.universal_office_speakers
    - media_player.universal_chillingroom_speakers
    - media_player.universal_hallway_speakers
    - media_player.universal_hotbox_top_speakers
    - media_player.universal_kitchen_speakers
    - media_player.universal_livingroom_speakers
    - media_player.universal_hotbox_down_speakers
    to: idle
    from: 'off'
  condition: []
  action:
  - choose:
    - conditions:
      - alias: Is there no sleeper in the room?
        condition: template
        value_template: '{{ area_id(trigger.entity_id) | lower not in states(''sensor.active_sleeper_rooms'')
          | string | lower }}

          '
      sequence:
      - choose:
        - conditions:
          - condition: state
            entity_id: input_boolean.following_music
            state: 'off'
          sequence:
          - service: media_player.volume_set
            metadata: {}
            data:
              volume_level: 0.35
            target:
              entity_id: '{{trigger.entity_id}}'
            enabled: true
          alias: If following music is off
        - conditions:
          - condition: state
            entity_id: input_boolean.following_music
            state: 'on'
          sequence:
          - alias: Mute or unmute depending on occupancy
            choose:
            - conditions:
              - condition: template
                value_template: '{{ area_id(trigger.entity_id) | lower in states(''sensor.active_motion_rooms'')
                  | string | lower }}

                  '
                alias: Is the speaker room occupied?
              sequence:
              - service: media_player.volume_set
                metadata: {}
                data:
                  volume_level: 0.35
                target:
                  entity_id: '{{trigger.entity_id}}'
              - service: media_player.volume_mute
                metadata: {}
                data:
                  is_volume_muted: false
                target:
                  entity_id: '{{trigger.entity_id}}'
              alias: Set volume if the room is occupied
            - conditions:
              - alias: Is the speaker room occupied?
                condition: template
                value_template: '{{ area_id(trigger.entity_id) | lower not in states(''sensor.active_motion_rooms'')
                  | string | lower }}

                  '
              sequence:
              - service: media_player.volume_mute
                data:
                  is_volume_muted: true
                target:
                  entity_id: '{{trigger.entity_id}}'
              alias: Set mute if the room is unoccupied
          alias: If following music is on
      alias: No sleeper in the room
    - conditions:
      - condition: template
        value_template: '{{ area_id(trigger.entity_id) | lower in states(''sensor.active_sleeper_rooms'')
          | string | lower }}

          '
      sequence:
      - service: media_player.volume_mute
        data:
          is_volume_muted: true
        target:
          entity_id: '{{trigger.entity_id}}'
      alias: Sleeper present in the room
  mode: parallel
  max: 25
- id: '1713813890992'
  alias: Reload tablets 4 minutes after HA restarts
  description: ''
  trigger:
  - platform: numeric_state
    entity_id:
    - sensor.bootminutes
    below: 5
    above: 3
  condition: []
  action:
  - service: button.press
    metadata: {}
    data: {}
    target:
      entity_id:
      - button.samsung_galaxy_tab_e_8_0_load_start_url
      - button.office_tablet_load_start_url
      - button.hallway_tablet_load_start_url
      - button.kitchen_tablet_load_start_url
      - button.livingroom_tablet_load_start_url
  mode: single
- id: '1713824382107'
  alias: Turn on lights automatically
  description: 'This one uses motion groups '
  trigger:
  - platform: state
    entity_id:
    - binary_sensor.group_office_motion_occupancy
    - binary_sensor.group_hallway_motion_occupancy
    - binary_sensor.group_kitchen_motion_occupancy
    - binary_sensor.group_hotbox_top_motion_occupancy
    - binary_sensor.group_livingroom_motion_occupancy
    - binary_sensor.group_hotbox_down_motion_occupancy
    - binary_sensor.group_chillingroom_motion_occupancy
    - binary_sensor.group_patio_motion_occupancy
    - binary_sensor.group_closet_motion_occupancy
    - binary_sensor.group_server_motion_occupancy
    - binary_sensor.group_bathroom_motion_occupancy
    - binary_sensor.group_bedroom_motion_occupancy
    - binary_sensor.group_entrance_motion_occupancy
    - binary_sensor.group_workstation_motion_occupancy
    for:
      hours: 0
      minutes: 0
      seconds: 0
  condition: []
  action:
  - variables:
      off_lights_in_room: '{{ [area_id(trigger.entity_id)]  | map(''area_entities'')
        | sum(start=[]) | select(''match'', ''^light.'') | select(''is_state'',''off'')
        | unique | list }}

        '
  - repeat:
      sequence:
      - if:
        - condition: template
          value_template: '{% if area_id(off_lights_in_room[repeat.index - 1]) in
            states(''sensor.active_sleeper_rooms'') | string  %}

            false

            {% else%}

            true

            {% endif %}'
        then:
        - service: light.turn_on
          metadata: {}
          data: {}
          target:
            entity_id: '{{off_lights_in_room[repeat.index - 1]    }}'
      for_each: '{{off_lights_in_room}}'
  mode: parallel
  max: 25
- id: '1713826329670'
  alias: Mute speakers when the room is empty
  description: 'This one uses motion groups '
  trigger:
  - platform: state
    entity_id:
    - binary_sensor.group_patio_motion_occupancy
    - binary_sensor.group_closet_motion_occupancy
    - binary_sensor.group_office_motion_occupancy
    - binary_sensor.group_server_motion_occupancy
    - binary_sensor.group_bedroom_motion_occupancy
    - binary_sensor.group_hallway_motion_occupancy
    - binary_sensor.group_kitchen_motion_occupancy
    - binary_sensor.group_bathroom_motion_occupancy
    - binary_sensor.group_entrance_motion_occupancy
    - binary_sensor.group_hotbox_top_motion_occupancy
    - binary_sensor.group_livingroom_motion_occupancy
    - binary_sensor.group_hotbox_down_motion_occupancy
    - binary_sensor.group_workstation_motion_occupancy
    - binary_sensor.group_chillingroom_motion_occupancy
    for:
      hours: 0
      minutes: 5
      seconds: 0
  condition:
  - condition: state
    entity_id: input_boolean.following_music
    state: 'on'
  - condition: template
    value_template: '{{ states(''sensor.maxi_location_v3'') not in [area_id(trigger.entity_id)]
      | string  }}'
  action:
  - variables:
      playing_speakers: '{{ [area_id(trigger.entity_id)]   | map(''area_entities'')
        | sum(start=[]) |    select(''search'', ''speakers'') | select(''is_state'',''playing'')
        | unique | list }}

        '
  - choose:
    - conditions:
      - condition: template
        value_template: '{{ trigger.to_state.state == "off" }}'
      sequence:
      - service: media_player.volume_mute
        metadata: {}
        data:
          is_volume_muted: true
        target:
          entity_id: '{{playing_speakers}}

            '
      alias: Motion is OFF
  mode: parallel
  max: 10
- id: '1714054125770'
  alias: Alert when dryer finishes!
  description: ''
  trigger:
  - platform: state
    entity_id:
    - binary_sensor.dryer_dry_completed
    from: 'off'
    to: 'on'
  condition:
  - condition: state
    entity_id: binary_sensor.maxi_sleeping
    state: 'off'
  - condition: state
    entity_id: binary_sensor.all_present_sleeping
    state: 'off'
  action:
  - repeat:
      sequence:
      - service: script.1714666287611
        data: {}
      - delay:
          hours: 0
          minutes: 15
          seconds: 0
          milliseconds: 0
      until:
      - condition: state
        entity_id: binary_sensor.group_kitchen_motion_occupancy
        state: 'on'
  mode: single
- id: '1714058481200'
  alias: Alert when Microwave finishes
  description: ''
  trigger:
  - platform: numeric_state
    entity_id:
    - sensor.power_switch_electric_consumption_w_4
    above: 100
  condition:
  - condition: state
    entity_id: binary_sensor.maxi_sleeping
    state: 'off'
  - condition: state
    entity_id: binary_sensor.all_present_sleeping
    state: 'off'
  - condition: state
    entity_id: input_boolean.cooking_mode
    state: 'off'
  action:
  - wait_for_trigger:
    - platform: numeric_state
      entity_id:
      - sensor.power_switch_electric_consumption_w_4
      for:
        hours: 0
        minutes: 0
        seconds: 5
      below: 28
    continue_on_timeout: false
    timeout:
      hours: 0
      minutes: 20
      seconds: 0
      milliseconds: 0
  - repeat:
      sequence:
      - service: script.1714666287611
        data: {}
      - delay:
          hours: 0
          minutes: 4
          seconds: 0
          milliseconds: 0
      until:
      - condition: state
        entity_id: binary_sensor.group_kitchen_motion_occupancy
        state: 'on'
  mode: single
- id: '1714058675432'
  alias: Alert when Washer finishes
  description: ''
  trigger:
  - platform: numeric_state
    entity_id:
    - sensor.zooz_washer_plug_electric_consumption_w
    above: 100
  condition:
  - condition: state
    entity_id: binary_sensor.maxi_sleeping
    state: 'off'
  - condition: state
    entity_id: binary_sensor.all_present_sleeping
    state: 'off'
  action:
  - wait_for_trigger:
    - platform: numeric_state
      entity_id:
      - sensor.zooz_washer_plug_electric_consumption_a
      for:
        hours: 0
        minutes: 1
        seconds: 0
      below: 1
  - service: script.broadcast_alert_in_the_house
    metadata: {}
    data:
      message: Washer finished
  - repeat:
      sequence:
      - service: script.1714666287611
        data: {}
      - delay:
          hours: 0
          minutes: 4
          seconds: 0
          milliseconds: 0
      until:
      - condition: state
        entity_id: binary_sensor.group_kitchen_motion_occupancy
        state: 'on'
  mode: single
- id: '1714077180427'
  alias: Change light to random colors on press
  description: ''
  trigger:
  - platform: state
    entity_id:
    - input_boolean.random_colors
    to: 'on'
  condition: []
  action:
  - variables:
      lights: "{% set ns = namespace(lights=[]) %} {% set groups = integration_entities('group')|
        \ select('search', '^light.')   | list %} {% for group in groups %}\n    {%
        set individual_lights = state_attr(group,'entity_id')%}\n    {% for individual_light
        in individual_lights %}\n    {% if \"group\" not in individual_light and state_attr(individual_light,
        'rgb_color') %}\n      {% set ns.lights = ns.lights  + [individual_light]
        %}\n    {% endif %}\n    {% endfor %}    \n{% endfor %} {{  ns.lights  }}\n"
  - repeat:
      sequence:
      - service: script.change_received_lights_to_random_colors
        data:
          lights:
          - '{{lights[repeat.index - 1]}}'
          saturation: 100
      for_each: '{{ lights }}'
  mode: single
- id: '1714077215807'
  alias: Change light to random pastel colors on press
  description: ''
  trigger:
  - platform: state
    entity_id:
    - input_boolean.random_pastel_colors
    to: 'on'
  condition: []
  action:
  - variables:
      lights: "{% set ns = namespace(lights=[]) %} {% set groups = integration_entities('group')|
        \ select('search', '^light.')   | list %} {% for group in groups %}\n    {%
        set individual_lights = state_attr(group,'entity_id')%}\n    {% for individual_light
        in individual_lights %}\n    {% if \"group\" not in individual_light and state_attr(individual_light,
        'rgb_color') %}\n      {% set ns.lights = ns.lights  + [individual_light]
        %}\n    {% endif %}\n    {% endfor %}    \n{% endfor %} {{  ns.lights  }}\n"
  - repeat:
      sequence:
      - service: script.change_received_lights_to_random_colors
        data:
          lights:
          - '{{lights[repeat.index - 1]}}'
          saturation: 60
      for_each: '{{ lights }}'
  mode: single
- id: '1714150045572'
  alias: Mute chromecasts when they start visuals
  description: ''
  trigger:
  - platform: state
    entity_id:
    - media_player.universal_office_chromecast
    - media_player.universal_livingroom_chromecast
    - media_player.universal_hotbox_top_chromecast
    - media_player.universal_hotbox_down_chromecast
    - media_player.universal_patio_chromecast
    to: playing
  condition:
  - alias: Check if the chromecast already muted
    condition: template
    value_template: '{{trigger.to_state.attributes.is_volume_muted == false}}'
  - condition: template
    value_template: "                  {% set ns = namespace( cast_entity = trigger.entity_id,
      template_entity = \"\" ) %}\n                  {% set ns.final_entity = ns.cast_entity
      %}   {# Declare Variables#}                    \n                  {% for media_player
      in states.media_player %}                   \n                    {% if \"plex\"
      in media_player.entity_id and media_player.state != \"unavailable\" %}\n                      {%
      set entity = media_player.entity_id %}\n                      {% set media_title
      = state_attr( entity, 'media_title') %}\n                      {% set media_series_title
      = state_attr( entity, 'media_series_title') %}\n                      {% set
      media_series_episode = state_attr( entity, 'media_espisode') %}\n                      {%
      set media_series_season = state_attr( entity, 'media_season') %}                      \n
      \                       {% if state_attr( ns.final_entity, 'media_title') %}\n
      \                         {% if  state_attr( ns.cast_entity, 'media_title')
      in ( media_title | string )%}\n                          {% set ns.template_entity
      = entity %}\n                          {% endif %}                    \n                        {%
      elif state_attr( ns.final_entity, 'media_series_title') %}\n                          {%
      if  state_attr( ns.cast_entity, 'media_series_title') in ( media_series_title
      | string )%}\n                          {% set ns.template_entity = entity %}\n
      \                         {% endif %}\n                        {% endif %}                      \n
      \                   {% endif %}                         \n                  {%
      endfor %}                   \n                  {% if ns.template_entity ==
      \"\" %}\n                      {% set ns.template_entity = ns.cast_entity %}\n
      \                 {% endif %}\n                  {% if ns.template_entity !=
      ns.cast_entity %}                  \n                    {{ state_attr(ns.template_entity,
      'media_library_title') == 'Visuals'}}\n                  {% endif %} "
  action:
  - service: media_player.volume_mute
    metadata: {}
    data:
      is_volume_muted: true
    target:
      entity_id: '{{trigger.entity_id}}'
    alias: Mute the chromecast
  mode: restart
- id: '1714151063007'
  alias: Turn off speakers after 15 minutes of pause
  description: ''
  trigger:
  - platform: state
    entity_id:
    - media_player.universal_office_speakers
    - media_player.universal_chillingroom_speakers
    - media_player.universal_hallway_speakers
    - media_player.universal_hotbox_top_speakers
    - media_player.universal_kitchen_speakers
    - media_player.universal_livingroom_speakers
    - media_player.universal_hotbox_down_speakers
    to: paused
    for:
      hours: 0
      minutes: 15
      seconds: 0
  condition: []
  action:
  - service: media_player.turn_off
    metadata: {}
    data: {}
    target:
      entity_id: '{{ trigger.entity_id }}'
  mode: parallel
  max: 25
- id: '1714321256821'
  alias: Mute speakers in the room if maxi uses a microphone
  description: ''
  trigger:
  - platform: state
    entity_id:
    - binary_sensor.maxi_is_talking
    to: 'on'
  condition:
  - condition: state
    entity_id: input_boolean.following_music
    state: 'on'
  action:
  - variables:
      playing_speakers: '{{ [area_id(states(''sensor.maxi_location_v3''))]   | map(''area_entities'')
        | sum(start=[]) |    select(''search'', ''speakers'') | select(''is_state'',''playing'')
        | unique | list }}

        '
  - service: media_player.volume_mute
    metadata: {}
    data:
      is_volume_muted: true
    target:
      entity_id: '{{playing_speakers}}

        '
  - alias: Unmute speaker after the call is done
    wait_for_trigger:
    - platform: state
      entity_id:
      - binary_sensor.maxi_is_talking
      to: 'off'
      for:
        hours: 0
        minutes: 0
        seconds: 0
    continue_on_timeout: false
  - service: media_player.volume_mute
    metadata: {}
    data:
      is_volume_muted: false
    target:
      entity_id: '{{playing_speakers}}

        '
  mode: parallel
  max: 10
- id: '1714403972538'
  alias: Mute speaers when chromecast start playing in the same room
  description: ''
  trigger:
  - platform: state
    entity_id:
    - media_player.universal_office_chromecast
    - media_player.universal_livingroom_chromecast
    - media_player.universal_hotbox_top_chromecast
    - media_player.universal_hotbox_down_chromecast
    - media_player.universal_patio_chromecast
    to: playing
  condition:
  - alias: Check that the chromecast is not muted
    condition: template
    value_template: '{{trigger.to_state.attributes.is_volume_muted == false}}'
  - condition: template
    value_template: "                  {% set ns = namespace( cast_entity = trigger.entity_id,
      template_entity = \"\" ) %}\n                  {% set ns.final_entity = ns.cast_entity
      %}   {# Declare Variables#}                    \n                  {% for media_player
      in states.media_player %}                   \n                    {% if \"plex\"
      in media_player.entity_id and media_player.state != \"unavailable\" %}\n                      {%
      set entity = media_player.entity_id %}\n                      {% set media_title
      = state_attr( entity, 'media_title') %}\n                      {% set media_series_title
      = state_attr( entity, 'media_series_title') %}\n                      {% set
      media_series_episode = state_attr( entity, 'media_espisode') %}\n                      {%
      set media_series_season = state_attr( entity, 'media_season') %}                      \n
      \                       {% if state_attr( ns.final_entity, 'media_title') %}\n
      \                         {% if  state_attr( ns.cast_entity, 'media_title')
      in ( media_title | string )%}\n                          {% set ns.template_entity
      = entity %}\n                          {% endif %}                    \n                        {%
      elif state_attr( ns.final_entity, 'media_series_title') %}\n                          {%
      if  state_attr( ns.cast_entity, 'media_series_title') in ( media_series_title
      | string )%}\n                          {% set ns.template_entity = entity %}\n
      \                         {% endif %}\n                        {% endif %}                      \n
      \                   {% endif %}                         \n                  {%
      endfor %}                   \n                  {% if ns.template_entity ==
      \"\" %}\n                      {% set ns.template_entity = ns.cast_entity %}\n
      \                 {% endif %}\n                  {% if ns.template_entity !=
      ns.cast_entity %}                  \n                    {{ state_attr(ns.template_entity,
      'media_library_title') != 'Visuals'}}\n                  {% endif %} "
  action:
  - variables:
      playing_speakers: '{{ [area_id(trigger.entity_id)]   | map(''area_entities'')
        | sum(start=[]) |    select(''search'', ''speakers'') | select(''is_state'',''playing'')
        | unique | list }}

        '
  - service: media_player.volume_mute
    metadata: {}
    data:
      is_volume_muted: true
    target:
      entity_id: '{{ playing_speakers }}

        '
  mode: restart
- id: '1714404201504'
  alias: Unmute speakers when TV stops
  description: ''
  trigger:
  - platform: state
    entity_id:
    - media_player.universal_office_chromecast
    - media_player.universal_livingroom_chromecast
    - media_player.universal_hotbox_top_chromecast
    - media_player.universal_hotbox_down_chromecast
    - media_player.universal_patio_chromecast
    to: paused
    from: playing
  - platform: state
    entity_id:
    - media_player.universal_office_chromecast
    - media_player.universal_livingroom_chromecast
    - media_player.universal_hotbox_top_chromecast
    - media_player.universal_hotbox_down_chromecast
    - media_player.universal_patio_chromecast
    to: 'off'
    from: paused
  - platform: state
    entity_id:
    - media_player.universal_office_chromecast
    - media_player.universal_livingroom_chromecast
    - media_player.universal_hotbox_top_chromecast
    - media_player.universal_hotbox_down_chromecast
    - media_player.universal_patio_chromecast
    to: 'off'
    from: playing
  condition:
  - alias: Check that the chromecast is not muted
    condition: template
    value_template: '{{trigger.to_state.attributes.is_volume_muted == false}}'
  - condition: template
    value_template: "                  {% set ns = namespace( cast_entity = trigger.entity_id,
      template_entity = \"\" ) %}\n                  {% set ns.final_entity = ns.cast_entity
      %}   {# Declare Variables#}                    \n                  {% for media_player
      in states.media_player %}                   \n                    {% if \"plex\"
      in media_player.entity_id and media_player.state != \"unavailable\" %}\n                      {%
      set entity = media_player.entity_id %}\n                      {% set media_title
      = state_attr( entity, 'media_title') %}\n                      {% set media_series_title
      = state_attr( entity, 'media_series_title') %}\n                      {% set
      media_series_episode = state_attr( entity, 'media_espisode') %}\n                      {%
      set media_series_season = state_attr( entity, 'media_season') %}                      \n
      \                       {% if state_attr( ns.final_entity, 'media_title') %}\n
      \                         {% if  state_attr( ns.cast_entity, 'media_title')
      in ( media_title | string )%}\n                          {% set ns.template_entity
      = entity %}\n                          {% endif %}                    \n                        {%
      elif state_attr( ns.final_entity, 'media_series_title') %}\n                          {%
      if  state_attr( ns.cast_entity, 'media_series_title') in ( media_series_title
      | string )%}\n                          {% set ns.template_entity = entity %}\n
      \                         {% endif %}\n                        {% endif %}                      \n
      \                   {% endif %}                         \n                  {%
      endfor %}                   \n                  {% if ns.template_entity ==
      \"\" %}\n                      {% set ns.template_entity = ns.cast_entity %}\n
      \                 {% endif %}\n                  {% if ns.template_entity !=
      ns.cast_entity %}                  \n                    {{ state_attr(ns.template_entity,
      'media_library_title') != 'Visuals'}}\n                  {% endif %} "
  action:
  - variables:
      playing_speakers: '{{ [area_id(trigger.entity_id)]   | map(''area_entities'')
        | sum(start=[]) |    select(''search'', ''speakers'') | select(''is_state'',''playing'')
        | unique | list }}

        '
  - service: media_player.volume_mute
    metadata: {}
    data:
      is_volume_muted: false
    target:
      entity_id: '{{playing_speakers}}'
    alias: Unmute the speakers
  mode: restart
- id: '1714404505080'
  alias: Close covers in the room when chromecasts start movie
  description: ''
  trigger:
  - platform: state
    entity_id:
    - media_player.universal_office_chromecast
    - media_player.universal_livingroom_chromecast
    - media_player.universal_hotbox_top_chromecast
    - media_player.universal_hotbox_down_chromecast
    - media_player.universal_patio_chromecast
    to: playing
  condition:
  - alias: Check that the chromecast is not muted
    condition: template
    value_template: '{{trigger.to_state.attributes.is_volume_muted == false}}'
  - condition: template
    value_template: "                  {% set ns = namespace( cast_entity = trigger.entity_id,
      template_entity = \"\" ) %}\n                  {% set ns.final_entity = ns.cast_entity
      %}   {# Declare Variables#}                    \n                  {% for media_player
      in states.media_player %}                   \n                    {% if \"plex\"
      in media_player.entity_id and media_player.state != \"unavailable\" %}\n                      {%
      set entity = media_player.entity_id %}\n                      {% set media_title
      = state_attr( entity, 'media_title') %}\n                      {% set media_series_title
      = state_attr( entity, 'media_series_title') %}\n                      {% set
      media_series_episode = state_attr( entity, 'media_espisode') %}\n                      {%
      set media_series_season = state_attr( entity, 'media_season') %}                      \n
      \                       {% if state_attr( ns.final_entity, 'media_title') %}\n
      \                         {% if  state_attr( ns.cast_entity, 'media_title')
      in ( media_title | string )%}\n                          {% set ns.template_entity
      = entity %}\n                          {% endif %}                    \n                        {%
      elif state_attr( ns.final_entity, 'media_series_title') %}\n                          {%
      if  state_attr( ns.cast_entity, 'media_series_title') in ( media_series_title
      | string )%}\n                          {% set ns.template_entity = entity %}\n
      \                         {% endif %}\n                        {% endif %}                      \n
      \                   {% endif %}                         \n                  {%
      endfor %}                   \n                  {% if ns.template_entity ==
      \"\" %}\n                      {% set ns.template_entity = ns.cast_entity %}\n
      \                 {% endif %}\n                  {% if ns.template_entity !=
      ns.cast_entity %}                  \n                    {{ state_attr(ns.template_entity,
      'media_library_title') == 'Movies'}}\n                  {% endif %} "
  action:
  - variables:
      covers: '{{ [area_id(trigger.entity_id)]    | map(''area_entities'') | sum(start=[])
        |    select(''search'', ''^cover\.'')  | unique | list }}

        '
  - service: cover.close_cover
    metadata: {}
    data: {}
    target:
      entity_id: '{{ covers }}

        '
  - wait_for_trigger:
    - platform: template
      value_template: '{{ states(trigger.entity_id) == "off" }}'
    timeout:
      hours: 4
      minutes: 0
      seconds: 0
      milliseconds: 0
    continue_on_timeout: false
  - if:
    - condition: state
      entity_id: input_boolean.kink_party
      state: 'off'
    then:
    - service: cover.open_cover
      metadata: {}
      data: {}
      target:
        entity_id: '{{ covers }}

          '
  mode: restart
- id: '1714405984049'
  alias: Reload tablets when frigate changes state
  description: ''
  trigger:
  - platform: state
    entity_id:
    - sensor.frigate_status
    from:
    to:
    for:
      hours: 0
      minutes: 3
      seconds: 0
  condition: []
  action:
  - service: button.press
    metadata: {}
    data: {}
    target:
      entity_id:
      - button.office_tablet_load_start_url
      - button.hallway_tablet_load_start_url
  mode: single
- id: '1714497353040'
  alias: Turn off lights when the house is empty
  description: Turn off lights
  trigger:
  - platform: numeric_state
    entity_id:
    - zone.home
    for:
      hours: 0
      minutes: 5
      seconds: 0
    below: 0.9
  condition: []
  action:
  - service: light.turn_off
    metadata: {}
    data: {}
    target:
      entity_id: light.group_all_inside_lights
  mode: single
- id: '1714666640750'
  alias: Turn off lights when a room is empty
  description: 'This one uses motion groups '
  trigger:
  - platform: state
    entity_id:
    - binary_sensor.group_patio_motion_occupancy
    - binary_sensor.group_closet_motion_occupancy
    - binary_sensor.group_office_motion_occupancy
    - binary_sensor.group_server_motion_occupancy
    - binary_sensor.group_bedroom_motion_occupancy
    - binary_sensor.group_hallway_motion_occupancy
    - binary_sensor.group_kitchen_motion_occupancy
    - binary_sensor.group_bathroom_motion_occupancy
    - binary_sensor.group_entrance_motion_occupancy
    - binary_sensor.group_hotbox_top_motion_occupancy
    - binary_sensor.group_livingroom_motion_occupancy
    - binary_sensor.group_hotbox_down_motion_occupancy
    - binary_sensor.group_workstation_motion_occupancy
    - binary_sensor.group_chillingroom_motion_occupancy
    for:
      hours: 0
      minutes: 6
      seconds: 0
    to: 'off'
  condition:
  - condition: template
    value_template: '{{ states(''sensor.maxi_location_v3'') not in [area_id(trigger.entity_id)]  }}'
  - condition: state
    entity_id: input_boolean.kink_party
    state: 'off'
  - condition: state
    entity_id: input_boolean.party_mode
    state: 'off'
  - condition: state
    entity_id: input_boolean.acid_time
    state: 'off'
  action:
  - variables:
      on_lights: '{{ [area_id(trigger.entity_id)]  | map(''area_entities'') | sum(start=[])
        | select(''match'', ''^light.'') | select(''is_state'',''on'') | unique |
        list }}

        '
  - service: light.turn_off
    metadata: {}
    data:
      transition: 60
    target:
      entity_id: '{{ on_lights }}

        '
  mode: parallel
  max: 10
- id: '1714668230697'
  alias: Turn off lights colors adaptation when an event is ongoing
  description: ''
  trigger:
  - platform: state
    entity_id:
    - input_boolean.kink_party
    - media_player.party_group
    - input_boolean.acid_time
    to: 'on'
  condition: []
  action:
  - service: switch.turn_off
    metadata: {}
    data: {}
    target:
      entity_id: switch.adaptive_lighting_adapt_color_adaptive_lighting
  mode: single
- id: '1714668294513'
  alias: Turn on color adaptation when events end
  description: ''
  trigger:
  - platform: state
    entity_id:
    - input_boolean.kink_party
    - input_boolean.party_mode
    - input_boolean.acid_time
    to: 'off'
  condition:
  - condition: state
    state: 'Off'
    entity_id: input_boolean.acid_time
  - condition: state
    state: 'Off'
    entity_id: input_boolean.party_mode
  - condition: state
    state: 'Off'
    entity_id: input_boolean.kink_party
  action:
  - service: switch.turn_on
    metadata: {}
    data: {}
    target:
      entity_id: switch.adaptive_lighting_adapt_color_adaptive_lighting
  mode: single
- id: '1714688757969'
  alias: Turn light on when someone is detected in the front
  description: ''
  trigger:
  - platform: numeric_state
    entity_id:
    - sensor.front_door_camera_person_count
    above: 0
  condition: []
  action:
  - choose:
    - conditions:
      - condition: state
        entity_id: light.front_door_light
        state: 'on'
        alias: If Front door light is already on
      sequence:
      - variables:
          light_rgb_color: '{{ state_attr(''light.front_door_light'',''rgb_color'')}}

            '
          light_brightness: '{{ state_attr(''light.front_door_light'',''brightness'')}}

            '
      - service: light.turn_on
        metadata: {}
        data:
          transition: 0
          color_temp: 263
          brightness: 255
        target:
          entity_id: light.front_door_light
        alias: 'Set the front door light to bright white '
      - alias: Wait until entrance empty (20 minutes timeout)
        wait_for_trigger:
        - platform: numeric_state
          entity_id:
          - sensor.front_door_camera_person_count
          for:
            hours: 0
            minutes: 3
            seconds: 0
          below: 1
        timeout:
          hours: 0
          minutes: 20
          seconds: 0
          milliseconds: 0
      - service: light.turn_on
        metadata: {}
        data:
          brightness: '{{ light_brightness }}

            '
          rgb_color: '{{ light_rgb_color }}

            '
        target:
          entity_id: light.front_door_light
    - conditions:
      - alias: If Front door light is off
        condition: state
        entity_id: light.front_door_light
        state: 'off'
      sequence:
      - service: light.turn_on
        metadata: {}
        data:
          transition: 0
          color_temp: 263
          brightness: 255
        target:
          entity_id: light.front_door_light
        alias: 'Set the front door light to bright white '
      - alias: Wait until entrance empty (20 minutes timeout)
        wait_for_trigger:
        - platform: numeric_state
          entity_id:
          - sensor.front_door_camera_person_count
          for:
            hours: 0
            minutes: 3
            seconds: 0
          below: 1
        timeout:
          hours: 0
          minutes: 20
          seconds: 0
          milliseconds: 0
      - service: light.turn_off
        metadata: {}
        data: {}
        target:
          entity_id: light.front_door_light
      alias: If the front door light is off
  mode: restart
- id: '1714937520741'
  alias: Restart spotify playback on Music Assistant
  description: ''
  trigger:
  - platform: state
    entity_id:
    - media_player.mass_home_group
    to: playing
  condition:
  - condition: state
    entity_id: media_player.mass_home_group
    attribute: active_queue
    state: Spotify
  action:
  - service: mass.search
    metadata: {}
    data:
      limit: 1
      name: '{{trigger.to_state.attributes.media_content_id}}'
    response_variable: found_track
  - service: mass.play_media
    target:
      entity_id: media_player.mass_home_group
    data:
      enqueue: replace
      media_id: '{{ found_track.tracks[0].uri }}'
  - service: mass.play_media
    target:
      entity_id: media_player.mass_home_group
    data:
      enqueue: next
      media_id: '{{ found_track.tracks[0].uri }}'
      radio_mode: true
  mode: single
- id: '1715034222361'
  alias: Alert maxi that is phone is ringing
  description: This should act in the room he is if he is alone
  trigger:
  - platform: state
    entity_id:
    - sensor.phone_maxi_phone_state
    to: ringing
  condition: []
  action:
  - variables:
      in_room_speakers: "{% if [area_id(states('sensor.maxi_location_v3'))]   | map('area_entities')
        | sum(start=[]) |    select('search', 'speakers') | select('search','universal')
        | unique | list %} {{ [area_id(states('sensor.maxi_location_v3'))]   | map('area_entities')
        | sum(start=[]) |    select('search', 'speakers') | select('search','universal')
        | unique | list }} {% else %} {{ [area_id(states('sensor.maxi_location_v3'))]
        \  | map('area_entities') | sum(start=[]) |  select('search', 'speaker')  |
        unique | list }} {% endif %} \n"
      attributes: '{{ trigger }}

        '
  - service: tts.speak
    metadata: {}
    data:
      cache: false
      message: Maxi's phone is ringing
      media_player_entity_id: '{{in_room_speakers}}

        '
    target:
      entity_id: tts.piper
    enabled: true
  - wait_template: '{{ trigger.from_state.attributes != "mass" }}'
    continue_on_timeout: true
    timeout: '5'
  - service: media_player.media_pause
    metadata: {}
    data: {}
    target:
      entity_id: '{{in_room_speakers}}

        '
  mode: single
- id: '1715102391801'
  alias: Alert when there is noise on the terasse
  description: ''
  trigger:
  - platform: state
    entity_id:
    - binary_sensor.ffmpeg_noise
    to: 'on'
    for:
      hours: 0
      minutes: 0
      seconds: 0
  condition:
  - condition: state
    entity_id: input_boolean.party_mode
    state: 'on'
  - condition: state
    entity_id: binary_sensor.group_patio_motion_occupancy
    state: 'on'
  action:
  - choose:
    - conditions:
      - condition: state
        entity_id: binary_sensor.galaxy_watch_4_on_body_sensor
        state: 'on'
      sequence:
      - service: notify.mobile_app_galaxy_watch4_2n0f
        metadata: {}
        data:
          message: Loud noises on the terasse
    - conditions:
      - condition: state
        entity_id: binary_sensor.galaxy_watch_4_on_body_sensor
        state: 'off'
      sequence:
      - service: notify.mobile_app_phone_maxi
        metadata: {}
        data:
          message: Loud noises on the terasse
  mode: single
- id: '1715103309573'
  alias: Control LivingRoomTablet charging
  description: ''
  trigger:
  - platform: state
    entity_id:
    - sensor.livingroom_tablet_battery
  condition: []
  action:
  - choose:
    - conditions:
      - condition: numeric_state
        entity_id: sensor.livingroom_tablet_battery
        above: 90
      sequence:
      - service: switch.turn_off
        metadata: {}
        data: {}
        target:
          entity_id: switch.plug_hallway_tablet
    - conditions:
      - condition: numeric_state
        entity_id: sensor.livingroom_tablet_battery
        below: 15
      sequence:
      - service: switch.turn_on
        metadata: {}
        data: {}
        target:
          entity_id: switch.plug_livingroom_tablet
  mode: single
- id: '1715664801848'
  alias: Auto close closet tablet screen when someone is sleeping
  description: ''
  trigger:
  - platform: state
    entity_id:
    - switch.samsung_galaxy_tab_e_8_0_screen
    to: 'on'
  condition:
  - condition: state
    entity_id: input_boolean.sleeper_in_closet
    state: 'on'
  action:
  - delay:
      hours: 0
      minutes: 0
      seconds: 20
      milliseconds: 0
  - service: switch.turn_off
    metadata: {}
    data: {}
    target:
      entity_id: switch.samsung_galaxy_tab_e_8_0_screen
  - service: switch.turn_off
    metadata: {}
    data: {}
    target:
      entity_id: switch.samsung_galaxy_tab_e_8_0_screen
  mode: single
- id: '1715696933725'
  alias: Tell maxi about the weather when he awakes
  description: ''
  trigger:
  - platform: state
    entity_id:
    - sensor.is_maxi_asleep
    from:
    to: awake
    for:
      hours: 0
      minutes: 5
      seconds: 0
  condition:
  - condition: state
    entity_id: person.maximiliano
    state: home
  action:
  - service: rest_command.local_ai_generate_image
    metadata: {}
    data:
      prompt: it is {{states('sensor.current_time')}}{% if states('sun.sun') =='below_horizon'
        %} at night{% else %} during the day{%endif%}, View of a residential street
        the Plateau Mont-Royal, {{ states('weather.purgatory') }} weather of {{ now().timestamp()
        | timestamp_custom('%B') }}, humidity   perception is {{ states('sensor.sensor_outside_temperature_humidity')
        }}, thermal perception is {{    states('sensor.sensor_outside_temperature_temperature')
        }},  Rennaissance painting
      model: SDXL
      size: 256x256
    response_variable: return
  - service: downloader.download_file
    metadata: {}
    data:
      overwrite: true
      filename: weather_image.jpg
      url: '{{return.content.data[0].url}}'
  - service: notify.mobile_app_phone_maxi
    metadata: {}
    data:
      title: Current Weather
      message: It is '{{ states('weather.purgatory') }}'
      data:
        image: /media/local/weather_image.jpg
  mode: single
- id: '1715717946486'
  alias: Doorbell Main automation
  description: Rings and alerts my phone
  trigger:
  - platform: state
    entity_id:
    - sensor.remote_doorbell_button_action
    to: single
  condition: []
  action:
  - service: input_boolean.turn_on
    target:
      entity_id: input_boolean.door_rang
    data: {}
  - service: downloader.download_file
    metadata: {}
    data:
      overwrite: true
      url: http://192.168.0.9:5000/api/events/{{ states('sensor.latest_frigate_event_id')}}/clip.mp4?download=true
      filename: doorclip.mp4
  - service: homeassistant.update_entity
    metadata: {}
    data: {}
    target:
      entity_id: sensor.latest_frigate_event_id
  - service: script.broadcast_alert_in_the_house
    metadata: {}
    data:
      message: Someone is at the door!
      color: blue
      image: /media/local/doorclip.mp4?{{ range(1, 53199) | random }}
  - wait_for_trigger:
    - platform: event
      event_type: downloader_download_completed
    continue_on_timeout: false
    timeout:
      hours: 0
      minutes: 1
      seconds: 0
      milliseconds: 0
  - service: notify.mobile_app_phone_maxi
    metadata: {}
    data:
      message: Someone is at the door!
      title: Doorbell Alert
      data:
        video: /media/local/doorclip.mp4?{{ range(1, 53199) | random }}
        actions:
        - action: unlock_door
          title: Unlock the Door?
        - action: REPLY
          title: Enter Text
  - wait_for_trigger:
    - platform: event
      event_type: mobile_app_notification_action
      context: {}
      event_data:
        action: unlock_door
    continue_on_timeout: false
    timeout:
      hours: 0
      minutes: 10
      seconds: 0
      milliseconds: 0
  - service: notify.mobile_app_phone_maxi
    metadata: {}
    data:
      message: Unlock the door?
      data:
        actions:
        - action: confirm_unlocking
          title: Really Unlock the Door?
        - action: REPLY
          title: Enter Text
      title: Doorbell Alert
  - wait_for_trigger:
    - platform: event
      event_type: mobile_app_notification_action
      context: {}
      event_data:
        action: confirm_unlocking
    continue_on_timeout: false
    timeout:
      hours: 0
      minutes: 10
      seconds: 0
      milliseconds: 0
  - service: lock.unlock
    metadata: {}
    data: {}
    target:
      entity_id: lock.lock_front_door
  - service: notify.mobile_app_phone_maxi
    metadata: {}
    data:
      message: Door unlocked!
      data:
        actions:
        - action: REPLY
          title: Enter Text
      title: Door Alert
  mode: restart
- id: '1715719948033'
  alias: Reset doorbell stuff on unlock
  description: ''
  trigger:
  - platform: state
    entity_id:
    - lock.lock_front_door
    to: unlocked
  condition: []
  action:
  - service: input_boolean.turn_off
    metadata: {}
    data: {}
    target:
      entity_id:
      - input_boolean.door_rang
      - input_boolean.door_double_rang
      - input_boolean.waiting_someone
  - service: input_text.set_value
    metadata: {}
    data:
      value: Empty
    target:
      entity_id: input_text.front_door_phone_text
  mode: single
- id: '1715788063807'
  alias: Tell maxi when his watch is charged
  description: ''
  trigger:
  - platform: state
    entity_id:
    - sensor.galaxy_watch4_2n0f_battery_level
    to: '100'
  condition:
  - condition: state
    entity_id: sensor.galaxy_watch4_2n0f_battery_state
    state: charging
  action:
  - service: rest_command.local_ai_generate_image
    metadata: {}
    data:
      prompt: A close up of a fully charged and powered up smart watch
      model: SDXL
    response_variable: return
  - service: downloader.download_file
    metadata: {}
    data:
      overwrite: true
      filename: watch_image.jpg
      url: '{{return.content.data[0].url}}'
  - service: notify.mobile_app_phone_maxi
    metadata: {}
    data:
      title: Watch Alert
      message: Your watch is charged!
      data:
        image: /media/local/watch_image.jpg
  mode: single
- id: '1715791112355'
  alias: Doorbell Show received notification answer on phone
  description: ''
  trigger:
  - platform: event
    event_type: mobile_app_notification_action
    event_data:
      action: REPLY
      title: Doorbell Alert
  condition: []
  action:
  - service: input_text.set_value
    metadata: {}
    data:
      value: '{{trigger.event.data.reply_text}}'
    target:
      entity_id: input_text.front_door_phone_text
  mode: single
- id: '1716328766276'
  alias: Automatically turn off TVs
  description: After 20 minutes
  trigger:
  - platform: state
    entity_id:
    - binary_sensor.group_office_motion_occupancy
    - binary_sensor.group_livingroom_motion_occupancy
    - binary_sensor.group_hotbox_top_motion_occupancy
    - binary_sensor.group_patio_motion_occupancy
    - binary_sensor.group_hotbox_down_motion_occupancy
    to: 'off'
    for:
      hours: 0
      minutes: 20
      seconds: 0
  condition: []
  action:
  - service: google_assistant_sdk.send_text_command
    metadata: {}
    data:
      command: 'Turn off     {{ [area_id(trigger.entity_id)]    | map(''area_entities'')
        | sum(start=[])  |    select(''search'', ''^media_player\.(?!.*?universal.*?).*chromecast'')
        |  map(''state_attr'', ''friendly_name'') | unique | list | first }}

        '
  mode: single
- id: '1716329212232'
  alias: Notify on potential package
  description: ''
  trigger:
  - platform: state
    entity_id:
    - binary_sensor.front_door_camera_person_occupancy
    to: 'on'
  condition:
  - condition: state
    entity_id: input_boolean.waiting_pakidge
    state: 'on'
  action:
  - service: camera.snapshot
    metadata: {}
    data:
      filename: /media/images/pakidge_snapshot.png
    target:
      entity_id: camera.front_door_camera
  - service: notify.mobile_app_phone_maxi
    metadata: {}
    data:
      data:
        image: /media/local/images/pakidge_snapshot.png
      title: Pakidge Attempt?
      message: Someone is nearing the door
  mode: single
- id: '1716329707766'
  alias: Start music on ACid mode on
  description: ''
  trigger:
  - platform: state
    entity_id:
    - input_boolean.acid_time
    to: 'on'
  condition:
  - condition: not
    conditions:
    - condition: state
      entity_id: media_player.mass_home_group
      state: playing
  action:
  - service: mass.play_media
    metadata: {}
    data:
      media_id: Psychedelic Music
      media_type: playlist
      enqueue: replace_next
    target:
      entity_id: media_player.mass_home_group
  mode: single
- id: '1716329767682'
  alias: Close all blinds on acid mode
  description: ''
  trigger:
  - platform: state
    entity_id:
    - input_boolean.acid_time
    to: 'on'
  condition:
  - condition: state
    entity_id: sun.sun
    state: above_horizon
  action:
  - service: cover.close_cover
    metadata: {}
    data: {}
    target:
      entity_id: cover.group_all_blinds
  mode: single
- id: '1716329795738'
  alias: Close all blinds on kink party
  description: ''
  trigger:
  - platform: state
    entity_id:
    - input_boolean.kink_party
    to: 'on'
  condition: []
  action:
  - service: cover.close_cover
    metadata: {}
    data: {}
    target:
      entity_id: cover.group_all_blinds
  mode: single
- id: '1716330395041'
  alias: Change alll Lights to warm colors on Kink Party
  description: ''
  trigger:
  - platform: state
    entity_id:
    - input_boolean.kink_party
    to: 'on'
  condition: []
  action:
  - service: script.changes_all_on_lights_to_warm_colors
    metadata: {}
    data: {}
  mode: single
- id: '1716416273330'
  alias: Display room color  on TVs when mimiclights mode is triggered
  description: ''
  trigger:
  - platform: state
    entity_id:
    - input_boolean.mimic_lights_on_screens
    from: 'off'
    to: 'on'
  condition: []
  action:
  - service: cast.show_lovelace_view
    metadata: {}
    data:
      entity_id: media_player.office_chromecast
      dashboard_path: color-hubs
      view_path: office
  mode: single
