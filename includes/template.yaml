  - sensor:
      - name: "current time"
        state: >-
          {{now().strftime('%H:%M %p')}}
      - name: "Bedroom Lights Color"
        state: >-
          {% if state_attr('light.group_bedroom_lights', 'rgb_color')  %}
            {{state_attr('light.group_bedroom_lights', 'rgb_color') }}
          {% endif %}
      - name: "Closet Lights Brightness"
        state: >-
          {% if state_attr('light.group_closet_lights', 'brightness')  %}
            {{state_attr('light.group_closet_lights', 'brightness') }}
           {% else %}
              1
          {% endif %}
      - name: "Playing on Bedroom Speaker"
        state: >-
          {% if state_attr('media_player.bedroom_speaker', 'media_series_title') %}
            {{ state_attr('media_player.bedroom_speaker', 'media_series_title') }}
          {% elif  state_attr('media_player.bedroom_speaker', 'media_album_name') %}
           {{ state_attr('media_player.bedroom_speaker', 'media_title') }}  -  {{ state_attr('media_player.bedroom_speaker', 'media_album_name') }} by {{ state_attr('media_player.bedroom_speaker', 'media_artist') }}
          {% elif  state_attr('media_player.bedroom_speaker', 'media_title') %}
            {{ state_attr('media_player.bedroom_speaker', 'media_title') }}
           {% elif  state_attr('media_player.bedroom_speaker', 'app_name') %}
            {{ state_attr('media_player.bedroom_speaker', 'app_name') }}
          {% endif %}
      - name: "Playing on home group Speaker"
        state: >-
          {% if state_attr('media_player.group_home_group', 'media_series_title') %}
            {{ state_attr('media_player.group_home_group', 'media_series_title') }}
          {% elif  state_attr('media_player.group_home_group', 'media_album_name') %}
           {{ state_attr('media_player.group_home_group', 'media_title') }}  -  {{ state_attr('media_player.group_home_group', 'media_album_name') }} by {{ state_attr('media_player.group_home_group', 'media_artist') }}
          {% elif  state_attr('media_player.group_home_group', 'media_title') %}
            {{ state_attr('media_player.group_home_group', 'media_title') }}
           {% elif  state_attr('media_player.group_home_group', 'app_name') %}
            {{ state_attr('media_player.group_home_group', 'app_name') }}
          {% endif %}
      - name: "Maxis Current Game"
        unique_id: "currentgamemaxi" 
        state: >-
            {% if state_attr('sensor.maxi1134_8202', 'game') %}
            {{ state_attr('sensor.maxi1134_8202', 'game') }}
            {% elif  state_attr('sensor.steam_maxi', 'game') %}
            {{state_attr('sensor.steam_maxi', 'game')}}
            {% else %} idle
            {% endif %}
      - name: "Maxis Current Discord Game"
        state: >-
            {% if state_attr('sensor.maxi1134_8202', 'game') %}
            {{ state_attr('sensor.maxi1134_8202', 'game') }}
            {% else %}idle
            {% endif %}
      - name: "Maxis Current Steam Game"
        state: >-
            {% if  state_attr('sensor.steam_maxi', 'game') %}
            {{state_attr('sensor.steam_maxi', 'game')}}
            {% else %}idle
            {% endif %}
      - name: "Where is maxi sleeping?"
        unique_id: maxi_sleeping_spot
        state: >-
          {% set ns = namespace(sleeper=0, sleeparraystates=[], allowed_ids=[], roomname="unsure", control='', sleeparray=[], motionarrays=[], motion_sensors=[]) %}  {# create a namespace object to store variables #}
          {% set room = states.sensor.b7bracelet1.state %}  {# get the current room sensor state #}

          {% if states.binary_sensor.maxi_alone.state == "on" %}  {# if the maxi_alone sensor is on, indicating there is only maxi present #}
            {% set sleeparray = states.input_boolean | selectattr('entity_id', 'contains', 'sleeper') | selectattr('state', 'eq', 'on') | map(attribute='entity_id') | list %}  {# get a list of all the input_boolean entities that are "sleeper" and are "on" #}
            {% if sleeparray | length > 1 %}  {# if there is more than one "sleeper" input_boolean that is "on" #}
              {% for input_boolean in states.input_boolean %}  {# loop through each input_boolean #}
                {% if input_boolean.entity_id in sleeparray %}  {# if the current input_boolean is in the list of "sleeper" input_booleans that are "on" #}
                  {% if room in input_boolean.entity_id %}  {# if the current input_boolean is in the current room #}
                    {% set ns.roomname = input_boolean.entity_id.split('_') | last %}  {# set the roomname to the last part of the entity_id, after splitting it by '_' #}
                  {% elif not room in input_boolean.entity_id and ns.roomname == "unsure" %}  {# if the current input_boolean is not in the current room and the previous if has not changed it#}
                          {% for name in sleeparray %}
                          {% set sleepername = name.split('_') | last %}      
                          {% set ns.allowed_ids = ns.allowed_ids + [sleepername] %}      
                          {% endfor %}      
                          {% for state in states.binary_sensor -%} 
                                  {%- if state.attributes.get('device_class') == 'motion' -%}
                                      {% for allowed_rooms in ns.allowed_ids %}                        
                                        {% set index = loop.index0 %}
                                        {% if ns.allowed_ids[index] in state.entity_id and "binary_sensor.sensor_" in state.entity_id %} 
                                          {% set sensor = {'entity_id': state.entity_id, 'last_changed': state.last_changed} %}
                                          {% set ns.motion_sensors = ns.motion_sensors + [sensor] %}
                                        {%- endif %}
                                      {% endfor %}
                                  {% endif %}
                          {% endfor %}            
                    {% set sorted_sensors = ns.motion_sensors | sort(attribute='last_changed') %}
                    {% set last_sensor = sorted_sensors | last %}
                    {% set room_before_split =last_sensor.entity_id | replace('binary_sensor.sensor_','')| replace('_motion_occupancy','')%}
                    {% set ns.roomname = room_before_split.split('_') | first %}
                  {% endif %}
                {% endif %} 
              {% endfor %} 
            {% elif sleeparray | length == 1 %}  {# if there is only one "sleeper" input_boolean that is "on" #}
              {% set ns.roomname = sleeparray[0].split('_') | last %}  {# set the roomname to the last part of the entity_id of the only "sleeper" input_boolean that is "on" #}
            {% else %}  {# if there are no "sleeper" input_booleans that are "on" #}
              {% set ns.roomname = "unsure" %}  {# set the roomname to "unsure" #}
            {% endif %}   
          {% elif states.binary_sensor.maxi_alone.state == "off" %}  {# if the maxi_alone sensor is off, it indicates that there is more than maxi present #}
            {% for input_boolean in states.input_boolean %}
              {% if input_boolean.entity_id | contains('sleeper') and input_boolean.state == "on" and room in input_boolean.entity_id %}
                {% set ns.roomname = input_boolean.entity_id.split('_') | last %}
              {% endif %} 
            {% endfor %}  
          {% else %}
            EDGECASE
          {% endif %}
          {{ ns.roomname}}

      - name: "Maxi current Activity"
        unique_id: maxi_current_activity
        state: >-                    
          {% set rooms = ["office","bedroom","kitchen","hotbox","closet","livingroom","server"] %}
          {% set ns = namespace( activityname="unsure", mediaactiverooms=[], allowed_ids=[], motion_sensors=[], room = states.sensor.b7bracelet1.state, active_motion_sensors = [] ) %}  {# create a namespace object to store variables #}
          {% set room = states('sensor.b7bracelet1') %}
          {% set peoplehome = states('sensor.guest_wifi_count') %}{# get the current room sensor state #}
          
                        {# Check for motionsensors in the rooms with active playback and then store them in a list #}
                        {% for allowed_rooms in rooms %}                        
                          {% set index = loop.index0 %}            
                          {% for state in states.binary_sensor -%} 
                            {% if allowed_rooms in state.entity_id and "binary_sensor.sensor_" in state.entity_id %} 
                              {% set sensor = {'entity_id': state.entity_id, 'last_changed': state.last_changed} %}
                                {% set ns.active_motion_sensors = ns.active_motion_sensors + [sensor] %}
                            {%- endif %}
                          {% endfor %}
                        {% endfor %}
                        {# sorts the motion sensor list to output the active room where there was last motion#}
                        {% set sorted_sensors = ns.active_motion_sensors | sort(attribute='last_changed') %}
                        {% set last_sensor = sorted_sensors | last %}
                        
                        {# set the lastroomname variant #}
                        {% set room_before_split =last_sensor.entity_id | replace('binary_sensor.sensor_','')| replace('_motion_occupancy','')%}                            
                        {% set ns.lasttvactiveroom = room_before_split.split('_') | first %}     
                        
          {% if states.binary_sensor.maxi_alone.state == "on" %}  {# if the maxi_alone sensor is on, indicating there is only maxi present #}
              {# Set the activity as gaming if a game is launched #}
              {% if states('binary_sensor.maxi_sleeping') == "on" %}          
                    {% set ns.activityname = "Sleeping in the " + states('sensor.where_is_maxi_sleeping')  %}
                    
                    
              {% elif states('sensor.currentgamemaxi') != "idle" %}          
                    {% set ns.activityname = "Playing " +  states('sensor.currentgamemaxi') %}
                    
              {% elif room == "office" and states('sensor.maxi1134_8202') != "idle" %}          
                    {% set ns.activityname = "Using the computer " %}
                    
              {% elif ns.activityname == "unsure" %}
                {% for room in rooms %} {# Here we iterate over the rooms to get all those that are not "off" as far as media goes #}
                  {% for media_player in states.media_player -%} 
                    {%- if room in media_player.entity_id and "plex" not in media_player.entity_id and "owntone" not in media_player.entity_id and "roku" not in media_player.entity_id and "speaker" not in media_player.entity_id -%}  
                      {%- if media_player.state == 'playing' -%}                                   
                        {%- set ns.mediaactiverooms = ns.mediaactiverooms + [room] -%}   
                      {%- endif -%}
                    {%- endif -%}
                  {% endfor %}        
                {% endfor %}                
                    {% if ns.mediaactiverooms | length > 0 %}                    
                    {# Check if I am in a room with mediaplayback #}
                    {% for activeroom in ns.mediaactiverooms %}
                      {% if ns.room in activeroom %}                                                       
                    {% set ns.activityname = "Watching TV in the " + room %}
                      {% endif %}
                    {% endfor %}          
                        
                      {% if ns.activityname == "unsure" %}
                        {# Check for motionsensors in the rooms with active playback and then store them in a list #}
                        {% for allowed_rooms in ns.mediaactiverooms %}                        
                          {% set index = loop.index0 %}            
                          {% for state in states.binary_sensor -%} 
                            {% if ns.mediaactiverooms[index] in state.entity_id and "binary_sensor.sensor_" in state.entity_id %} 
                              {% set sensor = {'entity_id': state.entity_id, 'last_changed': state.last_changed} %}
                                {% set ns.motion_sensors = ns.motion_sensors + [sensor] %}
                            {%- endif %}
                          {% endfor %}
                        {% endfor %}
                        
                        {# sorts the motion sensor list to output the active room where there was last motion#}
                        {% set sorted_sensors = ns.motion_sensors | sort(attribute='last_changed') %}
                        {% set last_sensor = sorted_sensors | last %}
                        
                        {# set the lastroomname variant #}
                        {% set room_before_split =last_sensor.entity_id | replace('binary_sensor.sensor_','')| replace('_motion_occupancy','')%}                            
                        {% set ns.lasttvactiveroom = room_before_split.split('_') | first %}                            
                        {% set ns.activityname = "Watching TV in the " + ns.lasttvactiveroom %}
                        {% endif %}
                     {% endif %}
              {% endif %} 
          {% elif states.binary_sensor.maxi_alone.state == "off" %}  {# if the maxi_alone sensor is off, it indicates that there is more than maxi present #}
             {% if peoplehome < states('zone.home')  %}
                   {% set ns.activityname = "With girls" %}
             {% elif peoplehome >= states('zone.home')  %}     
               {% if room != "not_home" %}
                      {% set ns.activityname = "Chilling in the " + room  %}
                {% else %}
                      {% set ns.activityname = "Chilling in the " + ns.lasttvactiveroom  %}
                {% endif %}
             {% endif %}                      
          {% else %}
            EDGECASE
          {% endif %}
          {{ns.activityname}}
  - binary_sensor:
      - name: "All Present Sleeping"
        delay_off:
          minutes: 7
        state: >
          {% if ((is_state('person.maximiliano', 'home') and is_state('binary_sensor.maxi_sleeping', 'on' ) ) or not is_state('person.maximiliano', 'home' ))  %}on{% else  %}off{% endif %}
      - name: "Sensor Patio Occupancy"
        delay_off:
          minutes: 7
        state: >
         {{ not is_state('sensor.patiocam_person_count', "0")
             or not is_state('binary_sensor.sensor_patio_motion_occupancy', 'off')
             or not is_state('binary_sensor.sensor_patio_ceiling_motion_occupancy', 'off')
             }}
      - name: "Bathroom Occupancy"
        delay_off:
          minutes: 2
        state: >
         {{ is_state('binary_sensor.sensor_bathroom_motion_occupancy', "on")
             or is_state('binary_sensor.sensor_bathroom_door_contact', 'off') and is_state('switch.bathroom_fan', 'on')
             }}
      - name: "Maxi's ears busy"
        unique_id: "maxisearsbusy" 
        state: >
         {{ (not is_state('sensor.currentgamemaxi', "idle") and is_state('sensor.b7bracelet1', "office" ))
             or (is_state('media_player.maxi_pc_mediaplayer', 'playing') and ("chrome" in "sensor.maxi_pc_activewindow"))
             or ( is_state('media_player.bedroom_chromecast', 'playing') and state_attr('media_player.bedroom_chromecast', 'is_volume_muted') == false )
             or is_state('binary_sensor.maxi_pc_microphoneactive', 'on')
             }}
