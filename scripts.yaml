broadcast_alert_in_the_house:
  alias: important broadcast alert in the house
  sequence:
  - variables:
      light_entity_ids: "{% set light_group = state_attr('light.group_notifications_light','entity_id')%}
        \  {% set ns = namespace( rgb_dict= [] ) %} {% for entity_id in light_group
        %}\n    {% set light_state = states(entity_id)  %}\n    {% set light_rgb_color
        = state_attr(entity_id, \"rgb_color\") %}\n    {% if light_state != 'unavailable'
        and light_rgb_color %}\n        {%- set rgb_values = light_rgb_color | replace('(','')
        | replace(')','')| replace(' ','')| string  -%}\n        {% set rgb_dict =
        [(entity_id , rgb_values, states(entity_id))] %}\n        {% set ns.rgb_dict
        = ns.rgb_dict + rgb_dict %}\n    {% elif light_state != 'unavailable' %}\n
        \       {%- set rgb_values = \"0,0,0\" %}\n        {% set rgb_dict = [(entity_id
        , rgb_values, states(entity_id))] %}\n        {% set ns.rgb_dict = ns.rgb_dict
        + rgb_dict %}\n    {% endif %}    \n{% endfor %}  {{ ns.rgb_dict }}\n"
    alias: 'Store Lights entity_id and current rgb values '
  - variables:
      playing_chromecasts: "{% set ns = namespace(active_chromecasts = []) %}  {#
        create a namespace object to store variables #} {% for media_player in states.media_player
        -%} \n  {%- if  \"universal\" in media_player.entity_id and \"chromecast\"
        in media_player.entity_id and \"speaker\" not in media_player.entity_id and
        \"display\" not in media_player.entity_id -%}  \n    {%- if media_player.state
        == 'playing' -%}\n    {% set current_chromecast = media_player.entity_id  %}\n
        \     {%- set ns.active_chromecasts = ns.active_chromecasts + [current_chromecast]
        -%}   \n    {%- endif -%}\n  {%- endif -%}\n{% endfor %}  {{ ns.active_chromecasts
        | unique | list}}\n"
      non_playing_chromecasts: "{% set ns = namespace(active_chromecasts = []) %}
        \ {# create a namespace object to store variables #} {% for media_player in
        states.media_player -%} \n  {%- if  \"universal\" in media_player.entity_id
        and \"chromecast\" in media_player.entity_id and \"speaker\" not in media_player.entity_id
        and \"display\" not in media_player.entity_id -%}  \n    {%- if media_player.state
        != 'playing' -%}\n    {% set current_chromecast = media_player.entity_id  %}\n
        \     {%- set ns.active_chromecasts = ns.active_chromecasts + [current_chromecast]
        -%}   \n    {%- endif -%}\n  {%- endif -%}\n{% endfor %}  {{ ns.active_chromecasts
        | unique | list}}\n"
    alias: Store Chromecasts in variables
  - alias: Run Alerts
    parallel:
    - alias: Pause Playing Chromecasts
      repeat:
        sequence:
        - metadata: {}
          data: {}
          target:
            entity_id: '{{playing_chromecasts[repeat.index - 1]}}'
          action: media_player.media_pause
        for_each: '{{ playing_chromecasts }}'
      enabled: false
    - metadata: {}
      data:
        cache: true
        media_player_entity_id: media_player.group_mass_home_airplay_speakers
        message: '{{ message }}'
      target:
        entity_id: tts.piper
      alias: TTS in the home group
      action: tts.speak
    - alias: Broadcast image to paused TVs if image is present
      if:
      - condition: template
        value_template: '{% if image %}

          true

          {% else %}

          false

          {% endif %}'
      then:
      - alias: Broadcast Image to paused chromecasts
        repeat:
          sequence:
          - metadata: {}
            data:
              media_content_id: '{{image}}'
              media_content_type: video
              entity_id: '{{non_playing_chromecasts[repeat.index - 1]}}'
            action: media_player.play_media
          for_each: '{{ non_playing_chromecasts }}'
      enabled: false
    - metadata: {}
      data:
        cache: true
        media_player_entity_id: media_player.mass_closet_wiim_speaker
        message: '{{ message }}'
      target:
        entity_id: tts.piper
      alias: TTS in the closet
      action: tts.speak
    - metadata: {}
      data:
        cache: true
        media_player_entity_id: media_player.bedroom_speaker
        message: '{{ message }}'
      target:
        entity_id: tts.piper
      alias: TTS in the bedroom
      action: tts.speak
    - if:
      - condition: template
        value_template: '{% if color %}

          true

          {% else %}

          false

          {% endif %}'
      then:
      - alias: Turn all lights to selected color
        repeat:
          sequence:
          - target:
              entity_id: '{{light_entity_ids[repeat.index].0}}'
            data:
              color_name: '{{color}}'
            enabled: true
            action: light.turn_on
          count: '{{ light_entity_ids | length - 1 }}'
    - action: notify.mobile_app_phone_maxi
      metadata: {}
      data:
        message: '{{message}}'
        title: '{{message}}'
  - alias: Restore lights to their initial state
    repeat:
      sequence:
      - if:
        - condition: template
          value_template: '{{ not light_entity_ids[repeat.index].2 | bool }}'
        then:
        - target:
            entity_id: '{{light_entity_ids[repeat.index].0}}'
          enabled: true
          alias: Turn back off lights to previous state
          action: light.turn_{{ light_entity_ids[repeat.index].2 }}
        alias: Turn off lights back to off
      - if:
        - condition: template
          value_template: '{{ light_entity_ids[repeat.index].2 | bool }}'
        then:
        - target:
            entity_id: '{{light_entity_ids[repeat.index].0}}'
          data:
            rgb_color: '{{light_entity_ids[repeat.index].1}}'
          enabled: true
          alias: Turn back on lights to previous state
          action: light.turn_{{ light_entity_ids[repeat.index].2 }}
        alias: Turn on lights back to their original colors
      count: '{{ light_entity_ids | length - 1 }}'
  mode: single
  icon: mdi:speaker-message
change_received_lights_to_random_colors:
  alias: Change received lights to random color
  sequence:
  - repeat:
      sequence:
      - service: light.turn_on
        metadata: {}
        data:
          hs_color: '{{ range(1, 360) | random | string + '','' + saturation | string
            }}'
        target:
          entity_id: '{{lights[repeat.index - 1]}}'
      for_each: '{{ lights }}'
  mode: restart
  icon: mdi:sale
  fields: {}
start_visual_playlist_on_plex:
  alias: Start requsted Playlist on plex for all unplaying chromecasts
  sequence:
  - variables:
      chromecasts: '{{integration_entities(''cast'')  |  select(''search'', ''chromecast'')
        | list}}

        '
  - repeat:
      sequence:
      - if:
        - condition: template
          value_template: '{{states(chromecasts[repeat.index ]) == "off"}}'
        then:
        - variables:
            playlist: 'plex://{"playlist_name":"{{requested_playlist}}","shuffle":"1"}

              '
        - service: media_player.play_media
          data:
            media_content_id: '{{playlist}}'
            media_content_type: playlist
          target:
            entity_id: '{{chromecasts[repeat.index]}}'
        - delay:
            hours: 0
            minutes: 0
            seconds: 15
            milliseconds: 0
      for_each: '{{ chromecasts }}'
  mode: single
  icon: mdi:led-strip-variant
'1714666287611':
  alias: non-important broadcast alert in the house
  sequence:
  - variables:
      on_light_entity_ids: "{% set light_group = state_attr('light.group_notifications_light','entity_id')%}
        \  {% set ns = namespace( rgb_dict= [] ) %} {% for entity_id in light_group
        %}\n    {% set light_state = states(entity_id)  %}\n    {% set light_rgb_color
        = state_attr(entity_id, \"rgb_color\") %}\n    {% if light_state == 'on' and
        light_rgb_color %}\n        {%- set rgb_values = light_rgb_color | replace('(','')
        | replace(')','')| replace(' ','')| string  -%}\n        {% set rgb_dict =
        [(entity_id , rgb_values, states(entity_id))] %}\n        {% set ns.rgb_dict
        = ns.rgb_dict + rgb_dict %}\n    {% endif %}    \n{% endfor %}  {{ ns.rgb_dict
        }}\n"
    alias: 'Store Lights entity_id and current rgb values '
  - alias: Run Alerts
    parallel:
    - service: tts.speak
      metadata: {}
      data:
        cache: true
        media_player_entity_id: media_player.mass_closet_wiim_speaker
        message: '{{ message }}'
      target:
        entity_id: tts.piper
      alias: TTS in the closet
    - service: tts.speak
      metadata: {}
      data:
        cache: true
        media_player_entity_id: media_player.mass_home_group
        message: '{{ message }}'
      target:
        entity_id: tts.piper
      alias: TTS in the home group
    - service: tts.speak
      metadata: {}
      data:
        cache: true
        media_player_entity_id: media_player.bedroom_speaker
        message: '{{ message }}'
      target:
        entity_id: tts.piper
      alias: TTS in the bedroom
    - if:
      - condition: template
        value_template: '{% if color %}

          true

          {% else %}

          false

          {% endif %}'
      then:
      - alias: Turn all lights to selected color
        repeat:
          sequence:
          - service: light.turn_on
            target:
              entity_id: '{{on_light_entity_ids[repeat.index].0}}'
            data:
              color_name: '{{color}}'
            enabled: true
          count: '{{ on_light_entity_ids | length - 1 }}'
  - alias: Restore lights to their initial state
    repeat:
      sequence:
      - if:
        - condition: template
          value_template: '{{ not on_light_entity_ids[repeat.index].2 | bool }}'
        then:
        - service: light.turn_{{ light_entity_ids[repeat.index].2 }}
          target:
            entity_id: '{{on_light_entity_ids[repeat.index].0}}'
          enabled: true
          alias: Turn back off lights to previous state
        alias: Turn off lights back to off
      - if:
        - condition: template
          value_template: '{{ on_light_entity_ids[repeat.index].2 | bool }}'
        then:
        - service: light.turn_{{ light_entity_ids[repeat.index].2 }}
          target:
            entity_id: '{{on_light_entity_ids[repeat.index].0}}'
          data:
            rgb_color: '{{on_light_entity_ids[repeat.index].1}}'
          enabled: true
          alias: Turn back on lights to previous state
        alias: Turn on lights back to their original colors
      count: '{{ on_light_entity_ids | length - 1 }}'
  mode: queued
  icon: mdi:speaker-message
  max: 3
changes_all_on:
  alias: Changes all on lights to random colors
  sequence:
  - variables:
      all_on_lights: '{{ integration_entities(''group'')|  select(''search'', ''light.group_all_lights'')   |
        expand | selectattr("attributes.rgb_color", "defined") |  selectattr("state",
        "eq", "on") | map(attribute=''entity_id'')  | list }}

        '
  - repeat:
      sequence:
      - metadata: {}
        data:
          hs_color: '{{ range(1, 360) | random | string + '','' + 100 | string }}'
        target:
          entity_id: '{{all_on_lights[repeat.index - 1]}}'
        action: light.turn_on
      for_each: '{{ all_on_lights }}'
  mode: restart
  icon: mdi:sale
  fields: {}
'1714667687332':
  alias: Changes all on lights to random pastel colors
  sequence:
  - variables:
      on_lights: '

        {{ integration_entities(''group'')|  select(''search'', ''light.group_all_inside_lights'')   |
        expand | selectattr("attributes.rgb_color", "defined") |  selectattr("state",
        "eq", "on") | map(attribute=''entity_id'')  | list }}

        '
  - repeat:
      sequence:
      - metadata: {}
        data:
          hs_color: '{{ range(1, 360) | random | string + '','' + 30 | string }}'
        target:
          entity_id: '{{on_lights[repeat.index - 1]}}'
        action: light.turn_on
      for_each: '{{ on_lights }}'
  mode: restart
  icon: mdi:sale
  fields: {}
generate_and_save_localai_image:
  alias: Generate and save LocalAI image
  sequence:
  - service: rest_command.local_ai_generate_image
    metadata: {}
    data:
      prompt: '{{prompt}}'
      model: '{{model}}'
      size: '{{size}}'
      steps: '{{steps}}'
    response_variable: return
  - service: downloader.download_file
    metadata: {}
    data:
      overwrite: true
      url: '{{return.content.data[0].url}}'
      filename: stable_diffusion.jpg
  mode: single
  icon: mdi:image-frame
generate_and_save_sd_image:
  alias: Generate and save SD image
  sequence:
  - service: rest_command.stability_ai_get_session_id
    metadata: {}
    data: {}
    response_variable: return
  - service: downloader.download_file
    metadata: {}
    data:
      overwrite: true
      url: '{{return.content.data[0].url}}'
      filename: stable_diffusion.jpg
  mode: single
  icon: mdi:image-frame
changes_all_on_lights_to_warm_colors:
  alias: Changes all on lights to warm colors
  sequence:
  - variables:
      on_lights: '{{ integration_entities(''group'')|  select(''search'', ''light.group_all_inside_lights'')   |
        expand | selectattr("attributes.rgb_color", "defined") |  selectattr("state",
        "eq", "on") | map(attribute=''entity_id'')  | list }}

        '
  - repeat:
      sequence:
      - metadata: {}
        data:
          hs_color: "{% set hue_under_20 = range(1, 20) | random | string + ',' +
            100 | string %} {% set hue_over_260 = range(260, 360) | random | string
            + ',' + 100 | string %} {% set random = range(1, 3) | random %}           {%
            if random == 1 %}\n {{hue_under_20 }}\n{% elif random > 1 %}           {{hue_over_260}}
            {%endif%}\n"
        target:
          entity_id: '{{on_lights[repeat.index - 1]}}'
        action: light.turn_on
      for_each: '{{ on_lights }}'
  mode: restart
  icon: mdi:sale
  fields: {}
'1716330781093':
  alias: Changes all on lights to warm pale colors
  sequence:
  - variables:
      on_lights: '{{ integration_entities(''group'')|  select(''search'', ''light.group_all_inside_lights'')   |
        expand | selectattr("attributes.rgb_color", "defined") |  selectattr("state",
        "eq", "on") | map(attribute=''entity_id'')  | list }}

        '
  - repeat:
      sequence:
      - metadata: {}
        data:
          hs_color: "{% set hue_under_20 = range(1, 20) | random | string + ',' +
            30 | string %} {% set hue_over_260 = range(260, 360) | random | string
            + ',' + 30 | string %} {% set random = range(1, 3) | random %}           {%
            if random == 1 %}\n {{hue_under_20 }}\n{% elif random > 1 %}           {{hue_over_260}}
            {%endif%}\n"
        target:
          entity_id: '{{on_lights[repeat.index - 1]}}'
        action: light.turn_on
      for_each: '{{ on_lights }}'
  mode: restart
  icon: mdi:sale
  fields: {}
generate_fake_white_colors:
  alias: Generate fake white colors
  sequence:
  - variables:
      on_lights: "{% set ns = namespace(lights=[]) %} {% set groups = integration_entities('group')|
        \ select('search', '^light.')   | list %} {% for group in groups %}\n    {%
        set individual_lights = state_attr(group,'entity_id')%}\n    {% for individual_light
        in individual_lights %}\n    {% if \"group\" not in individual_light  and
        state_attr(individual_light, 'rgb_color') and states(individual_light) ==
        'on' %}\n      {% set ns.lights = ns.lights  + [individual_light] %}\n    {%
        endif %}\n    {% endfor %}    \n{% endfor %} {{  ns.lights  }}\n"
  - repeat:
      sequence:
      - service: light.turn_on
        metadata: {}
        data:
          hs_color: "{% set hue_under_20 = range(1, 20) | random | string + ',' +
            30 | string %} {% set hue_over_260 = range(260, 360) | random | string
            + ',' + 30 | string %} {% set random = range(1, 3) | random %}           {%
            if random == 1 %}\n {{hue_under_20 }}\n{% elif random > 1 %}           {{hue_over_260}}
            {%endif%}\n"
        target:
          entity_id: '{{on_lights[repeat.index - 1]}}'
      for_each: '{{ on_lights }}'
  mode: restart
  icon: mdi:sale
  fields: {}
in_home_defense_script:
  alias: All on defense script
  sequence:
  - service: automation.turn_off
    metadata: {}
    data:
      stop_actions: true
    target:
      entity_id: automation.mute_and_unmute_speakers_in_unused_rooms
  - service: automation.turn_off
    metadata: {}
    data:
      stop_actions: true
    target:
      entity_id: automation.set_speakers_volume_on_initial_playback_v2
  - service: switch.turn_on
    metadata: {}
    data: {}
    target:
      entity_id: switch.group_fosi_receivers
  - service: switch.turn_on
    metadata: {}
    data: {}
    target:
      entity_id:
      - switch.plug_back_door_horn
      - switch.plug_front_door_horn
    enabled: true
  - service: media_player.play_media
    target:
      entity_id:
      - media_player.group_mass_home_airplay_speakers
    data:
      media_content_id: https://hass.purgatoire.ca/local/civil-defense-siren.wav
      media_content_type: music
  - service: media_player.volume_set
    metadata: {}
    data:
      volume_level: 1
    target:
      entity_id:
      - media_player.group_mass_home_airplay_speakers
  - wait_for_trigger:
    - platform: state
      entity_id:
      - binary_sensor.motion_home
      to: 'off'
      for:
        hours: 0
        minutes: 5
        seconds: 0
    timeout:
      hours: 0
      minutes: 15
      seconds: 0
      milliseconds: 0
    continue_on_timeout: false
  - service: media_player.media_stop
    metadata: {}
    data: {}
    target:
      entity_id:
      - media_player.group_mass_home_airplay_speakers
  - service: automation.turn_on
    target:
      entity_id:
      - automation.set_speakers_volume_on_initial_playback_v2
    data: {}
  mode: restart
changes_all_on_lights_to_fake_white:
  alias: Changes all on lights to fake white
  sequence:
  - variables:
      light_groups: '{% set groups =  integration_entities(''group'')|  select(''search'',
        ''^light.(?!.*?all.*?)(?!.*?notifications.*?)(?!.*?bedroom.*?)(?!.*?bathroom.*?)'')   |
        list %} {{groups}}

        '
  - repeat:
      sequence:
      - variables:
          on_lights: "{% set ns = namespace(h=(range(0, 360) | random),\n   s=100,
            group_colors=[]) %} \n\n   {% for group in light_groups %}\n     {% set
            entity_ids = state_attr(group,'entity_id') %}\n     {% set num_colors
            = entity_ids | length %}\n     {% set ns.complementary_colors = [] %}\n\n
            \    {% for i in range(num_colors) %}\n       {% set ns.h = (ns.h + (360
            / num_colors)) | int %}\n       {% if ns.h >= 360 %}\n         {% set
            ns.h = ns.h - 360 %}\n       {% endif %}\n       {% set ns.complementary_colors
            = ns.complementary_colors + [{'entity_id': entity_ids[i], 'hs_color':
            [ns.h, ns.s]}] %}\n     {% endfor %}\n     \n     {% set ns.group_colors
            = ns.group_colors + [ns.complementary_colors] %}\n   {% endfor %}\n\n
            \  {{ ns.group_colors }}\n"
      - repeat:
          sequence:
          - service: light.turn_on
            data:
              hs_color: '{{ repeat.item[0].hs_color }}'
            target:
              entity_id: '{{ repeat.item[0].entity_id }}'
          for_each: '{{ on_lights }}'
      for_each: '{{ light_groups }}'
  mode: restart
  icon: mdi:sale
  fields: {}
inside_only_home_defense_script:
  alias: Inside only home defense script
  sequence:
  - service: automation.turn_off
    metadata: {}
    data:
      stop_actions: true
    target:
      entity_id: automation.set_speakers_volume_on_initial_playback_v2
  - service: switch.turn_on
    metadata: {}
    data: {}
    target:
      entity_id: switch.group_fosi_receivers
  - service: media_player.play_media
    target:
      entity_id:
      - media_player.group_mass_home_airplay_speakers
    data:
      media_content_id: https://hass.purgatoire.ca/local/civil-defense-siren.wav
      media_content_type: music
  - service: media_player.volume_set
    metadata: {}
    data:
      volume_level: 1
    target:
      entity_id:
      - media_player.group_mass_home_airplay_speakers
  - wait_for_trigger:
    - platform: state
      entity_id:
      - binary_sensor.motion_home
      to: 'off'
      from: 'on'
      for:
        hours: 0
        minutes: 5
        seconds: 0
    timeout:
      hours: 0
      minutes: 30
      seconds: 0
      milliseconds: 0
    continue_on_timeout: false
  - service: media_player.media_stop
    metadata: {}
    data: {}
    target:
      entity_id: media_player.group_mass_home_airplay_speakers
  - service: automation.turn_on
    metadata: {}
    data: {}
    target:
      entity_id: automation.set_speakers_volume_on_initial_playback_v2
  mode: restart
start_plex_media_on_requested_player:
  alias: Start plex media on requested player
  sequence:
  - variables:
      chromecasts: '{{integration_entities(''cast'')  |  select(''search'', ''chromecast'')
        | list}}

        '
  - repeat:
      sequence:
      - if:
        - condition: template
          value_template: '{{states(chromecasts[repeat.index ]) == "off"}}'
        then:
        - variables:
            playlist: 'plex://{"playlist_name":"{{requested_playlist}}","shuffle":"1"}

              '
        - service: media_player.play_media
          data:
            media_content_id: '{{playlist}}'
            media_content_type: playlist
          target:
            entity_id: '{{chromecasts[repeat.index]}}'
        - delay:
            hours: 0
            minutes: 0
            seconds: 15
            milliseconds: 0
      for_each: '{{ chromecasts }}'
  mode: single
  icon: mdi:audio-video
  description: ''
