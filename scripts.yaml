broadcast_alert_in_the_house:
  alias: important broadcast alert in the house
  sequence:
  - variables:
      playing_chromecasts: '{{ integration_entities(''universal'') |  select(''search'',
        ''chromecast'') | expand | selectattr(''state'', ''eq'', ''playing'')| map(attribute=''entity_id'')|
        list }}

        '
      non_playing_chromecasts: '{{ integration_entities(''universal'') |  select(''search'',
        ''chromecast'') | expand | rejectattr(''state'', ''eq'', ''playing'')| map(attribute=''entity_id'')|
        list }}

        '
    alias: Store Chromecasts in variables
  - parallel:
    - alias: Lights
      sequence:
      - variables:
          light_entity_ids: "{% set light_group = state_attr('light.group_notifications_light','entity_id')%}
            \  {% set ns = namespace( rgb_dict= [] ) %} {% for entity_id in light_group
            %}\n    {% set light_state = states(entity_id)  %}\n    {% set light_rgb_color
            = state_attr(entity_id, \"rgb_color\") %}\n    {% if light_state != 'unavailable'
            and light_rgb_color %}\n        {%- set rgb_values = light_rgb_color |
            replace('(','') | replace(')','')| replace(' ','')| string  -%}\n        {%
            set rgb_dict = [(entity_id , rgb_values, states(entity_id))] %}\n        {%
            set ns.rgb_dict = ns.rgb_dict + rgb_dict %}\n    {% elif light_state !=
            'unavailable' %}\n        {%- set rgb_values = \"0,0,0\" %}\n        {%
            set rgb_dict = [(entity_id , rgb_values, states(entity_id))] %}\n        {%
            set ns.rgb_dict = ns.rgb_dict + rgb_dict %}\n    {% endif %}    \n{% endfor
            %}  {{ ns.rgb_dict }}\n"
        alias: 'Store Lights entity_id and current rgb values '
      - if:
        - condition: template
          value_template: '{% if color %}

            true

            {% else %}

            false

            {% endif %}'
        then:
        - alias: Turn all lights to selected color
          repeat:
            sequence:
            - target:
                entity_id: '{{light_entity_ids[repeat.index].0}}'
              data:
                color_name: '{{color}}'
              enabled: true
              action: light.turn_on
            count: '{{ light_entity_ids | length - 1 }}'
        alias: Change lights conditionally
      - delay:
          hours: 0
          minutes: 0
          seconds: 2
          milliseconds: 250
      - alias: Restore lights to their initial state
        repeat:
          sequence:
          - if:
            - condition: template
              value_template: '{{ not light_entity_ids[repeat.index].2 | bool }}'
            then:
            - target:
                entity_id: '{{light_entity_ids[repeat.index].0}}'
              enabled: true
              alias: Turn back off lights to previous state
              action: light.turn_{{ light_entity_ids[repeat.index].2 }}
            alias: Turn off lights back to off
          - if:
            - condition: template
              value_template: '{{ light_entity_ids[repeat.index].2 | bool }}'
            then:
            - target:
                entity_id: '{{light_entity_ids[repeat.index].0}}'
              data:
                rgb_color: '{{light_entity_ids[repeat.index].1}}'
              enabled: true
              alias: Turn back on lights to previous state
              action: light.turn_{{ light_entity_ids[repeat.index].2 }}
            alias: Turn on lights back to their original colors
          count: '{{ light_entity_ids | length - 1 }}'
    - alias: 'Announcements '
      if:
      - condition: template
        value_template: '{% if message %}

          true

          {% else %}

          false

          {% endif %}'
      then:
      - alias: Announcements
        parallel:
        - metadata: {}
          data:
            cache: true
            media_player_entity_id: media_player.group_mass_home_airplay_speakers
            message: '{{ message }}'
          target:
            entity_id: tts.openai_tts_ncage
          alias: TTS in the home group
          action: tts.speak
        - metadata: {}
          data:
            cache: true
            media_player_entity_id: media_player.hotbox_down_display
            message: '{{ message }}'
          target:
            entity_id: tts.openai_tts_ncage
          alias: TTS in the hotbox
          action: tts.speak
          continue_on_error: true
        - metadata: {}
          data:
            cache: true
            media_player_entity_id: media_player.mass_bedroom_airplay_wiim_speaker
            message: '{{ message }}'
          target:
            entity_id: tts.openai_tts_ncage
          alias: TTS in the bedroom
          action: tts.speak
        - metadata: {}
          data:
            cache: true
            media_player_entity_id: media_player.mass_closet_wiim_speaker
            message: '{{ message }}'
          target:
            entity_id: tts.openai_tts_ncage
          alias: TTS in the closet
          action: tts.speak
    - alias: 'Notifications '
      if:
      - condition: template
        value_template: '{% if phone_data %}

          true

          {% else %}

          false

          {% endif %}'
      then:
      - action: notify.mobile_app_phone_maxi
        metadata: {}
        data: '{{ phone_data }}

          '
      - action: notify.maxi_notification_group
        metadata: {}
        data: "{{ phone_data }}\ndata:\n  ttl: 0\n  priority: high\n"
      enabled: true
    - if:
      - condition: and
        conditions:
        - condition: state
          entity_id: input_boolean.party_mode
          state: 'off'
        - condition: state
          entity_id: input_boolean.kink_party
          state: 'off'
      then:
      - alias: TVs
        parallel:
        - alias: Broadcast image to paused TVs if image is present
          if:
          - condition: template
            value_template: '{% if image %}

              true

              {% else %}

              false

              {% endif %}'
          then:
          - sequence:
            - alias: Broadcast Image to paused chromecasts
              repeat:
                sequence:
                - metadata: {}
                  data:
                    media_content_id: '{{image}}'
                    media_content_type: image
                    entity_id: '{{non_playing_chromecasts[repeat.index - 1]}}'
                  action: media_player.play_media
                for_each: '{{ non_playing_chromecasts }}'
            - wait_for_trigger:
              - trigger: state
                entity_id:
                - lock.lock_front_door
                to: locked
                for:
                  hours: 0
                  minutes: 0
                  seconds: 15
              timeout:
                hours: 0
                minutes: 2
                seconds: 0
                milliseconds: 0
            - alias: Turn off precedent chromecats
              repeat:
                sequence:
                - action: media_player.turn_off
                  metadata: {}
                  data: {}
                  target:
                    entity_id: '{{ non_playing_chromecasts }}'
                for_each: '{{ non_playing_chromecasts }}'
          - action: dash_cast.load_url
            metadata: {}
            data:
              force: false
              reload_seconds: 0
              entity_id: media_player.hotbox_down_hub
              url: '{{image}}'
          enabled: true
          continue_on_error: true
        - alias: Broadcast image to paused TVs if url is present
          if:
          - condition: template
            value_template: '{% if url %}

              true

              {% else %}

              false

              {% endif %}'
          then:
          - sequence:
            - alias: Broadcast URL  to paused chromecasts
              repeat:
                sequence:
                - metadata: {}
                  data:
                    media_content_id: '{{url}}'
                    media_content_type: video
                    entity_id: '{{non_playing_chromecasts[repeat.index - 1]}}'
                  action: media_player.play_media
                for_each: '{{ non_playing_chromecasts }}'
            - wait_for_trigger:
              - trigger: state
                entity_id:
                - lock.lock_front_door
                to: locked
                for:
                  hours: 0
                  minutes: 0
                  seconds: 15
              timeout:
                hours: 0
                minutes: 2
                seconds: 0
                milliseconds: 0
            - alias: Turn off precedent chromecats
              repeat:
                sequence:
                - action: media_player.turn_off
                  metadata: {}
                  data: {}
                  target:
                    entity_id: '{{ non_playing_chromecasts }}'
                for_each: '{{ non_playing_chromecasts }}'
          - action: dash_cast.load_url
            metadata: {}
            data:
              force: false
              reload_seconds: 0
              entity_id: media_player.hotbox_down_hub
              url: '{{url}}'
          enabled: true
          continue_on_error: true
        - if:
          - condition: state
            entity_id: input_boolean.party_mode
            state: 'off'
          - condition: state
            entity_id: input_boolean.acid_time
            state: 'off'
          then:
          - alias: Pause Playing Chromecasts
            repeat:
              sequence:
              - metadata: {}
                data: {}
                target:
                  entity_id: '{{playing_chromecasts[repeat.index - 1]}}'
                action: media_player.media_pause
              for_each: '{{ playing_chromecasts }}'
            enabled: true
            continue_on_error: true
      alias: 'TVs '
  mode: restart
  icon: mdi:speaker-message
change_received_lights_to_random_colors:
  alias: Change received lights to random color
  sequence:
  - variables:
      lights: "{%- set lights = states.light | selectattr('entity_id', 'in', state_attr(selected_group,
        'entity_id'))  | list -%}\n{%- set entity_ids = lights | map(attribute='entity_id')
        | list -%}    \n{{ entity_ids }}\n"
  - repeat:
      sequence:
      - metadata: {}
        data:
          hs_color: '{{ range(1, 360) | random | string + '','' + saturation | string
            }}'
        target:
          entity_id: '{{lights[repeat.index - 1]}}'
        action: light.turn_on
      for_each: '{{ lights }}'
  mode: restart
  icon: mdi:sale
  fields: {}
start_visual_playlist_on_plex:
  alias: Start requsted Playlist on plex for all unplaying chromecasts
  sequence:
  - variables:
      chromecasts: '{{integration_entities(''cast'')  |  select(''search'', ''chromecast'')
        | list}}

        '
  - repeat:
      sequence:
      - if:
        - condition: template
          value_template: '{{states(chromecasts[repeat.index - 1 ]) == "off"}}'
        - condition: template
          value_template: '{{ area_id(chromecasts[repeat.index - 1 ] | string) | replace(''_top'','''')
            | replace(''_down'','''') not in states(''sensor.active_sleeper_rooms'')
            | string  }}'
        then:
        - variables:
            playlist: 'plex://{"playlist_name":"{{requested_playlist}}","shuffle":"1"}

              '
        - data:
            media_content_id: '{{playlist}}'
            media_content_type: playlist
          target:
            entity_id: '{{chromecasts[repeat.index -1]}}'
          action: media_player.play_media
        - data:
            is_volume_muted: true
          target:
            entity_id: '{{chromecasts[repeat.index -1]}}'
          action: media_player.volume_mute
        - delay:
            hours: 0
            minutes: 0
            seconds: 15
            milliseconds: 0
          enabled: false
        - wait_for_trigger:
          - trigger: template
            value_template: '{{states(chromecasts[repeat.index - 1 ]) == "playing"}}'
          timeout:
            hours: 0
            minutes: 1
            seconds: 0
            milliseconds: 0
      for_each: '{{ chromecasts }}'
  mode: single
  icon: mdi:led-strip-variant
non_important_broadcast_alert_in_the_house:
  alias: non-important broadcast alert in the house
  sequence:
  - variables:
      light_entity_ids: "{% set light_group = state_attr('light.group_notifications_light','entity_id')%}
        \  {% set ns = namespace( rgb_dict= [] ) %} {% for entity_id in light_group
        %}\n    {% set light_state = states(entity_id)  %}\n    {% set light_rgb_color
        = state_attr(entity_id, \"rgb_color\") %}\n    {% if light_state == 'on' and
        light_rgb_color %}\n        {%- set rgb_values = light_rgb_color | replace('(','')
        | replace(')','')| replace(' ','')| string  -%}\n        {% set rgb_dict =
        [(entity_id , rgb_values, states(entity_id))] %}\n        {% set ns.rgb_dict
        = ns.rgb_dict + rgb_dict %}\n    {% endif %}    \n{% endfor %}  {{ ns.rgb_dict
        }}\n"
    alias: 'Store ON Lights entity_id and current rgb values '
  - parallel:
    - alias: Lights
      sequence:
      - if:
        - condition: template
          value_template: '{% if color %}

            true

            {% else %}

            false

            {% endif %}'
        then:
        - alias: Turn all lights to selected color
          repeat:
            sequence:
            - target:
                entity_id: '{{light_entity_ids[repeat.index].0}}'
              data:
                color_name: '{{color}}'
              enabled: true
              action: light.turn_on
            count: '{{ light_entity_ids | length - 1 }}'
        alias: Change lights conditionally
      - delay:
          hours: 0
          minutes: 0
          seconds: 1
          milliseconds: 250
      - alias: Restore lights to their initial state
        repeat:
          sequence:
          - if:
            - condition: template
              value_template: '{{ not light_entity_ids[repeat.index].2 | bool }}'
            then:
            - target:
                entity_id: '{{light_entity_ids[repeat.index].0}}'
              enabled: true
              alias: Turn back off lights to previous state
              action: light.turn_{{ light_entity_ids[repeat.index].2 }}
            alias: Turn off lights back to off
          - if:
            - condition: template
              value_template: '{{ light_entity_ids[repeat.index].2 | bool }}'
            then:
            - target:
                entity_id: '{{light_entity_ids[repeat.index].0}}'
              data:
                rgb_color: '{{light_entity_ids[repeat.index].1}}'
              enabled: true
              alias: Turn back on lights to previous state
              action: light.turn_{{ light_entity_ids[repeat.index].2 }}
            alias: Turn on lights back to their original colors
          count: '{{ light_entity_ids | length - 1 }}'
    - alias: 'Announcements '
      if:
      - condition: template
        value_template: '{% if message %}

          true

          {% else %}

          false

          {% endif %}'
      then:
      - alias: Announcements
        parallel:
        - metadata: {}
          data:
            cache: true
            media_player_entity_id: media_player.group_mass_home_airplay_speakers
            message: '{{ message }}'
          target:
            entity_id: tts.openai_tts_ncage
          alias: TTS in the home group
          action: tts.speak
        - metadata: {}
          data:
            cache: true
            media_player_entity_id: media_player.hotbox_down_display
            message: '{{ message }}'
          target:
            entity_id: tts.openai_tts_ncage
          alias: TTS in the hotbox
          action: tts.speak
          continue_on_error: true
        - metadata: {}
          data:
            cache: true
            media_player_entity_id: media_player.bedroom_speaker
            message: '{{ message }}'
          target:
            entity_id: tts.openai_tts_ncage
          alias: TTS in the bedroom
          action: tts.speak
        - metadata: {}
          data:
            cache: true
            media_player_entity_id: media_player.mass_closet_wiim_speaker
            message: '{{ message }}'
          target:
            entity_id: tts.openai_tts_ncage
          alias: TTS in the closet
          action: tts.speak
    - alias: TVs
      parallel:
      - alias: Broadcast image to paused TVs if image is present
        if:
        - condition: template
          value_template: '{% if image %}

            true

            {% else %}

            false

            {% endif %}'
        then:
        - alias: Broadcast Image to paused chromecasts
          repeat:
            sequence:
            - metadata: {}
              data:
                media_content_id: '{{image}}'
                media_content_type: video
                entity_id: '{{non_playing_chromecasts[repeat.index - 1]}}'
              action: media_player.play_media
            for_each: '{{ non_playing_chromecasts }}'
        - delay:
            hours: 0
            minutes: 0
            seconds: 40
            milliseconds: 0
        - alias: Turn off precedent chromecats
          repeat:
            sequence:
            - action: media_player.turn_off
              metadata: {}
              data: {}
              target:
                entity_id: '{{ non_playing_chromecasts }}'
            for_each: '{{ non_playing_chromecasts }}'
        enabled: true
        continue_on_error: true
      - alias: Broadcast image to paused TVs if URL is present
        if:
        - condition: template
          value_template: '{% if url %}

            true

            {% else %}

            false

            {% endif %}'
        then:
        - alias: Broadcast Image to paused chromecasts
          repeat:
            sequence:
            - action: dash_cast.load_url
              data:
                entity_id: '{{non_playing_chromecasts[repeat.index - 1]}}'
                url: '{{url}}'
                force: true
            for_each: '{{ non_playing_chromecasts }}'
        - delay:
            hours: 0
            minutes: 0
            seconds: 40
            milliseconds: 0
          enabled: false
        - wait_for_trigger:
          - trigger: state
            entity_id:
            - lock.lock_front_door
            to: unlocked
          timeout:
            hours: 0
            minutes: 1
            seconds: 0
            milliseconds: 0
        - alias: Turn off precedent chromecats
          repeat:
            sequence:
            - action: media_player.turn_off
              metadata: {}
              data: {}
              target:
                entity_id: '{{ non_playing_chromecasts }}'
            for_each: '{{ non_playing_chromecasts }}'
        enabled: true
        continue_on_error: true
      - if:
        - condition: state
          entity_id: input_boolean.party_mode
          state: 'off'
        - condition: state
          entity_id: input_boolean.acid_time
          state: 'off'
        then:
        - alias: Pause Playing Chromecasts
          repeat:
            sequence:
            - metadata: {}
              data: {}
              target:
                entity_id: '{{playing_chromecasts[repeat.index - 1]}}'
              action: media_player.media_pause
            for_each: '{{ playing_chromecasts }}'
          enabled: true
          continue_on_error: true
  - alias: Restore lights to their initial state
    repeat:
      sequence:
      - if:
        - condition: template
          value_template: '{{ not on_light_entity_ids[repeat.index].2 | bool }}'
        then:
        - target:
            entity_id: '{{on_light_entity_ids[repeat.index].0}}'
          enabled: true
          alias: Turn back off lights to previous state
          action: light.turn_{{ light_entity_ids[repeat.index].2 }}
        alias: Turn off lights back to off
      - if:
        - condition: template
          value_template: '{{ on_light_entity_ids[repeat.index].2 | bool }}'
        then:
        - target:
            entity_id: '{{on_light_entity_ids[repeat.index].0}}'
          data:
            rgb_color: '{{on_light_entity_ids[repeat.index].1}}'
          enabled: true
          alias: Turn back on lights to previous state
          action: light.turn_{{ light_entity_ids[repeat.index].2 }}
        alias: Turn on lights back to their original colors
      count: '{{ on_light_entity_ids | length - 1 }}'
  mode: queued
  icon: mdi:speaker-message
  max: 3
changes_all_on:
  alias: Changes all on lights to random colors
  sequence:
  - variables:
      all_on_lights: '{{ integration_entities(''group'')|  select(''search'', ''light.group_all_lights'')   |
        expand | selectattr("attributes.rgb_color", "defined") |  selectattr("state",
        "eq", "on") | map(attribute=''entity_id'')  | list }}

        '
  - repeat:
      sequence:
      - metadata: {}
        data:
          hs_color: '{{ range(1, 360) | random | string + '','' + 100 | string }}'
        target:
          entity_id: '{{all_on_lights[repeat.index - 1]}}'
        action: light.turn_on
      for_each: '{{ all_on_lights }}'
  mode: restart
  icon: mdi:sale
  fields: {}
'1714667687332':
  alias: Changes all on lights to random pastel colors
  sequence:
  - variables:
      on_lights: '

        {{ integration_entities(''group'')|  select(''search'', ''light.group_all_inside_lights'')   |
        expand | selectattr("attributes.rgb_color", "defined") |  selectattr("state",
        "eq", "on") | map(attribute=''entity_id'')  | list }}

        '
  - repeat:
      sequence:
      - metadata: {}
        data:
          hs_color: '{{ range(1, 360) | random | string + '','' + 30 | string }}'
        target:
          entity_id: '{{on_lights[repeat.index - 1]}}'
        action: light.turn_on
      for_each: '{{ on_lights }}'
  mode: restart
  icon: mdi:sale
  fields: {}
generate_and_save_localai_image:
  alias: Generate and save LocalAI image
  sequence:
  - service: rest_command.local_ai_generate_image
    metadata: {}
    data:
      prompt: '{{prompt}}'
      model: '{{model}}'
      size: '{{size}}'
      steps: '{{steps}}'
    response_variable: return
  - service: downloader.download_file
    metadata: {}
    data:
      overwrite: true
      url: '{{return.content.data[0].url}}'
      filename: stable_diffusion.jpg
  mode: single
  icon: mdi:image-frame
generate_and_save_sd_image:
  alias: Generate and save SD image
  sequence:
  - service: rest_command.stability_ai_get_session_id
    metadata: {}
    data: {}
    response_variable: return
  - service: downloader.download_file
    metadata: {}
    data:
      overwrite: true
      url: '{{return.content.data[0].url}}'
      filename: stable_diffusion.jpg
  mode: single
  icon: mdi:image-frame
changes_all_on_lights_to_warm_colors:
  alias: Changes all on lights to warm colors
  sequence:
  - variables:
      on_lights: '{{ integration_entities(''group'')|  select(''search'', ''light.group_all_inside_lights'')   |
        expand | selectattr("attributes.rgb_color", "defined") |  selectattr("state",
        "eq", "on") | map(attribute=''entity_id'')  | list }}

        '
  - repeat:
      sequence:
      - metadata: {}
        data:
          hs_color: "{% set hue_under_20 = range(1, 20) | random | string + ',' +
            100 | string %} {% set hue_over_260 = range(260, 360) | random | string
            + ',' + 100 | string %} {% set random = range(1, 3) | random %}           {%
            if random == 1 %}\n {{hue_under_20 }}\n{% elif random > 1 %}           {{hue_over_260}}
            {%endif%}\n"
        target:
          entity_id: '{{on_lights[repeat.index - 1]}}'
        action: light.turn_on
      for_each: '{{ on_lights }}'
  mode: restart
  icon: mdi:sale
  fields: {}
'1716330781093':
  alias: Changes all on lights to warm pale colors
  sequence:
  - variables:
      on_lights: '{{ integration_entities(''group'')|  select(''search'', ''light.group_all_inside_lights'')   |
        expand | selectattr("attributes.rgb_color", "defined") |  selectattr("state",
        "eq", "on") | map(attribute=''entity_id'')  | list }}

        '
  - repeat:
      sequence:
      - metadata: {}
        data:
          hs_color: "{% set hue_under_20 = range(1, 20) | random | string + ',' +
            30 | string %} {% set hue_over_260 = range(260, 360) | random | string
            + ',' + 30 | string %} {% set random = range(1, 3) | random %}           {%
            if random == 1 %}\n {{hue_under_20 }}\n{% elif random > 1 %}           {{hue_over_260}}
            {%endif%}\n"
        target:
          entity_id: '{{on_lights[repeat.index - 1]}}'
        action: light.turn_on
      for_each: '{{ on_lights }}'
  mode: restart
  icon: mdi:sale
  fields: {}
generate_fake_white_colors:
  alias: Generate fake white colors
  sequence:
  - variables:
      on_lights: "{% set ns = namespace(lights=[]) %} {% set groups = integration_entities('group')|
        \ select('search', '^light.')   | list %} {% for group in groups %}\n    {%
        set individual_lights = state_attr(group,'entity_id')%}\n    {% for individual_light
        in individual_lights %}\n    {% if \"group\" not in individual_light  and
        state_attr(individual_light, 'rgb_color') and states(individual_light) ==
        'on' %}\n      {% set ns.lights = ns.lights  + [individual_light] %}\n    {%
        endif %}\n    {% endfor %}    \n{% endfor %} {{  ns.lights  }}\n"
  - repeat:
      sequence:
      - service: light.turn_on
        metadata: {}
        data:
          hs_color: "{% set hue_under_20 = range(1, 20) | random | string + ',' +
            30 | string %} {% set hue_over_260 = range(260, 360) | random | string
            + ',' + 30 | string %} {% set random = range(1, 3) | random %}           {%
            if random == 1 %}\n {{hue_under_20 }}\n{% elif random > 1 %}           {{hue_over_260}}
            {%endif%}\n"
        target:
          entity_id: '{{on_lights[repeat.index - 1]}}'
      for_each: '{{ on_lights }}'
  mode: restart
  icon: mdi:sale
  fields: {}
in_home_defense_script:
  alias: All on defense script
  sequence:
  - metadata: {}
    data:
      stop_actions: true
    action: automation.turn_off
    target:
      entity_id: automation.mute_speakers_when_the_room_is_empty
  - metadata: {}
    data:
      stop_actions: true
    target:
      entity_id: automation.set_speakers_volume_on_initial_playback_v2
    action: automation.turn_off
  - data:
      media_content_id: https://hass.purgatoire.ca/local/civil-defense-siren.wav
      media_content_type: music
    action: media_player.play_media
    target:
      entity_id:
      - media_player.universal_bathroom_speakers
      - media_player.universal_bedroom_speakers
      - media_player.universal_closet_speaker
      - media_player.universal_hallway_speakers
      - media_player.universal_kitchen_speakers
      - media_player.universal_livingroom_speakers
      - media_player.universal_hotbox_top_speakers
      - media_player.universal_salon_speakers
      - media_player.universal_office_speakers
  - repeat:
      count: 10
      sequence:
      - action: media_player.volume_up
        metadata: {}
        data: {}
        target:
          entity_id:
          - media_player.universal_bathroom_speakers
          - media_player.universal_bedroom_speakers
          - media_player.universal_closet_speaker
          - media_player.universal_hallway_speakers
          - media_player.universal_kitchen_speakers
          - media_player.universal_livingroom_speakers
          - media_player.universal_hotbox_top_speakers
          - media_player.universal_salon_speakers
          - media_player.universal_office_speakers
  - metadata: {}
    data: {}
    target:
      entity_id:
      - switch.plug_back_door_horn
      - switch.plug_front_door_horn
    enabled: true
    action: switch.turn_on
  - wait_for_trigger:
    - entity_id:
      - binary_sensor.home_occupancy
      to: 'off'
      for:
        hours: 0
        minutes: 5
        seconds: 0
      trigger: state
    timeout:
      hours: 0
      minutes: 40
      seconds: 0
      milliseconds: 0
    continue_on_timeout: false
  - action: media_player.media_stop
    metadata: {}
    data: {}
    target:
      entity_id:
      - media_player.universal_bathroom_speakers
      - media_player.universal_bedroom_speakers
      - media_player.universal_closet_speaker
      - media_player.universal_hallway_speakers
      - media_player.universal_kitchen_speakers
      - media_player.universal_livingroom_speakers
      - media_player.universal_hotbox_top_speakers
      - media_player.universal_salon_speakers
      - media_player.universal_office_speakers
  - target:
      entity_id:
      - automation.set_speakers_volume_on_initial_playback_v2
    data: {}
    action: automation.turn_on
  mode: restart
changes_all_on_lights_to_fake_white:
  alias: Changes selected light group to ordered fake white
  sequence:
  - variables:
      lights: "{%- set light_group = states.light | selectattr('entity_id', 'in',
        state_attr(selected_group, 'entity_id'))  | list -%} {%- set num_lights =
        light_group | count -%} {%- set h_increment = 360 / num_lights -%} {% set
        ns = namespace(output=[] ) %}\n{%- for i in range(num_lights) %}\n  {%- set
        light = light_group[i] -%}\n  {%- set h = (h_increment * i) | int -%}\n  {%-
        set s = 100 -%}\n  {%- set hs_color = [h, s] -%}\n  {% set temp_output= {\n
        \   \"entity_id\":  light.entity_id ,\n    \"hs_color\":  hs_color \n  } %}\n
        \ {% set ns.output = [temp_output] + ns.output %}\n  \n{%- endfor %}  {% set
        lights = ns.output %} {% set ns = namespace(x = lights) %}  {% for i in range(ns.x
        | length - 1, 0, -1) %}\n    {% set j = range(0, i + 1) | random %}\n    {%
        if j != i %}\n      {% set ns.x = ns.x[:j]+[ns.x[i]]+ns.x[j+1:i]+[ns.x[j]]+ns.x[i+1:]
        %}\n    {% endif %}\n{% endfor %} {{ ns.x }}\n"
  - repeat:
      sequence:
      - data:
          hs_color: '{{ repeat.item.hs_color }}'
          transition: 0
        target:
          entity_id: '{{ repeat.item.entity_id }}'
        action: light.turn_on
      for_each: '{{ lights }}'
  mode: restart
  icon: mdi:sale
  fields: {}
  description: ''
inside_only_home_defense_script:
  alias: Inside only home defense script
  sequence:
  - metadata: {}
    data:
      stop_actions: true
    target:
      entity_id: automation.set_speakers_volume_on_initial_playback_v2
    action: automation.turn_off
  - data:
      media_content_id: https://hass.purgatoire.ca/local/civil-defense-siren.wav
      media_content_type: music
    action: media_player.play_media
    target:
      entity_id:
      - media_player.universal_bathroom_speakers
      - media_player.universal_bedroom_speakers
      - media_player.universal_closet_speaker
      - media_player.universal_hallway_speakers
      - media_player.universal_kitchen_speakers
      - media_player.universal_livingroom_speakers
      - media_player.universal_hotbox_top_speakers
      - media_player.universal_salon_speakers
      - media_player.universal_office_speakers
  - repeat:
      count: 10
      sequence:
      - action: media_player.volume_up
        metadata: {}
        data: {}
        target:
          entity_id:
          - media_player.universal_bathroom_speakers
          - media_player.universal_bedroom_speakers
          - media_player.universal_closet_speaker
          - media_player.universal_hallway_speakers
          - media_player.universal_kitchen_speakers
          - media_player.universal_livingroom_speakers
          - media_player.universal_hotbox_top_speakers
          - media_player.universal_salon_speakers
          - media_player.universal_office_speakers
  - wait_for_trigger:
    - entity_id:
      - binary_sensor.home_occupancy
      to: 'off'
      from: 'on'
      for:
        hours: 0
        minutes: 5
        seconds: 0
      trigger: state
    timeout:
      hours: 0
      minutes: 30
      seconds: 0
      milliseconds: 0
    continue_on_timeout: false
  - action: media_player.media_stop
    metadata: {}
    data: {}
    target:
      entity_id:
      - media_player.universal_bathroom_speakers
      - media_player.universal_bedroom_speakers
      - media_player.universal_closet_speaker
      - media_player.universal_hallway_speakers
      - media_player.universal_kitchen_speakers
      - media_player.universal_livingroom_speakers
      - media_player.universal_hotbox_top_speakers
      - media_player.universal_salon_speakers
      - media_player.universal_office_speakers
  mode: restart
start_plex_media_on_requested_player:
  alias: Start plex media on requested player
  sequence:
  - variables:
      chromecasts: '{{integration_entities(''cast'')  |  select(''search'', ''chromecast'')
        | list}}

        '
  - repeat:
      sequence:
      - if:
        - condition: template
          value_template: '{{states(chromecasts[repeat.index ]) == "off"}}'
        then:
        - variables:
            playlist: 'plex://{"playlist_name":"{{requested_playlist}}","shuffle":"1"}

              '
        - service: media_player.play_media
          data:
            media_content_id: '{{playlist}}'
            media_content_type: playlist
          target:
            entity_id: '{{chromecasts[repeat.index]}}'
        - delay:
            hours: 0
            minutes: 0
            seconds: 15
            milliseconds: 0
      for_each: '{{ chromecasts }}'
  mode: single
  icon: mdi:audio-video
  description: ''
set_whole_house_to_cozy_ambiance_2:
  alias: Set whole house to cozy ambiance
  sequence:
  - alias: Set Fireplace effect on all hue lights
    action: light.turn_on
    metadata: {}
    data:
      effect: fireplace
      brightness_pct: 100
    target:
      entity_id: light.group_all_inside_lights
  - alias: Set Fireplace effect on all hue lights
    action: light.turn_on
    metadata: {}
    data:
      effect: effect_flame
      brightness_pct: 100
    target:
      entity_id:
      - light.salon_wall_light
      - light.livingroom_wall_light
  - metadata: {}
    data:
      requested_playlist: Fireplace Visuals
    action: script.start_visual_playlist_on_plex
  description: ''
  icon: mdi:fireplace
changes_selected_light_group_to_random_fake_white:
  alias: Changes selected light group to random fake white
  sequence:
  - variables:
      lights: "{%- set light_group = states.light | selectattr('entity_id', 'in',
        state_attr(selected_group, 'entity_id'))  | list -%} {%- set num_lights =
        light_group | count -%} {%- set h_increment = (360 // num_lights) | int -%}
        {%- set hue_values = namespace(values=[]) %}\n{%- for i in range(num_lights)
        %}\n  {%- set hue_values.values = hue_values.values + [i * h_increment] %}\n{%-
        endfor %}\n{%- set ns = namespace(output=[], shuffled_hues=[]) %}\n{%- for
        i in range(num_lights) %}\n  {%- set rand = (range(hue_values.values | count)
        | random) -%}\n  {%- set h = hue_values.values[rand] -%}\n  {%- set hue_values.values
        = hue_values.values | reject('equalto', h) | list -%}\n  {%- set ns.shuffled_hues
        = ns.shuffled_hues + [h] -%}\n{%- endfor %}\n{%- for i in range(num_lights)
        %}\n  {%- set light = light_group[i] -%}\n  {%- set h = ns.shuffled_hues[i]
        -%}\n  {%- set s = 100 -%}\n  {%- set hs_color = [h, s] -%}\n  {% set temp_output
        = {\n    \"entity_id\": light.entity_id,\n    \"hs_color\": hs_color\n  }
        %}\n  {% set ns.output = ns.output + [temp_output] %}\n{%- endfor %}\n{{ ns.output
        }}\n"
  - repeat:
      sequence:
      - data:
          hs_color: '{{ repeat.item.hs_color }}'
          transition: 0
        target:
          entity_id: '{{ repeat.item.entity_id }}'
        action: light.turn_on
      for_each: '{{ lights }}'
  mode: restart
  icon: mdi:sale
  fields: {}
  description: ''
vacuum_clean_the_entrance:
  alias: Vacuum Clean the entrance
  sequence:
  - action: xiaomi_miio.vacuum_clean_segment
    metadata: {}
    data:
      segments:
      - 25
    target:
      entity_id: vacuum.xiaomi_vacuum_cleaner
  description: ''
  icon: mdi:robot-vacuum
equalize_home_group_volume:
  alias: Equalize Home GRoup volume
  sequence:
  - variables:
      average_volume: '{{ state_attr(''media_player.group_mass_home_airplay_speakers'',''volume_level'')}}'
  - action: media_player.volume_set
    metadata: {}
    data:
      volume_level: '{{average_volume}}'
    target:
      entity_id:
      - media_player.universal_hallway_speakers
      - media_player.universal_kitchen_speakers
      - media_player.universal_salon_speakers
      - media_player.universal_office_speakers
      - media_player.universal_livingroom_speakers
  description: ''
  icon: mdi:approximately-equal
