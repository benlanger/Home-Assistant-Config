blueprint:
  name: Controller - IKEA E1744 SYMFONISK Rotary Remote
  description: "# Controller - IKEA E1744 SYMFONISK Rotary Remote\n\nController automation
    for executing any kind of action triggered by the provided IKEA E1744 SYMFONISK
    Rotary Remote. Allows to optionally loop a custom action during controller rotation.\nSupports
    deCONZ, ZHA, Zigbee2MQTT.\n\nAutomations created with this blueprint can be connected
    with one or more [Hooks](https://epmatt.github.io/awesome-ha-blueprints/docs/blueprints/hooks)
    supported by this controller.\nHooks allow to easily create controller-based automations
    for interacting with media players, lights, covers and more.\nSee the list of
    [Hooks available for this controller](https://epmatt.github.io/awesome-ha-blueprints/docs/blueprints/controllers/ikea_e1744#available-hooks)
    for additional details.\n\n## More Info\n\nℹ️ Version 2025.04.19\n\U0001F4DD [Changelog](https://epmatt.github.io/awesome-ha-blueprints/docs/blueprints/controllers/ikea_e1744/#changelog)\n\U0001F4D5
    Full documentation regarding this blueprint is available [here](https://epmatt.github.io/awesome-ha-blueprints/docs/blueprints/controllers/ikea_e1744).\n\n\U0001F680
    This blueprint is part of the **[Awesome HA Blueprints](https://epmatt.github.io/awesome-ha-blueprints)
    project**. Please consider **[leaving a star on GitHub](https://github.com/EPMatt/awesome-ha-blueprints)**!
    \U0001F31F\n"
  source_url: https://raw.githubusercontent.com/EPMatt/awesome-ha-blueprints/main/blueprints/controllers/ikea_e1744/ikea_e1744.yaml
  domain: automation
  homeassistant:
    min_version: 2024.10.0
  input:
    integration:
      name: (Required) Integration
      description: Integration used for connecting the remote with Home Assistant.
        Select one of the available values.
      selector:
        select:
          options:
          - deCONZ
          - ZHA
          - Zigbee2MQTT
          multiple: false
          custom_value: false
          sort: false
    controller_device:
      name: (deCONZ, ZHA, Zigbee2MQTT Required) Controller Device
      description: The controller device to use for the automation. Choose a value
        only if the remote is integrated with deCONZ, ZHA, Zigbee2MQTT.
      default: ''
      selector:
        device:
          filter:
          - integration: mqtt
            manufacturer: IKEA
            model: SYMFONISK sound remote, gen 1
          - integration: mqtt
            manufacturer: IKEA
            model: SYMFONISK sound remote, gen 1 (E1744)
          - integration: zha
            manufacturer: IKEA of Sweden
            model: SYMFONISK Sound Controller
          - integration: deconz
            manufacturer: IKEA of Sweden
            model: SYMFONISK Sound Controller
          multiple: false
    helper_last_controller_event:
      name: (Required) Helper - Last Controller Event
      description: Input Text used to store the last event fired by the controller.
        You will need to manually create a text input entity for this, please read
        the blueprint Additional Notes for more info.
      default: ''
      selector:
        entity:
          domain:
          - input_text
          multiple: false
    action_rotate_left:
      name: (Optional) Rotate left
      description: Action to run on rotate left.
      default: []
      selector:
        action: {}
    action_rotate_left_stop:
      name: (Optional) Rotate left stop
      description: Action to run when stopping to rotate left the remote.
      default: []
      selector:
        action: {}
    action_rotate_right:
      name: (Optional) Rotate right
      description: Action to run on rotate right.
      default: []
      selector:
        action: {}
    action_rotate_right_stop:
      name: (Optional) Rotate right stop
      description: Action to run when stopping to rotate right the remote.
      default: []
      selector:
        action: {}
    action_click_short:
      name: (Optional) Remote short press
      description: Action to run on short remote press.
      default: []
      selector:
        action: {}
    action_click_double:
      name: (Optional) Remote double press
      description: Action to run on double remote press.
      default: []
      selector:
        action: {}
    action_click_triple:
      name: (Optional) Remote triple press
      description: Action to run on triple remote press.
      default: []
      selector:
        action: {}
    rotate_left_loop:
      name: (Optional) Rotate left - loop until stop
      description: Loop the rotate left action until the rotation is stopped.
      default: false
      selector:
        boolean: {}
    rotate_left_max_loop_repeats:
      name: (Optional) Rotate left - Maximum loop repeats
      description: Maximum number of repeats for the custom action, when looping is
        enabled. Use it as a safety limit to prevent an endless loop in case the corresponding
        stop event is not received.
      default: 500
      selector:
        number:
          min: 1.0
          max: 5000.0
          mode: slider
          step: 1.0
    rotate_right_loop:
      name: (Optional) Rotate right - loop until stop
      description: Loop the rotate right action until the rotation is stopped.
      default: false
      selector:
        boolean: {}
    rotate_right_max_loop_repeats:
      name: (Optional) Rotate right - Maximum loop repeats
      description: Maximum number of repeats for the custom action, when looping is
        enabled. Use it as a safety limit to prevent an endless loop in case the corresponding
        stop event is not received.
      default: 500
      selector:
        number:
          min: 1.0
          max: 5000.0
          mode: slider
          step: 1.0
    helper_debounce_delay:
      name: (Optional) Helper - Debounce delay
      description: Delay used for debouncing RAW controller events, by default set
        to 0. A value of 0 disables the debouncing feature. Increase this value if
        you notice custom actions or linked Hooks running multiple times when interacting
        with the device. When the controller needs to be debounced, usually a value
        of 100 is enough to remove all duplicate events.
      default: 0
      selector:
        number:
          min: 0.0
          max: 1000.0
          unit_of_measurement: milliseconds
          mode: box
          step: 10.0
variables:
  integration: !input integration
  rotate_left_loop: !input rotate_left_loop
  rotate_left_max_loop_repeats: !input rotate_left_max_loop_repeats
  rotate_right_loop: !input rotate_right_loop
  rotate_right_max_loop_repeats: !input rotate_right_max_loop_repeats
  helper_last_controller_event: !input helper_last_controller_event
  helper_debounce_delay: !input helper_debounce_delay
  integration_id: '{{ integration | lower }}'
  actions_mapping:
    deconz:
      rotate_left:
      - '3001'
      rotate_stop:
      - '3003'
      - '2003'
      rotate_right:
      - '2001'
      click_short:
      - '1002'
      click_double:
      - '1004'
      click_triple:
      - '1005'
    zha:
      rotate_left:
      - move_1_195
      - move_MoveMode.Down_195_0_0
      rotate_stop:
      - stop
      - stop_0_0
      rotate_right:
      - move_0_195
      - move_MoveMode.Up_195_0_0
      click_short:
      - toggle
      click_double:
      - step_0_1_0
      - step_StepMode.Up_1_0_0_0
      click_triple:
      - step_1_1_0
      - step_StepMode.Down_1_0_0_0
    zigbee2mqtt:
      rotate_left:
      - brightness_move_down
      rotate_stop:
      - brightness_stop
      rotate_right:
      - brightness_move_up
      click_short:
      - toggle
      click_double:
      - brightness_step_up
      click_triple:
      - brightness_step_down
  rotate_left: '{{ actions_mapping[integration_id]["rotate_left"] }}'
  rotate_stop: '{{ actions_mapping[integration_id]["rotate_stop"] }}'
  rotate_right: '{{ actions_mapping[integration_id]["rotate_right"] }}'
  click_short: '{{ actions_mapping[integration_id]["click_short"] }}'
  click_double: '{{ actions_mapping[integration_id]["click_double"] }}'
  click_triple: '{{ actions_mapping[integration_id]["click_triple"] }}'
  controller_id: !input controller_device
mode: restart
max_exceeded: silent
triggers:
- trigger: device
  domain: mqtt
  device_id: !input controller_device
  type: action
  subtype: brightness_move_down
- trigger: device
  domain: mqtt
  device_id: !input controller_device
  type: action
  subtype: brightness_stop
- trigger: device
  domain: mqtt
  device_id: !input controller_device
  type: action
  subtype: brightness_move_up
- trigger: device
  domain: mqtt
  device_id: !input controller_device
  type: action
  subtype: toggle
- trigger: device
  domain: mqtt
  device_id: !input controller_device
  type: action
  subtype: brightness_step_up
- trigger: device
  domain: mqtt
  device_id: !input controller_device
  type: action
  subtype: brightness_step_down
- trigger: event
  event_type:
  - deconz_event
  - zha_event
  event_data:
    device_id: !input controller_device
conditions:
- condition: and
  conditions:
  - '{%- set trigger_action -%} {%- if integration_id == "zigbee2mqtt" -%} {{ trigger.payload
    }} {%- elif integration_id == "deconz" -%} {{ trigger.event.data.event }} {%-
    elif integration_id == "zha" -%} {{ trigger.event.data.command }}{{"_" if trigger.event.data.args|length
    > 0}}{{ trigger.event.data.args|join("_") }} {%- endif -%} {%- endset -%} {{ trigger_action
    not in ["","None"] }}'
actions:
- delay:
    milliseconds: !input helper_debounce_delay
- variables:
    trigger_action: '{%- if integration_id == "zigbee2mqtt" -%} {{ trigger.payload
      }} {%- elif integration_id == "deconz" -%} {{ trigger.event.data.event }} {%-
      elif integration_id == "zha" -%} {{ trigger.event.data.command }}{{"_" if trigger.event.data.args|length
      > 0}}{{ trigger.event.data.args|join("_") }} {%- endif -%}'
    deserialized_state: '{{ (states(helper_last_controller_event) | from_json) if
      helper_last_controller_event is not none and (states(helper_last_controller_event)
      | regex_match("^\{\s*?((\"a\":\s*?\".*\"|\"t\":\s*?\d+\.\d+)(,\s*?)?){2}\s*?\}$"))
      else {} }}'
    trigger_delta: '{{ (as_timestamp(now()) - (deserialized_state.t | default(0)))
      * 1000 }}'
    last_controller_event: '{{ (deserialized_state.a | default("")) }}'
- action: input_text.set_value
  data:
    entity_id: !input helper_last_controller_event
    value: '{{ {"a":trigger_action,"t":as_timestamp(now())} | to_json }}'
- choose:
  - conditions: '{{ trigger_action | string in rotate_left }}'
    sequence:
    - event: ahb_controller_event
      event_data:
        controller: '{{ controller_id }}'
        action: rotate_left
    - choose:
      - conditions: '{{ rotate_left_loop }}'
        sequence:
        - repeat:
            while: '{{ repeat.index < rotate_left_max_loop_repeats | int }}'
            sequence: !input action_rotate_left
      default: !input action_rotate_left
  - conditions:
    - '{{ trigger_action | string in rotate_stop }}'
    - '{{ last_controller_event | string in rotate_left }}'
    sequence:
    - event: ahb_controller_event
      event_data:
        controller: '{{ controller_id }}'
        action: rotate_left_stop
    - choose:
      - conditions: []
        sequence: !input action_rotate_left_stop
  - conditions: '{{ trigger_action | string in rotate_right }}'
    sequence:
    - event: ahb_controller_event
      event_data:
        controller: '{{ controller_id }}'
        action: rotate_right
    - choose:
      - conditions: '{{ rotate_right_loop }}'
        sequence:
        - repeat:
            while: '{{ repeat.index < rotate_right_max_loop_repeats | int }}'
            sequence: !input action_rotate_right
      default: !input action_rotate_right
  - conditions:
    - '{{ trigger_action | string in rotate_stop }}'
    - '{{ last_controller_event | string in rotate_right }}'
    sequence:
    - event: ahb_controller_event
      event_data:
        controller: '{{ controller_id }}'
        action: rotate_right_stop
    - choose:
      - conditions: []
        sequence: !input action_rotate_right_stop
  - conditions: '{{ trigger_action | string in click_short }}'
    sequence:
    - event: ahb_controller_event
      event_data:
        controller: '{{ controller_id }}'
        action: click_short
    - choose:
      - conditions: []
        sequence: !input action_click_short
  - conditions: '{{ trigger_action | string in click_double }}'
    sequence:
    - event: ahb_controller_event
      event_data:
        controller: '{{ controller_id }}'
        action: click_double
    - choose:
      - conditions: []
        sequence: !input action_click_double
  - conditions: '{{ trigger_action | string in click_triple }}'
    sequence:
    - event: ahb_controller_event
      event_data:
        controller: '{{ controller_id }}'
        action: click_triple
    - choose:
      - conditions: []
        sequence: !input action_click_triple
